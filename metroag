#!/usr/bin/env bash
set -e
#
# Wrapper around ansible-playbook for the installation of Nuage components
#

METROAG_VERSION="3.0"

CURRENT_DIR=`pwd`
PLAYBOOK_DIR=$CURRENT_DIR/src/playbooks
PLAYBOOK_WITH_BUILD_DIR=$CURRENT_DIR/src/playbooks/with_build
SCHEMA_DIR=$CURRENT_DIR/schemas
DEPLOYMENTS_BASE_DIR=$CURRENT_DIR/deployments
DEPLOYMENT_DIR=$DEPLOYMENTS_BASE_DIR/default

function usage {
    echo ""
    echo "Nuage Networks MetroAG Automation EnGine (AG)"
    echo ""
    echo "Version:" $METROAG_VERSION
    echo ""
    echo "MetroAG is an automation engine that deploys and upgrades Nuage"
    echo "Networks components.  After you specify the individual details"
    echo "of your deployment, MetroAG (leveraging Ansible playbooks and"
    echo "roles) sets up the environment as specified. MetroAG can also"
    echo "upgrade, roll-back, and health-check the environment."
    echo ""
    echo "See README.md for more information"
    echo ""
    echo "Usage:"
    echo "    " $0 "<workflow>" "[deployment]" "[options]"
    echo ""
    echo "    <workflow>:     Name of the MetroAG workflow to run."
    echo "    [deployment]:   The name of a deployment containing the required"
    echo "                    configuration files.  The deployments are stored"
    echo "                    as directories under" $DEPLOYMENTS_BASE_DIR
    echo ""
    echo "Options:"
    echo "    -h, --help:            Displays this help."
    echo "    --ansible-help:        Displays help for ansible arguments."
    echo "    -v, -vv, -vvv, -vvvv:  Runs with increasing levels of verbosity."
    echo "    --list:                Shows a list of all supported workflows"
    echo "    --skip-build:          Runs workflow without performing build."
    echo "                           This will prevent changes in the deployment from"
    echo "                           taking effect, but it will be faster."
    echo ""
    echo "Remaining [options] are passed to Ansible"
    echo ""
}

function list_workflows {
    for file in $PLAYBOOK_DIR/*.yml
    do
        if [[ -f $file ]]; then
            filename=$(basename "$file")
            filename="${filename%.*}"
            echo $filename
        fi
    done
    for file in $PLAYBOOK_WITH_BUILD_DIR/*.yml
    do
        if [[ -f $file ]]; then
            filename=$(basename "$file")
            filename="${filename%.*}"
            echo $filename
        fi
    done
}

#
# Parse arguments
#
SKIP_BUILD=0
POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -h|--help)
    usage
    exit 1
    ;;
    --ansible-help)
    $(which ansible-playbook) --help
    exit 1
    ;;
    --list)
    list_workflows
    exit 1
    ;;
    --skip-build)
    SKIP_BUILD=1
    shift # past argument
    ;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

# Missing workflow, show usage
if [[ $# -eq 0 ]] || [[ $1 == -* ]]; then
    usage
    exit 1
fi

# <workflow> argument
WORKFLOW=$1
shift

# Add .yml extension if needed
EXTENSION="${WORKFLOW##*.}"
if [ "$EXTENSION" != "yml" ]; then
    WORKFLOW=${WORKFLOW}.yml
fi

# [deployment] argument
if [[ $# -gt 0 ]]; then
    if [[ $1 != -* ]]; then
        DEPLOYMENT=$1
        shift
        if [[ -d $DEPLOYMENT ]]; then
            DEPLOYMENT_DIR=$DEPLOYMENT
        elif [[ -d $DEPLOYMENTS_BASE_DIR/$DEPLOYMENT ]]; then
            DEPLOYMENT_DIR=$DEPLOYMENTS_BASE_DIR/$DEPLOYMENT
        else
          echo "Could not find deployment under" $DEPLOYMENTS_BASE_DIR
          exit 1
        fi
    fi
fi

# Run playbooks
if [[ -a $PLAYBOOK_DIR/$WORKFLOW  ]]; then
    $(which ansible-playbook) -e deployment_dir=$DEPLOYMENT_DIR -e schema_dir=$SCHEMA_DIR $PLAYBOOK_DIR/$WORKFLOW "$@" || exit $?
elif [[ -a $PLAYBOOK_WITH_BUILD_DIR/$WORKFLOW ]]; then
    if [[ $SKIP_BUILD -ne 1 ]]; then
        $(which ansible-playbook) -e deployment_dir=$DEPLOYMENT_DIR -e schema_dir=$SCHEMA_DIR $PLAYBOOK_DIR/build.yml "$@" || exit $?
    fi
    $(which ansible-playbook) $PLAYBOOK_WITH_BUILD_DIR/$WORKFLOW "$@" || exit $?
else
  echo "Requested MetroAG workflow could not be found"
  exit 1
fi
