#!/usr/bin/env bash
set -e
#
# Wrapper around ansible-playbook for the installation of Nuage components
#

METROAE_VERSION="v3.2.0"

CURRENT_DIR=`pwd`
PLAYBOOK_DIR=$CURRENT_DIR/src/playbooks
PLAYBOOK_WITH_BUILD_DIR=$CURRENT_DIR/src/playbooks/with_build
SCHEMA_DIR=$CURRENT_DIR/schemas
DEPLOYMENTS_BASE_DIR=$CURRENT_DIR/deployments
DEPLOYMENT_DIR=$DEPLOYMENTS_BASE_DIR/default
INVENTORY_DIR=$CURRENT_DIR/src/inventory
VAULT_ENV_FILE=$CURRENT_DIR/src/vault-env
ENCRYPTED_DEPLOYMENT_FILE=credentials.yml
ENCRYPTED_TOKEN=\$ANSIBLE_VAULT
AUDIT_LOG=audit.log

function usage {
    echo ""
    echo "Nuage Networks Metro Automation Engine (MetroÆ) CLI"
    echo ""
    echo "MetroÆ Version:" $METROAE_VERSION
    echo ""
    echo "MetroÆ is an automation engine that installs and upgrades Nuage"
    echo "Networks components.  After you specify the individual details"
    echo "of your deployment, MetroÆ sets up the environment and executes"
    echo "the install or upgrade on your behalf."
    echo ""
    echo "See README.md for more information"
    echo ""
    echo "Usage:"
    echo "    metroae <workflow> [deployment] [options]"
    echo ""
    echo "    workflow:     Name of the MetroÆ workflow to run, e.g. 'install_everything'."
    echo "    deployment:   The name of a deployment containing the required configuration"
    echo "                  files.  The deployments are stored as directories under"
    echo "                  " $DEPLOYMENTS_BASE_DIR
    echo ""
    echo "Options:"
    echo "    -h, --help:            Displays this help."
    echo "    --ansible-help:        Displays help for ansible arguments."
    echo "    -v, -vv, -vvv, -vvvv:  Runs with increasing levels of verbosity."
    echo "    --list:                Shows a list of all supported workflows"
    echo "    --skip-password:       Do not ask for a password.  Password can be"
    echo "                           provided via the environment variable METROAE_PASSWORD"
    echo "    --skip-build:          Runs workflow without performing build."
    echo "                           This will prevent changes in the deployment from"
    echo "                           taking effect, but it will be faster."
    echo "    --set-group <group>:   Sets the ownership of inventory and logs to specified"
    echo "                           group so that other users in the group can access"
    echo "                           these files."
    echo ""
    echo "Any additional [options] are passed to the internal Ansible engine for processing"
    echo ""
}

function list_workflows {
    for file in $PLAYBOOK_DIR/*.yml
    do
        if [[ -f $file ]]; then
            filename=$(basename "$file")
            filename="${filename%.*}"
            echo $filename
        fi
    done
    for file in $PLAYBOOK_WITH_BUILD_DIR/*.yml
    do
        if [[ -f $file ]]; then
            filename=$(basename "$file")
            filename="${filename%.*}"
            echo $filename
        fi
    done
}

function check_password_needed {
    deployment_dir="$1"

    if [[ -z $METROAE_PASSWORD ]]; then
        if [[ -a $deployment_dir/$ENCRYPTED_DEPLOYMENT_FILE ]]; then
            fail=0
            grep $ENCRYPTED_TOKEN "$deployment_dir/$ENCRYPTED_DEPLOYMENT_FILE" > /dev/null || fail=1
            if [[ $fail -ne 0 ]]; then
                SKIP_PASSWORD=1
            fi
        else
            SKIP_PASSWORD=1
        fi
    else
        SKIP_PASSWORD=1
    fi
}

function ask_password {
    if [[ $SKIP_PASSWORD -ne 1 ]]; then
        echo "Deployment contains encrypted content, password required."
        echo "Password can alternatively be provided via the environment variable METROAE_PASSWORD"
        echo ""
        read -s -p "Enter password: " METROAE_PASSWORD
        export METROAE_PASSWORD
    fi
}

function write_audit_log_entry {
    echo "`date` MetroÆ $METROAE_VERSION $ORIGINAL_ARGS" >> $AUDIT_LOG
}

function audit_log_and_exit {
    echo "`date` MetroÆ $METROAE_VERSION exit code $1" >> $AUDIT_LOG
    exit $1
}

ORIGINAL_ARGS="$*"

#
# Parse arguments
#
SKIP_BUILD=0
SKIP_PASSWORD=0
POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -h|--help)
    usage
    exit 0
    ;;
    --ansible-help)
    $(which ansible-playbook) --help
    exit 0
    ;;
    --list)
    list_workflows
    exit 0
    ;;
    --set-group)
    GROUP="$2"
    touch ansible.log
    chgrp $GROUP ansible.log
    touch $AUDIT_LOG
    chgrp $GROUP $AUDIT_LOG
    shift # past argument
    shift # past value
    ;;
    --skip-build)
    SKIP_BUILD=1
    shift # past argument
    ;;
    --skip-password)
    SKIP_PASSWORD=1
    shift # past argument
    ;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

# Missing workflow, show usage
if [[ $# -eq 0 ]] || [[ $1 == -* ]]; then
    usage
    exit 1
fi

# <workflow> argument
WORKFLOW=$1
shift

# Add .yml extension if needed
EXTENSION="${WORKFLOW##*.}"
if [ "$EXTENSION" != "yml" ]; then
    WORKFLOW=${WORKFLOW}.yml
fi

# [deployment] argument
if [[ $# -gt 0 ]]; then
    if [[ $1 != -* ]]; then
        DEPLOYMENT="$1"
        shift
        if [[ -d $DEPLOYMENT ]]; then
            DEPLOYMENT_DIR=$DEPLOYMENT
        elif [[ -d $DEPLOYMENTS_BASE_DIR/$DEPLOYMENT ]]; then
            DEPLOYMENT_DIR=$DEPLOYMENTS_BASE_DIR/$DEPLOYMENT
        else
          echo "Could not find deployment '$DEPLOYMENT' under" $DEPLOYMENTS_BASE_DIR
          exit 1
        fi
    fi
fi

# Get password if needed
check_password_needed "$DEPLOYMENT_DIR"
ask_password
if [[ ! -z $METROAE_PASSWORD ]]; then
    export ANSIBLE_VAULT_PASSWORD_FILE=$VAULT_ENV_FILE
fi

# Run playbooks
if [[ -a $PLAYBOOK_DIR/$WORKFLOW  ]]; then
    write_audit_log_entry
    $(which ansible-playbook) -e deployment_dir=\'"$DEPLOYMENT_DIR"\' -e schema_dir=$SCHEMA_DIR $PLAYBOOK_DIR/$WORKFLOW "$@" || audit_log_and_exit $?
elif [[ -a $PLAYBOOK_WITH_BUILD_DIR/$WORKFLOW ]]; then
    write_audit_log_entry
    if [[ $SKIP_BUILD -ne 1 ]]; then
        $(which ansible-playbook) -e deployment_dir=\'"$DEPLOYMENT_DIR"\' -e schema_dir=$SCHEMA_DIR $PLAYBOOK_DIR/build.yml "$@" || audit_log_and_exit $?
        if [[ $GROUP ]]; then chgrp -R $GROUP $INVENTORY_DIR; fi
    fi
    $(which ansible-playbook) $PLAYBOOK_WITH_BUILD_DIR/$WORKFLOW "$@" || audit_log_and_exit $?
else
  echo "Requested MetroÆ workflow could not be found"
  exit 1
fi

audit_log_and_exit 0
