#!/usr/bin/env bash
set -e
#
# Wrapper around ansible-playbook for the installation of Nuage components

METROAE_VERSION="2.4.1"

function usage {
    echo ""
    echo "Nuage Networks MetroAE Automation Engine"
    echo ""
    echo "Version:" $METROAE_VERSION
    echo ""
    echo "MetroAE is an automation engine that deploys and upgrades Nuage"
    echo "Networks components.  After you specify the individual details"
    echo "of your deployment, MetroAE (leveraging Ansible playbooks and"
    echo "roles) sets up the environment as specified. MetroAE can also"
    echo "upgrade, roll-back, and health-check the environment."
    echo ""
    echo "See README.md for more information"
    echo ""
    echo "Usage:"
    echo "    " $0 "<playbook>" "[options]"
    echo ""
    echo "    <playbook>:     Name of the MetroAE playbook to run."
    echo ""
    echo "Options:"
    echo "    -h, --help:                Displays this help."
    echo "    --ansible-help:            Displays help for ansible arguments."
    echo "    -v, -vv, -vvv, -vvvv:      Runs with increasing levels of verbosity."
    echo "    --log-file-group <group>:  Change log file group to value specified."
    echo ""
    echo "Remaining [options] are passed to Ansible"
    echo ""
}

#
# Parse arguments
#
POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -h|--help)
    usage
    exit 1
    ;;
    --ansible-help)
    $(which ansible-playbook) --help
    exit 1
    ;;
    --log-file-group)
    GROUP="$2"
    touch ansible.log
    chgrp $GROUP ansible.log
    shift # past argument
    shift # past value
    ;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

# Missing playbook, show usage
if [[ $# -eq 0 ]] || [[ $1 == -* ]]; then
    usage
    exit 1
fi

PLAYBOOK=$1
shift

# Add .yml extension if needed
EXTENSION="${PLAYBOOK##*.}"
TAG="$(echo $PLAYBOOK | cut -d'_' -f 1)"
if [ "$EXTENSION" != "yml" ]; then
  PLAYBOOK=${PLAYBOOK}.yml
fi

if [ "$TAG" != "reset" ] && [ $PLAYBOOK != "build.yml" ] && [ $PLAYBOOK != "setup.yml" ] && [ $PLAYBOOK != "nuage_unzip.yml" ]; then
  echo "Populating $TAG variables"
  $(which ansible-playbook) -i hosts handle_vars.yml "$@"
fi

if [[ -a $PLAYBOOK  ]]; then
  echo "Executing $PLAYBOOK"
  $(which ansible-playbook) -i hosts -e "@user_creds.yml" $PLAYBOOK "$@"
elif [[ -a ./playbooks/$PLAYBOOK ]]; then
  echo "Executing ./playbooks/$PLAYBOOK"
  $(which ansible-playbook) -i hosts wrapper.yml -e "@user_creds.yml" -e playbook=playbooks/$PLAYBOOK "$@"
else
  echo "Requested Metro-Playbook could not be found"
  exit 1
fi
