---

- name: Check for VSD standalone or cluster
  set_fact:
    vsd_cluster: "{{ nuage.vsds | length == 3}}"

- name: Set VSD fqdn
  set_fact:
    vsd_fqdn: "{{ vsd_cluster | ternary( 'xmpp.', 'vsd.' ) + nuage.domain }}"

- name: Wait for VSD ssh to be ready
  local_action:
    module: wait_for
    port: "22"
    host: "{{ ansible_host }}"
    search_regex: OpenSSH
    delay: 1

- block:
  - name: Update /etc/hosts file
    blockinfile:
      dest: /etc/hosts
      block: |
        {% for host in groups['vsds']  %}
        {{ hostvars[host].ip }}    {{ host }} {{ vsd_cluster | ternary( 'xmpp.' + nuage.domain, '' ) }}
        {% endfor %}
  - name: Read the VSD version
    shell: echo $VSD_VERSION | cut -d . -f 1
    register: vsd_version

  - debug: var=vsd_version.stdout verbosity=1

  - block:
    - name: Generate SSH keys
      shell: ssh-keygen -b 2048 -t rsa -f ~/.ssh/id_rsa -q -N ""
      args:
        creates: "~/.ssh/id_rsa"
      delegate_to: "{{ item }}"
      with_items: "{{ groups['vsds'] }}"
  
    - name: Get generated SSH keys
      shell: cat ~/.ssh/id_rsa.pub
      register: ssh_key_lst
      delegate_to: "{{ item }}"
      with_items: "{{ groups['vsds'] }}"
  
    - name: Add SSH keys to authorized_keys file
      shell: "echo {{ item[1].stdout }} >> ~/.ssh/authorized_keys"
      delegate_to: "{{ item[0] }}"
      with_nested:
        - "{{ groups['vsds'] }}"
        - "{{ ssh_key_lst.results }}"
    become: yes
    become_user: "{{ ( vsd_version.stdout | int < 5 ) | ternary('root','vsd') }}"
    when: inventory_hostname == groups['vsds'][0]

  - name: Change owner and permissions of VSD authorized keys
    file:
      path: /home/vsd/.ssh/authorized_keys
      owner: vsd
      group: hadoopusers
      mode: 0640
    delegate_to: "{{ item }}"
    with_items: "{{ groups['vsds'] }}"
    run_once: true
    when: vsd_version.stdout | int >= 5

  when: vsd_cluster
  remote_user: root

- block:
  # TODO currently requires gather_facts, takes long time
  - name: Copy files to pin OS version when CentOS 6.6 or 6.5
    copy:
      src: ./roles/vsd-deploy/files/c66/
      dest: /etc/yum.repos.d/
    when:
      - yum_pin is defined
      - ansible_distribution_version|match('6.6') or ansible_distribution_version|match('6.5')

  - name: Copy files to pin OS version when CentOS 6.8
    copy:
      src: ./roles/vsd-deploy/files/c68/
      dest: /etc/yum.repos.d/
    when:
      - yum_pin is defined
      - ansible_distribution_version|match('6.8')

  - name: Configure yum proxy
    lineinfile:
      dest: /etc/yum.conf
      regexp: "^proxy="
      line: "proxy={{ nuage.http_proxy }}"
    when: nuage.http_proxy is defined

  - name: Execute a yum update
    yum:
      name: '*'
      state: latest
    when: yum_update is defined

  - name: Disable cloud-init on VSD, to avoid boot time delays
    command: chkconfig cloud-init off

  - name: Configure ntpd and ntpdate and local time zone
    include_role:
      name: common
      tasks_from: linux-ntp

  - block:
    - name: Configure install commands
      set_fact:
        cmd:
          vsd:  "/opt/vsd/vsd-install.sh -t s -y"
          vsd1: "/opt/vsd/vsd-install.sh -t 1 -a vsd1.{{nuage.domain}} -b vsd2.{{nuage.domain}} -c vsd3.{{nuage.domain}} -x xmpp.{{nuage.domain}} -y"
          vsd2: "/opt/vsd/vsd-install.sh -1 vsd1.{{nuage.domain}} -t 2 -x xmpp.{{nuage.domain}} -y"
          vsd3: "/opt/vsd/vsd-install.sh -1 vsd1.{{nuage.domain}} -t 3 -x xmpp.{{nuage.domain}} -y"

    - name: Install VSD software on node {{ inventory_hostname }}
      command: "{{ cmd[ inventory_hostname_short ] }}"

    when: vsd_cluster and not vm_running
  
  - name: Set XMPP connection to allow both clear and TLS
    command: /opt/vsd/bin/ejmode allow -y

  - block:
     - name: Download pip installer through proxy
       command: curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py

     - name: Execute pip installer through proxy
       command: python get-pip.py

     - name: Install pexpect on VSD1 {{ groups['vsds'][0] }} through proxy
       pip:
          name: pexpect
    environment:
      http_proxy: "{{ nuage.http_proxy is defined | ternary( nuage.http_proxy, '' ) }}"
      https_proxy: "{{ nuage.http_proxy is defined | ternary( nuage.http_proxy, '' ) }}"
    when: inventory_hostname == groups['vsds'][0]
  
  remote_user: "root"
