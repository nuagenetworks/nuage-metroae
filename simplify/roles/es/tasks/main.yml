---

- name: Check for ES standalone or cluster
  set_fact:
    es_cluster: "{{ nuage.stats | length == 3}}"

- name: Wait for VSTAT ssh to be ready
  local_action:
    module: wait_for
    port: "22"
    host: "{{ ansible_host }}"
    search_regex: OpenSSH
    delay: 1

- block:
  - name: Update /etc/hosts file
    blockinfile:
      dest: /etc/hosts
      block: |
        {% for host in groups['ess']  %}
        {{ hostvars[host]['ip'] }}    {{ host }}
        {% endfor %}
  
  - name: Update /etc/hosts file on VSD(s)
    blockinfile:
      dest: /etc/hosts
      marker: "# {mark} Ansible created entries for stats nodes"
      block: |
        {% for host in groups['ess']  %}
        {{ hostvars[host]['ip'] }}    {{ host }}
        {% endfor %}
    delegate_to: "{{ item }}"
    with_items: "{{ groups['vsds'] }}"
    run_once: true
  
  - block:
    - name: Generate SSH keys
      shell: ssh-keygen -b 2048 -t rsa -f /root/.ssh/id_rsa -q -N ""
      args:
        creates: /root/.ssh/id_rsa
      delegate_to: "{{ item }}"
      with_items: "{{ groups['ess'] }}"
      run_once: true
  
    - name: Get generated SSH keys
      shell: cat ~/.ssh/id_rsa.pub
      register: ssh_key_lst
      delegate_to: "{{ item }}"
      with_items: "{{ groups['ess'] }}"
      run_once: true
  
    - name: Add SSH keys to authorized_keys file
      shell: "echo {{ item[1].stdout }} >> /root/.ssh/authorized_keys"
      delegate_to: "{{ item[0] }}"
      with_nested:
        - "{{ groups['ess'] }}"
        - "{{ ssh_key_lst.results }}"
      run_once: true
    when: es_cluster
  
  - name: Configure ntpd and ntpdate and local time zone
    include_role:
      name: common
      tasks_from: linux-ntp

  - block:
    - name: Start iptables
      systemd:
        name: iptables
        state: started
        enabled: yes
    - name: Configure iptables
      shell: |
        ipset flush &&
        ipset -exist create vsd hash:ip &&
        {% for vsd in groups['vsds'] %}
        ipset add vsd {{ hostvars[ vsd ].ip }} &&
        {% endfor %}
        ipset save -f /etc/sysconfig/ipset &&
        iptables -R INPUT 5 -m set --match-set vsd src -p tcp --dport 9200 -j ACCEPT &&
        iptables -R INPUT 6 -m set --match-set vsd src -p tcp --dport 9300 -j ACCEPT &&
        service iptables save

  - name: Restart elastic search
    systemd:
      name: elasticsearch
      state: restarted

  - name: Execute VSTAT cluster script on standalone or clustered vsds
    command: /opt/vsd/vsd-es-cluster-config.sh -e {{ groups['ess'][0] }},{{ groups['ess'][1] }}, {{ groups['ess'][2] }}
    delegate_to: "{{ groups['vsds'][0] }}"
    environment:
      SSHPASS: "Alcateldc"
    run_once: true
    when: es_cluster
  
  - name: Enable stats collection on the vsd(s)
    command: /opt/vsd/vsd-stats.sh -e {{ groups['ess'][0] }} {% if es_cluster %} , {{ groups['ess'][1] }} , {{ groups['ess'][2] }} {% endif %}
    delegate_to: "{{ item }}"
    with_items: "{{ groups['vsds'] }}"
    run_once: true

  - name: Create SSL cert directory
    file: path=/etc/nginx/ssl state=directory

  - block:
    - block:
      - name: Revoke old stats cert, if any
        command: "/opt/vsd/ejbca/deploy/certMgmt.sh -a revoke -u {{ inventory_hostname_short }}"
        ignore_errors: yes
  
      - name: Create and transfer certs from VSD for VSS ( requires pexpect )
        expect:
         timeout: 120
         command: "/opt/vsd/ejbca/deploy/certMgmt.sh -a generate -u {{ inventory_hostname_short }} -c {{ inventory_hostname_short }} 
                   -d {{ inventory_hostname }} -f pem -t server -s root@{{inventory_hostname}}:/etc/nginx/ssl -o csp"
         responses:
           (?i)password: "Alcateldc"
      delegate_to: "{{ groups['vsds'][0] }}"

  - name: Chown
    command: "chown -R root:root /etc/nginx/ssl"

  - name: Chmod
    command: "chmod -R 600 /etc/nginx/ssl"
  
  - name: Create symlinks for certificates
    file:
      src: '/etc/nginx/ssl/{{ item.src }}'
      dest: '/etc/nginx/ssl/{{ item.dest }}'
      state: link
    with_items:
      - { src: '{{inventory_hostname_short}}Cert.pem', dest: 'elasticCert.pem' }
      - { src: '{{inventory_hostname_short}}-Key.pem', dest: 'elastic-Key.pem' }

  - name: Restart nginx
    systemd:
      name: nginx
      state: restarted

  # block properties
  remote_user: "root"
