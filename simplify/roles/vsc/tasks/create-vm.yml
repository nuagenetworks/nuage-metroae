---

- name: Include OS specific variables
  include_vars: "../../vm-host/vars/{{ hostvars[vsc.host].ansible_os_family }}.yml"

- name: Set Qcow image name
  set_fact:
    qcow_name: "{{hostvars['localhost'].vsc_qcow2_file_name}}"

- name: List the Virtual Machines running
  virt: command=list_vms
  register: virt_vms
  delegate_to: "{{ vsc.host }}"
  remote_user: "root"

- name: Set fact to check if VSC VM is running
  set_fact: vsc_running="{{ vm_name in virt_vms.list_vms }}"
- debug: var=vsc_running verbosity=1

- name: Verify that the VSC VM is not already running ( add 'keep_existing_vms' to skip this check )
  assert:
    that: not vsc_running|bool or keep_existing_vms | default(false)
    msg: "{{ vm_name }} is already running on {{ vsc.host }}"

- block:
  - name: Create libvirt image directory
    file: path={{ nuage.images_path }}/{{ vm_name }}
          state=directory
          owner={{ libvirt.user }}
          group={{ libvirt.group }}

  - name: Copy the VSC qcow image to virt images directory, remotely
    copy: src={{ hostvars['localhost'].vsc_qcow2_path }}/{{ qcow_name }}
          dest={{ nuage.images_path }}/{{ vm_name }}/{{ qcow_name }}
          owner={{ libvirt.user }}
          group={{ libvirt.group }}

  - name: Setup VSC temporary configuration files
    template: src={{ item }}.j2 backup=no dest={{ nuage.images_path }}/{{ vm_name }}/{{ item }}
    with_items:
      - bof.cfg
      - config.cfg

  - name: Copy temporary configuration files to the VSC image
    command: guestfish --rw -a {{ nuage.images_path }}/{{ vm_name }}/{{ qcow_name }} -m /dev/sda1 copy-in {{ images_path }}/{{ vm_name }}/{{ item }} /
    with_items:
      - bof.cfg
      - config.cfg

  - name: Remove temporary configuration files
    file: path={{ images_path }}/{{ vm_name }}/{{ item }} state=absent
    with_items:
      - bof.cfg
      - config.cfg

  - name: "Define new VSC VM"
    virt: name="{{ vm_name }}"
          command=define
          xml="{{ lookup('template', 'vsc.xml.j2') }}"
          uri=qemu:///system

  - name: "Run VSC VM"
    virt: name="{{ vm_name }}"
          state=running
          autostart=True
          uri=qemu:///system
    when: ansible_version.full | version_compare('2.3', '>=')

  - block:
    - name: "Configure VM to autostart"
      command: virsh autostart {{ vm_name }}

    - name: "Run VSC VM"
      virt: name="{{ vm_name }}"
            state=running
            uri=qemu:///system
    when: ansible_version.full | version_compare('2.3', '<')

## JvB condition for the whole block 
  when: "not vsc_running"
  delegate_to: "{{ vsc.host }}"
  remote_user: "root"  
