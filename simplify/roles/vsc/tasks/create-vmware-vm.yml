---

- name: Gathering info on VSC VM {{ id }}
  connection: local
  vmware_guest:
    hostname: "{{ vsc.host }}"
    username: "{{ nuage.vcenter.username }}"
    password: "{{ nuage.vcenter.password }}"
    name: "{{ vm_name }}"
    validate_certs: no
    state: gatherfacts
  register: vsc_vm_facts
  ignore_errors: yes

- debug: var=vsc_vm_facts verbosity=1

- name: Verify the VSC VM does not exist
  assert: 
    that: "vsc_vm_facts.failed is defined"
    msg: "VM {{ vm_name }} already exists, quiting"

- name: Deploy VSC Image on vCenter
  connection: local
  command: >
    {{ nuage.vcenter.ovftool | default('/usr/bin/ovftool') }}
    --acceptAllEulas
    --noSSLVerify
    --powerOn
    --machineOutput
    -dm=thin
    -ds={{ vmware_ds }}
    -n={{ vm_name }}
    --net:"Management Network={{ mgmt_bridge }}"
    --net:"Datapath Network={{ data_bridge }}"
    --prop:"DHCP=False"
    --prop:"Management_IP={{ ( vsc.mgmt_ip + '/' + nuage.networks['mgmt'].netmask ) | ipaddr() }}"
    {% if vsc.mgmt_static_route_list[0] is defined %}
    --prop:"Static_Routes={% for sr in vsc.mgmt_static_route_list %}{{ sr }} {{ nuage.networks['mgmt'].gateway }}{% if not loop.last %};{% endif %}{% endfor %}"
    {% else %}
    --prop:"Static_Routes="
    {% endif %}
    --prop:"DNS_Server_1={{ nuage.dns_server_list[0] }}"
    {% if nuage.dns_server_list[1] is defined %}
    --prop:"DNS_Server_2={{ nuage.dns_server_list[1] }}"
    {% else %}
    --prop:"DNS_Server_2=0.0.0.0"
    {% endif %}
    {% if nuage.dns_server_list[2] is defined %}
    --prop:"DNS_Server_3={{ nuage.dns_server_list[2] }}"
    {% else %}
    --prop:"DNS_Server_3=0.0.0.0"
    {% endif %}
    --prop:"DNS_Search_Domain={{ nuage.domain }}"
    --prop:"VSC_name={{ id + '.' + nuage.domain }}"
    --prop:"XMPP_Server={{ (nuage.vsds|count == 1) | ternary('vsd1','xmpp') + '.' + nuage.domain }}"
    {% if nuage.ntp_server_list[0] is defined %}
    --prop:"SNTP_Server={{ nuage.ntp_server_list[0] }}"
    {% else %}
    --prop:"SNTP_Server=0.0.0.0"
    {% endif %}
    {% if vsc.control_ip is defined and nuage.networks['data'].netmask is defined %}
    --prop:"Datapath_IP={{ ( vsc.control_ip + '/' + nuage.networks['data'].netmask ) | ipaddr() }}"
    {% else %}
    --prop:"Datapath_IP=0.0.0.0/32"
    {% endif %}
    --prop:"Datapath_DFGW=0.0.0.0"
    {% if vsc.system_ip is defined %}
    --prop:"System_IP={{ vsc.system_ip }}"
    {% else %}
    --prop:"System_IP=0.0.0.0"
    {% endif %}
    --prop:"BGP_Peer_1=0.0.0.0"
    --prop:"BGP_Peer_2=0.0.0.0"
    --prop:"Autonomous_System={{ as_number }}"
    --prop:"BGP_Group=internal"
    "{{ vsc_ova_path }}/{{ vsc_ova_file_name }}"
    vi://'{{ nuage.vcenter.username | urlencode }}':'{{ nuage.vcenter.password | urlencode }}'@{{ vsc.host }}/{{ nuage.vcenter.datacenter }}/host/{{ nuage.vcenter.cluster }} 

- name: Gathering info on VM
  connection: local
  vmware_guest:
    hostname: "{{ vsc.host }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    name: "{{ vm_name }}"
    validate_certs: no
  register: vsc_vm_facts

- debug: var=vsc_vm_facts verbosity=1

- name: Verify VM is running
  assert:
    that: "not vsc_vm_facts.failed"
    msg: "VSC VM {{ vm_name }} is not created"

- block:
  - name: Wait for VSC ssh to be ready
    wait_for:
      port: "22"
      host: "{{ name }}"
      search_regex: OpenSSH
      delay: 1

  - name: Creating temp folder for config file
    file:
      path: "/tmp/ansible-config-{{ inventory_hostname }}"
      state: directory

  - name: Creating VSC config file
    template:
      src: config.cfg.j2
      dest: "/tmp/ansible-config-{{ inventory_hostname }}/config.cfg"

  - name: Copy VSC config file to VSC
    command: "sshpass -p admin scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null /tmp/ansible-config-{{ inventory_hostname }}/config.cfg admin@{{ vsc.mgmt_ip }}:"

  - name: Reboot VSC VM
    vmware_guest:
      hostname: "{{ vsc.host }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      name: "{{ vmname }}"
      validate_certs: no
      state: "restarted"

  - name: Removing temp folder
    file:
      path: "/tmp/ansible-config-{{ inventory_hostname }}"
      state: absent

  connection: local