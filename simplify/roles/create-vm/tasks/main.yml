---

- name: Include OS specific variables (TODO move to vm-host role)
  include_vars: "{{ hostvars[vsd.host].ansible_os_family }}.yml"
   
- name: Set VSD VM name
  set_fact: vm_name="{{ id + "." + nuage.domain }}"

- name: List the Virtual Machines running
  virt: command=list_vms
  register: virt_vms
  delegate_to: "{{ vsd.host }}"
  remote_user: "root"

- name: Set fact to check if VSD VM {{ vm_name }} is running
  set_fact: vsd_running="{{ vm_name in virt_vms.list_vms }}"
- debug: var=vsd_running verbosity=1

- name: Verify that the VSD VM is not already running ( add 'keep_existing_vms' to skip this check )
  assert:
    that: not vsd_running|bool or keep_existing_vms | default(false)
    msg: "{{ vm_name }} is already running on {{ vsd.host }}"

- block:
  - name: Create libvirt image directory
    file: path={{ nuage.images_path }}/{{ vm_name }}
          state=directory
          owner={{ libvirt.user }}
          group={{ libvirt.group }}

  - name: Copy the VSD qcow image to virt images directory, locally
    copy: src={{ nuage.images_path }}/vsd.qcow2
          remote_src=yes
          dest={{ nuage.images_path }}/{{ vm_name }}
          owner={{ libvirt.user }}
          group={{ libvirt.group }}

  - name: Set fact to capture guestfish command
    set_fact: guestfish_cmd="guestfish --rw -a {{ nuage.images_path }}/{{ vm_name }}/vsd.qcow2 -m {{ hostvars[vsd.host].guestfish_mount }}"

  - name: Create a temporary copy of the network script for eth0
    template: src=ifcfg-eth0.j2 backup=no dest={{ nuage.images_path }}/{{ vm_name }}/ifcfg-eth0

  - name: Copy eth0 network script file to the VSD image
    command: "{{guestfish_cmd}} copy-in {{ nuage.images_path }}/{{ vm_name }}/ifcfg-eth0 /etc/sysconfig/network-scripts/"

  - name: Remove temporary copy of eth0 network script
    file: path={{ nuage.images_path }}/{{ vm_name }}/ifcfg-eth0 state=absent

  - name: Set the owner and group on the eth0 network script file in the VSD image
    command: "{{guestfish_cmd}} chown 0 0 /etc/sysconfig/network-scripts/ifcfg-eth0"

  - name: Create a temporary copy of the syscfg network file
    template: src=network.j2 backup=no dest={{ nuage.images_path }}/{{ vm_name }}/network

  - name: Copy network file to the VSD image
    command: "{{guestfish_cmd}} copy-in {{ nuage.images_path }}/{{ vm_name }}/network /etc/sysconfig/"

  - name: Remove temporary copy of network file
    file: path={{ nuage.images_path }}/{{ vm_name }}/network state=absent

  - name: Set the owner and group for the network hostname file on the VSD image
    command: "{{guestfish_cmd}} chown 0 0 /etc/sysconfig/network"

  - name: Create a temporary copy of the hostname file (for VSD version 4.0.R7 and on)
    template: src=hostname.j2 backup=no dest={{ nuage.images_path }}/{{ vm_name }}/hostname

  - name: Copy hostname file to the VSD image
    command: "{{guestfish_cmd}} copy-in {{ nuage.images_path }}/{{ vm_name }}/hostname /etc/"

  - name: Remove temporary copy of hostname file
    file: path={{ nuage.images_path }}/{{ vm_name }}/hostname state=absent

  - name: Set the owner and group for the hostname file on the VSD image
    command: "{{guestfish_cmd}} chown 0 0 /etc/hostname"

  - name: Create the directory /root/.ssh for authorized_keys
    command: "{{guestfish_cmd}} mkdir-mode /root/.ssh 0700"

  - name: Set the owner and group for the /root/.ssh directory on the VSD image
    command: "{{guestfish_cmd}} chown 0 0 /root/.ssh"

  - name: Get the public key for the current user
    local_action: command cat "{{ nuage.user_ssh_pub_key }}"
    register: current_user_ssh_key

  - name: Create a temporary copy of the authorized_keys file
    template: src=authorized_keys.j2 backup=no dest={{ nuage.images_path }}/{{ vm_name }}/authorized_keys

  - name: Copy authorized_keys file to the VSD image
    command: "{{guestfish_cmd}} copy-in {{ nuage.images_path }}/{{ vm_name }}/authorized_keys /root/.ssh/"

  - name: Remove temporary copy of authorized_keys file
    file: path={{ nuage.images_path }}/{{ vm_name }}/authorized_keys state=absent

  - name: Set the owner and group for the authorized_keys file on the VSD image
    command: "{{guestfish_cmd}} chown 0 0 /root/.ssh/authorized_keys"

  - name: Set the mode for the authorized_keys file on the VSD image
    command: "{{guestfish_cmd}} chmod 0640 /root/.ssh/authorized_keys"

  - name: "Define new VSD VM"
    virt: name="{{ vm_name }}"
          command=define
          xml="{{ lookup('template', 'vsd.xml.j2') }}"
          uri=qemu:///system

  - name: "Run VSD VM"
    virt: name="{{ vm_name }}"
          state=running
          autostart=True
          uri=qemu:///system
    when: ansible_version.full | version_compare('2.3', '>=')

  - block:
    - name: "Configure VM to autostart"
      command: virsh autostart {{ vm_name }}

    - name: "Run VSD VM"
      virt: name="{{ vm_name }}"
            state=running
            uri=qemu:///system
    when: ansible_version.full | version_compare('2.3', '<')

## JvB condition for the whole block 
  when: "not vsd_running"
  delegate_to: "{{ vsd.host }}"
  remote_user: "root"  