---
- name: Set local variable with vmname
  set_fact:
    vm_name: "{{ vmname }}"

- include_role:
    name: check-node-running

- name: Display if skipping predeploy
  debug:
    msg:
      - "****************************************************"
      - "Skipping VSR predeploy because it is already present"
      - "****************************************************"
  when: node_running

- name: Run when VSR not present
  block:

  - name: Pull facts on target_server {{ target_server }}
    action: setup
    remote_user: '{{ target_server_username }}'
    delegate_to: '{{ target_server }}'

  - name: Set vsr facts for memory, cpu, image file path and license path
    set_fact:
      vsr_memory: '{{ vmmemory|default(vsr_target_server_memory_gb_min) }}'
      vsr_vcpu:   '{{ vmvcpu|default(vsr_target_server_vcpus_min) }}'
      vsr_target_qcow2_file_path: '{{ images_path }}/{{ vmname }}/{{ inventory_hostname }}.qcow2'
      vsr_target_license_file: '{{ images_path }}/{{ vmname }}/license.txt'

  - import_tasks: kvm_check_hypervisor.yml

  - import_tasks: kvm_check_resources.yml

  - block:

    - name: List the Virtual Machines
      virt: command=list_vms
      register: virt_vms

    - name: Verify that the VM is not already running
      assert:
        that: "vmname not in virt_vms.list_vms"
        msg: "{{ vmname }} is already running on {{ target_server }}"

    - name: Include OS-specific variables.
      include_vars: "{{ ansible_os_family }}.yml"

    - name: Create VSR directory
      file:
        path:  '{{ images_path }}/{{ vmname }}'
        state: directory
        owner: '{{ libvirt.user }}'
        group: '{{ libvirt.group }}'

    delegate_to: "{{ target_server }}"
    remote_user: "{{ target_server_username }}"
    become: "{{ 'no' if target_server_username == 'root' else 'yes' }}"

  - import_tasks: kvm_upload_license_file.yml
    when: license_file is defined

  - name: Deploy KVM image
    import_tasks: kvm_deploy_image_file.yml
    vars:
      dest_filename: "{{ inventory_hostname }}.qcow2"
    when: license_file is defined

  - block:

    - name: Get license file content
      command: cat {{ vsr_target_license_file }}
      register: rc_vsr_license_content

    - name: Delete license file
      file:
        path: '{{ vsr_target_license_file }}'
        state: absent

    when: license_file is defined
    delegate_to: "{{ target_server }}"
    remote_user: "{{ target_server_username }}"
    become: "{{ 'no' if target_server_username == 'root' else 'yes' }}"

  - name: Run only if license file is specified
    block:

    - name: Set VM uuid generated
      set_fact:
        vsr_vm_uuid: '{{ rc_vsr_license_content.stdout.split(" ")[0] }}'

    - debug: var=vsr_vm_uuid verbosity=1

    when: license_file is defined

  - import_tasks: kvm_define_vsr_vm.yml

  when: not node_running
