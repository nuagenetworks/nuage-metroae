- block: 

  - name: Define data only VSTATs for cluster
    set_fact:
      data_group_params: " -d {{ groups['data_vstats'][0] }},{{ groups['data_vstats'][1] }},{{ groups['data_vstats'][2] }}"
    when: stats_out | default(false)

  - name: Execute VSTAT clustered script
    command: /opt/vsd/vsd-es-cluster-config.sh -e {{ groups['vstats'][0] }},{{ groups['vstats'][1] }},{{ groups['vstats'][2] }}{{ data_group_params | default('') }}
    register: upgrade_status
    environment:
      SSHPASS: "{{ vstat_custom_root_password | default( vstat_default_password ) }}"
    run_once: true
    retries: 5
    until: upgrade_status.rc == 0
    when: is_backup_vstats is not defined or not is_backup_vstats

  - name: Execute VSTAT clustered script on primary vstats
    command: /opt/vsd/vsd-es-cluster-config.sh -e {{ groups['primary_vstats'][0] }},{{ groups['primary_vstats'][1] }},{{ groups['primary_vstats'][2] }}
    register: upgrade_status
    environment:
      SSHPASS: "{{ vstat_custom_root_password | default( vstat_default_password ) }}"
    run_once: true
    retries: 5
    until: upgrade_status.rc == 0
    when:
      - is_backup_vstats is defined
      - not is_backup_vstats
      - primary_vstats is defined and primary_vstats

  - name: Execute VSTAT clustered script on backup vstats
    command: /opt/vsd/vsd-es-cluster-config.sh -e {{ groups['backup_vstats'][0] }},{{ groups['backup_vstats'][1] }},{{ groups['backup_vstats'][2] }}
    register: upgrade_status
    environment:
      SSHPASS: "{{ vstat_custom_root_password | default( vstat_default_password ) }}"
    run_once: true
    retries: 5
    until: upgrade_status.rc == 0
    when:
      - is_backup_vstats is defined
      - is_backup_vstats

  delegate_to: "{{ vsd_hostname_list[0] }}"
  remote_user: "{{ hostvars[hostvars[inventory_hostname].vsd_hostname_list[0]].vsd_custom_username | default(vsd_custom_username | default(vsd_default_username)) }}"
  become: "{{ 'no' if hostvars[vsd_hostname_list[0]].vsd_custom_username | default(vsd_custom_username | default(vsd_default_username)) == 'root' else 'yes' }}"
  vars:
    ansible_become_pass: "{{ hostvars[vsd_hostname_list[0]].vsd_custom_password | default(vsd_custom_password | default(vsd_default_password)) }}"
