- name: Get vsd node(s) information
  import_role:
    name: common
    tasks_from: vsd-node-info.yml
  vars:
    vsd_hostname: "{{ vsd_fqdn }}"
  run_once: true

- block:

  - name: Disable shard allocation
    uri:
      url: "{{ disable_shard_url }}"
      method: PUT
      headers:
        Content-Type: "application/json"
      body: "{{ lookup('file', 'disable_shard.json') }}"
      body_format: json
      timeout: 300

  - name: Perform sync flush
    command: "curl -XPOST 'localhost:9200/_flush/synced?pretty'"

  run_once: true
  when: vstat_sa_or_ha | match('ha')

- name: Disable elasticsearch serivce
  service:
    name: elasticsearch
    state: stopped

- name: Copy upgrade bundle to vstat node(s)
  copy: src={{ vstat_upgrade_scripts_path }}/{{ vstat_upgrade_scripts_file }}
          dest=/root/
          mode=0700

- name: Execute upgrade script
  shell: "/root/{{ vstat_upgrade_scripts_file }}"

- block:
  - name: Execute VSTAT standalone script
    import_tasks: execute_sa_script.yml
    run_once: true

  rescue:
    - name: Wait for shard count go down to zero and status to turn green
      import_tasks: get_health_status.yml
      run_once: true

    - name: Check ES Status
      fail: msg="Elasticsearch upgrade failed, status is not green"
      when: es_status.json.status != 'green'

    - name: Check ES Unassigned Shards
      fail: msg="Elasticsearch upgrade failed, unassigned_shards != 0"
      when: es_status.json.status != 'green'

    - name: Execute VSTAT standalone script after status turns green
      import_tasks: execute_sa_script.yml
      run_once: true

  when: vstat_sa_or_ha | match('sa')

- block:
  - name: Execute VSTAT clustered script
    import_tasks: execute_ha_script.yml
    delegate_to: "{{ vsd_hostname_list[0] }}"
    run_once: true

  rescue:
    - name: Wait for shard count go down to zero and status to turn green
      import_tasks: get_health_status.yml
      run_once: true

    - name: Check ES status after cluster restart
      fail: msg="Elasticsearch upgrade failed"
      when: es_status.json.status == 'red'

    - name: Execute VSTAT clustered script after status turns green
      import_tasks: execute_ha_script.yml
      when:
        - es_status.json.status == 'green'
        - es_status.json.unassigned_shards == 0
      run_once: true

  when: vstat_sa_or_ha | match('ha')

- name: Restart Elasticsearch service
  service:
    name: elasticsearch
    state: restarted
