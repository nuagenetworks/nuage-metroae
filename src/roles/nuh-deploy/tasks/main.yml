---
- name: Clean known_hosts of NUH's (ignoring errors)
  known_hosts:
    name: "{{ hostname }}"
    state: absent
  delegate_to: localhost
  no_log: True
  ignore_errors: True

- name: Wait for NUH ssh to be ready
  include_role:
    name: common
    tasks_from: wait-for-ssh
  vars:
    ssh_host: "{{ hostname }}"
    host_username: "root"

- import_tasks: openstack.yml
  when: target_server_type is match("openstack")

- name: Check if ha proxy is running (ignoring errors)
  command: systemctl status haproxy
  ignore_errors: true
  register: haproxy_output
  remote_user: "{{ nuh_default_username }}"

- name: Define skip nuh installation
  set_fact:
    skip_nuh_deploy: "{{ haproxy_output.stdout.find('active (running)') != -1 }}"

- name: Display if skipping NUH deploy
  debug:
    msg:
      - "*************************************************"
      - "Skipping NUH deploy because it is already running"
      - "*************************************************"
  when: skip_nuh_deploy

- block:

  - block:

    - name: Copy license file
      copy:
        src: "{{ nuh_license_file }}"
        dest: "/opt/proxy/nuh.license"

    - name: Verify License is valid
      shell: java -jar /opt/proxy/bin/lm/LicenseManager.jar features

    when: nuh_license_file is defined

  - name: Run the setup script for SA
    command: ./setup.sh
    environment:
      HNAME: "{{ hostname }}"
      HA: "n"
    args:
      chdir: /opt/proxy/bin
    when: nuh_sa_or_ha is match('sa')

  - name: Run the setup script for HA primary
    command: ./setup.sh
    environment:
      HNAME: "{{ hostname }}"
      HA: "y"
      MASTER: "y"
      PEERADDR: "{{ groups['nuh_second_node'][0] }}"
      PEERPASSWORD: "{{ nuh_default_password }}"
    args:
      chdir: /opt/proxy/bin
    when:
      - nuh_sa_or_ha is match('ha')
      - inventory_hostname == groups['nuh_first_node'][0] 

  - name: Run the setup script for HA secondary
    command: ./setup.sh
    environment:
      HNAME: "{{ hostname }}"
      HA: "y"
      MASTER: "n"
      PEERADDR: "{{ groups['nuh_first_node'][0] }}"
      PEERPASSWORD: "{{ nuh_default_password }}"
    args:
      chdir: /opt/proxy/bin
    when:
      - nuh_sa_or_ha is match('ha')
      - inventory_hostname == groups['nuh_second_node'][0] 

  - name: Set the timezone
    command: timedatectl set-timezone {{ nuh_timezone }}

  - name: Create NUH users and generate certificates
    import_role:
      name: nuh-deploy
      tasks_from: nuh_create_users_certs.yml
    when:
      - internal_ip is defined
      - not skip_vsd_installed_check

  - name: Copy NUH certificates 
    import_role:
      name: nuh-deploy
      tasks_from: nuh_copy_certificates.yml
    when:
      - internal_ip is defined
      - not skip_vsd_installed_check

  - block:

    - name: Copy the Custom configuration file if provided by user
      copy:
        dest: "/opt/proxy/data/config.yml"
        src: "{{ custom_configuration_file_location }}"
        mode: 0640
        owner: "root"
        group: "root"
      when: custom_configuration_file_location is defined

    - block:

      - name: Add stats-out proxy entries to NUH configuration
        replace:
          path: /opt/proxy/data/config.yml
          regexp: "role: vsdconfig.*$"
          replace: "role: vsdconfig, enabled: true, firewallports: ['{{ stats_out_proxy_ui_port }}', '{{ stats_out_proxy_api_port }}', '{{ stats_out_proxy_jms_port }}', '{{ stats_out_proxy_xmpp_port }}', '{{ stats_out_proxy_cert_port }}'], settings: {uiport: '{{ stats_out_proxy_ui_port }}', apiport: '{{ stats_out_proxy_api_port }}', xmppport: '{{ stats_out_proxy_xmpp_port }}', jmsport: '{{ stats_out_proxy_jms_port }}', geo: false, certport: '{{ stats_out_proxy_cert_port }}'}}"

      - name: Add stats-out proxy entries to NUH configuration
        blockinfile:
          path: /opt/proxy/data/config.yml
          marker: ""
          block: |
            nsgstats:
              {% for stats_only_vsds in groups['stats_only_vsds'] | list %}
              - {{ hostvars[stats_only_vsds]['mgmt_ip'] }}
              {% endfor %}

      when: stats_out_proxy | default('NONE') == internal_ip | default("not_set")

    - name: Run the configuration script on NUH
      command: ansible-playbook configure.yml
      args:
        chdir: /opt/proxy/bin/ansible

    when:
      - custom_configuration_file_location is defined or stats_out_proxy | default('NONE') == internal_ip | default("not_set")
      - inventory_hostname == groups['nuh_first_node'][0] 

  when:
    - not skip_nuh_deploy
  remote_user: "{{ nuh_default_username }}"

- name: Setup health monitoring
  include_role:
    name: setup-health-monitoring
  vars:
    component_username: "{{ nuh_default_username }}"
  when: health_monitoring_agent | default("none") != "none"
