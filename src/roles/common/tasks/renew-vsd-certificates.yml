---
- block:

  - block:

    - name: Renew standalone VSD certificate
      command: /opt/vsd/bin/vsd-renew-certs.sh

    - name: Verify if VSD TLS mode is set to allow
      command: /opt/vsd/bin/ejmode status
      register: ejmode

    - name: Restart ejabberd
      command: monit restart ejabberd
      when: ejmode.stdout is search('allow')

    - name: wait for ejabberd to come up
      monit_waitfor_service:
        name: ejabberd
        timeout_seconds: 600
        test_interval_seconds: 30

    - name: Stop VSD core service
      shell: monit stop -g vsd-core

    - name: Pause for processes to exit
      pause:
        seconds: 20

    - name: Restart the VSD core service
      shell: monit start -g vsd-core

    - name: Wait VSD core to start
      monit_waitfor_service:
        name: vsd-core-status
        timeout_seconds: 600
        test_interval_seconds: 30

    - name: Get monit summary for all process on VSD
      vsd_monit:
        group: all
      register: vsd_process_list

    - name: Restart stats if enabled
      shell: monit restart -g vsd-stats
      when: "'stats-collector' in vsd_process_list['state'].keys()"

    when:
      - vsd_sa_or_ha is match ('sa')
      - not vsd_standby_cluster | default(False)

  - block:

    - name: Renew primary VSD cert
      command: /opt/vsd/bin/vsd-renew-certs.sh
      delegate_to: "{{ item }}"
      with_items: "{{ groups['vsd_ha_node1'][0] }}"

    - name: Renew other 2 VSD certs
      command: /opt/vsd/bin/vsd-renew-certs.sh -1 {{ hostvars[groups['primary_vsds'][0]]['hostname'] }}
      delegate_to: "{{ item }}"
      with_items:
        - "{{ groups['vsd_ha_node2'][0] }}"
        - "{{ groups['vsd_ha_node3'][0] }}"

    - name: Verify if VSD TLS mode is set to allow
      command: /opt/vsd/bin/ejmode status
      register: ejmode
      delegate_to: "{{ item }}"
      delegate_facts: True
      with_items: "{{ groups['primary_vsds'] }}"

    - name: Restart ejabberd
      command: monit restart ejabberd
      when: ejmode.results[0].stdout is search('allow')
      delegate_to: "{{ item }}"
      with_items: "{{ groups['primary_vsds'] }}"

    - name: wait for ejabberd to come up
      monit_waitfor_service:
        name: ejabberd
        timeout_seconds: 600
        test_interval_seconds: 30
      delegate_to: "{{ item }}"
      with_items: "{{ groups['primary_vsds'] }}"

    - name: Stop VSD core service
      shell: monit stop -g vsd-core
      delegate_to: "{{ item }}"
      with_items: "{{ groups['primary_vsds'] }}"

    - name: Pause for processes to exit
      pause:
        seconds: 20

    - name: Restart the VSD core service
      shell: monit start -g vsd-core
      delegate_to: "{{ item }}"
      with_items: "{{ groups['primary_vsds'] }}"

    - name: Get monit summary for all process on VSD
      vsd_monit:
        group: all
      register: vsd_process_list
      delegate_to: "{{ groups['vsd_ha_node1'][0] }}"

    - name: Restart stats if enabled
      shell: monit restart -g vsd-stats
      when: "'stats-collector' in vsd_process_list['state'].keys()"
      delegate_to: "{{ groups['vsd_ha_node1'][0] }}"

    when: vsd_sa_or_ha is match ('ha')

  - block:

    - name: Renew standby VSD certs
      command: /opt/vsd/bin/vsd-renew-certs.sh -1 {{ hostvars[groups['primary_vsds'][0]]['hostname'] }}
      delegate_to: "{{ item }}"
      with_items:
        - "{{ groups['vsd_standby_node1'][0] }}"
        - "{{ groups['vsd_standby_node2'][0] }}"
        - "{{ groups['vsd_standby_node3'][0] }}"

    - name: Verify if VSD TLS mode is set to allow
      command: /opt/vsd/bin/ejmode status
      register: ejmode
      delegate_to: "{{ item }}"
      delegate_facts: True
      with_items: "{{ groups['standby_vsds'] }}"

    - name: Restart ejabberd
      command: monit restart ejabberd
      when: ejmode.results[0].stdout is search('allow')
      delegate_to: "{{ item }}"
      with_items: "{{ groups['standby_vsds'] }}"

    - name: wait for ejabberd to come up
      monit_waitfor_service:
        name: ejabberd
        timeout_seconds: 600
        test_interval_seconds: 30
      delegate_to: "{{ item }}"
      with_items: "{{ groups['standby_vsds'] }}"

    when: vsd_standby_cluster | default(False)

  remote_user: "{{ vsd_default_username }}"
  become: "{{ 'no' if vsd_default_username == 'root' else 'yes' }}"
  vars:
    ansible_become_pass: "{{ vsd_default_password }}"
