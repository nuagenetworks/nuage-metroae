- name: Resolve "{{ groups['primary_vsds'][0] | default(vsd_hostname) }}" to ip addr
  shell: "getent hosts {{ groups['primary_vsds'][0] | default(vsd_hostname) }} | awk '{print $1}'"
  register: ip_addr
  delegate_to: localhost
  become: no

- block:
  - name: Get the VSD version
    shell: grep -ir "VSD_VERSION=" /etc/profile.d/vsd-banner.sh | awk -F "=" '{print $2}'
    register: vsd_version
    run_once: true

  - name: Get the VSD build
    shell: grep -ir "VSD_BUILD=" /etc/profile.d/vsd-banner.sh | awk -F "=" '{print $2}'
    register: vsd_build
    run_once: true
    changed_when: False

  - name: Get the vsd node info
    shell: VSD_VERSION={{ vsd_version.stdout }} VSD_BUILD={{ vsd_build.stdout }} /opt/vsd/sysmon/showStatus.py
    register: vsd_info

  become: "{{ 'no' if vsd_custom_username | default(vsd_default_username) == 'root' else 'yes' }}"
  remote_user: "{{ vsd_custom_username | default(vsd_default_username) }}"
  vars:
    ansible_become_pass: "{{ vsd_custom_password | default(vsd_default_password) }}"
  delegate_to: "{{ ip_addr.stdout.split('\n')[0] }}"

- name: Set vsd deployment mode
  set_fact:
    vsd_sa_or_ha: "sa"
  when: "'Standalone' in vsd_info.stdout"

- name: Set vsd deployment mode
  set_fact:
    vsd_sa_or_ha: "ha"
  when: "'Clustered' in vsd_info.stdout"
  run_once: True

- name: Extract vsd hostname when standalone
  set_fact:
    vsd_hostname_list: "{{ vsd_info.stdout | regex_findall('Host Name:\\s+(.*)') }}"
  when: vsd_sa_or_ha is match('sa')

- name: Extract vsd hostname when clustered
  set_fact:
    vsd_hostname_list: "{{ vsd_info.stdout | regex_findall('VSD Server Node:\\s+(.*)') }}"
  when: vsd_sa_or_ha is match('ha')
  run_once: True

