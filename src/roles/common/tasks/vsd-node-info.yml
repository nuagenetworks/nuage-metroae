- block:
  - name: Resolve standalone vsd to ip addr
    shell: "getent hosts {{ groups['vsd_sa_node'][0] | default(vsd_hostname) }} | awk '{print $1}'"
    register: ip_addr_sa
    delegate_to: localhost
    become: no

  - name: Set Ip addr fact
    set_fact:
      ip_addr: "{{ ip_addr_sa }}"

  - name: Get custom username for vsd
    set_fact:
      custom_username: "{{ hostvars[groups['vsd_sa_node'][0]].vsd_custom_username | default(vsd_custom_username) }}"
    when:
      - hostvars[groups['vsd_sa_node'][0]].vsd_custom_username is defined or vsd_custom_username is defined

  - name: Get custom password for vsd
    set_fact:
      custom_password: "{{ hostvars[groups['vsd_sa_node'][0]].vsd_custom_password | default(vsd_custom_password) }}"
    when:
      - hostvars[groups['vsd_sa_node'][0]].vsd_custom_password is defined or vsd_custom_password is defined

  when: groups['vsd_sa_node'] is defined

- block:
  - name: Resolve HA vsd node 1 to ip addr
    shell: "getent hosts {{ groups['vsd_ha_node1'][0] | default(vsd_hostname) }} | awk '{print $1}'"
    register: ip_addr_ha
    delegate_to: localhost
    become: no

  - name: Set Ip addr fact
    set_fact:
      ip_addr: "{{ ip_addr_ha }}"

  - name: Get custom username for vsd
    set_fact:
      custom_username: "{{ hostvars[groups['vsd_ha_node1'][0]].vsd_custom_username | default(vsd_custom_username) }}"
    when:
      - hostvars[groups['vsd_ha_node1'][0]].vsd_custom_username is defined or vsd_custom_username is defined

  - name: Get custom password for vsd
    set_fact:
      custom_password: "{{ hostvars[groups['vsd_ha_node1'][0]].vsd_custom_password | default(vsd_custom_password) }}"
    when:
      - hostvars[groups['vsd_ha_node1'][0]].vsd_custom_password is defined or vsd_custom_password is defined
  
  when: groups['vsd_ha_node1'][0] is defined

- name: Get VSD information
  block:

  - include_role:
      name: common
      tasks_from: get-vsd-version

  - include_role:
      name: common
      tasks_from: get-vsd-build

  - name: Get Python executable path
    shell: "which python" # noqa 305
    register: python_exec
    become: no

  - name: Setup custom pass to pass to VSD hostname
    set_fact:
      sshpass_command: "sshpass -p{{ custom_password }} sudo VSD_VERSION=$VSD_VERSION VSD_BUILD=$VSD_BUILD"
    no_log: "{{ lookup('env', 'METROAE_NO_LOG') or 'true' }}"
    when: custom_password | default(vsd_default_password) != vsd_default_password

  - name: Get the vsd node info
    shell: "{{ sshpass_command | default('') }} {{ python_exec.stdout }} /opt/vsd/sysmon/showStatus.py" # noqa 305
    environment:
      VSD_VERSION: "{{ vsd_version.stdout }}"
      VSD_BUILD: "{{ vsd_build.stdout }}"
    register: vsd_info
    no_log: "{{ lookup('env', 'METROAE_NO_LOG') or 'true' }}"

  remote_user: "{{ custom_username | default(vsd_default_username) }}"
  become: "{{ 'no' if custom_username | default(vsd_default_username) == 'root' else 'yes' }}"
  vars:
    ansible_become_pass: "{{ custom_password | default(vsd_default_password) }}"
  delegate_to: "{{ ip_addr.stdout.split('\n')[0] }}"

- name: Set vsd deployment mode
  set_fact:
    vsd_sa_or_ha: "sa"
  when: "'Standalone' in vsd_info.stdout"

- name: Set vsd deployment mode
  set_fact:
    vsd_sa_or_ha: "ha"
  when: "'Clustered' in vsd_info.stdout"
  run_once: True

- name: Extract vsd hostname when standalone
  set_fact:
    vsd_hostname_list: "{{ vsd_info.stdout | regex_findall('Host Name:\\s+(.*)') }}"
  when: vsd_sa_or_ha is match('sa')

- name: Extract vsd hostname when clustered
  set_fact:
    vsd_hostname_list: "{{ vsd_info.stdout | regex_findall('VSD Server Node:\\s+(.*)') }}"
  when: vsd_sa_or_ha is match('ha')
  run_once: True
