- block:

  - name: Query Target Server facts
    action: setup

  - name: Include OS-specific variables.
    include_vars: "{{ ansible_os_family }}.yml"

  - name: Check target for supported OS
    assert:
      that: ansible_os_family in supported_target_server_os_family_list
      msg: "Unsupported OS family ({{ ansible_os_family }})"

  - name: Check target memory
    assert:
      that: ansible_memtotal_mb >= target_server_memory_mb_min
      msg: "Not enough memory ({{ ansible_memtotal_mb }})"

  - name: Check target cores
    assert:
      that: ansible_processor_vcpus >= target_server_vcpus_min
      msg: "Not enough cores ({{ ansible_processor_vcpus }})"

  - name: Check mgmt target bridge
    assert:
      that: '"mgmt" not in required_bridges or mgmt_bridge in ansible_interfaces'
      msg: "Required mgmt network bridge not found"

  - name: Check data target bridge
    assert:
      that: '"data" not in required_bridges or data_bridge in ansible_interfaces'
      msg: "Required data network bridge not found"

  - name: Check access target bridge
    assert:
      that: '"access" not in required_bridges or access_bridge in ansible_interfaces'
      msg: "Required access network bridge not found"

  - block:

    - name: Check if required OS packages are installed (ignoring errors)
      command:
        cmd: rpm -q qemu-kvm libvirt bridge-utils libguestfs-tools libvirt-python
        warn: no
      register: rpm_check
      ignore_errors: True

    - name: Print rpm_check when verbosity >= 1
      debug: var=rpm_check verbosity=1

    - name: If RedHat, install packages for RedHat OS family distros
      yum:
        name:
         - qemu-kvm
         - libvirt
         - bridge-utils
         - libguestfs-tools
         - libvirt-python
        state: present
      when: rpm_check.rc == 1

    when: ansible_os_family == "RedHat"

  - name: If Debian, install packages for Debian OS family distros
    apt:
      name:
        - qemu-kvm
        - libvirt-bin
        - bridge-utils
        - python-libvirt
      state: present
    when: ansible_os_family == "Debian"

  - name: Make sure libvirtd has started
    service:
      name: libvirtd
      enabled: yes
      state: started

  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"
  become: "{{ 'no' if target_server_username == 'root' else 'yes' }}"
