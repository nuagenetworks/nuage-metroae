---
- meta: reset_connection

- name: Wait for VSC ssh to be ready
  include_role:
    name: common
    tasks_from: wait-for-ssh-port
  vars:
    ssh_host: "{{ vsc_creds.host }}"
    ssh_password: "{{ vsc_creds.password }}"
    ssh_user: "{{ vsc_creds.username }}"
    check_login: True

- block:
  - block:
    - name: Copy external certificates
      command: >-
        sshpass -p'{{ vsc_default_password }}' scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null
        {{ item }} {{ vsc_default_username }}@{{ mgmt_ip }}:/{{ item | basename }}
      no_log: "{{ lookup('env', 'METROAE_NO_LOG') or 'true' }}"
      with_items:
        - "{{ private_key_path }}"
        - "{{ certificate_path }}"
        - "{{ ca_certificate_path }}"

      delegate_to: localhost

    - name: set tls profiles vars
      set_fact:
        own_key: "{{ private_key_path | basename }}"
        own_certificate: "{{ certificate_path | basename }}"
        own_ca_certificate: "{{ ca_certificate_path | basename }}"

    when:
      - private_key_path is defined
      - certificate_path is defined
      - ca_certificate_path is defined

  - block:
    - name: Create and transfer certs
      include_role:
        name: common
        tasks_from: vsd-generate-transfer-certificates
      vars:
        certificate_password: "{{ vsc_default_password }}"
        certificate_username: "{{ xmpp.username }}"
        commonName: "{{ xmpp.username }}"
        certificate_type: server
        scp_user: "{{ vsc_default_username }}"
        scp_location: /
        additional_parameters:  -d {{ inventory_hostname }}

    - name: set autogenerated tls profiles vars
      set_fact:
        own_key: "{{ xmpp.username }}-Key.pem"
        own_certificate: "{{ xmpp.username }}.pem"
        own_ca_certificate: "{{ xmpp.username }}-CA.pem"

    when:
      - private_key_path is undefined
      - certificate_path is undefined
      - ca_certificate_path is undefined

  - meta: reset_connection

  - name: Configure the security profile on the VSC
    sros_config:
      lines:
          - configure system security tls-profile vsc-tls-profile own-key cf1:\{{ own_key }}
          - configure system security tls-profile vsc-tls-profile own-certificate cf1:\{{ own_certificate }}
          - configure system security tls-profile vsc-tls-profile ca-certificate cf1:\{{ own_ca_certificate }}
          - configure system security tls-profile vsc-tls-profile no shutdown
          - admin save
      provider: "{{ vsc_creds }}"
    delegate_to: localhost
  when: xmpp_tls or openflow_tls

- block:

  - meta: reset_connection

  - name: Configure XMPP to use the security profile
    sros_config:
      lines:
          - configure vswitch-controller xmpp tls-profile vsc-tls-profile
          - configure system time ntp ntp-server
          - admin save
      provider: "{{ vsc_creds }}"
    delegate_to: localhost

  - block:

    - meta: reset_connection

    - name: Configure XMPP server to the custom ejabberd id and password
      sros_config:
        lines:
          - configure vswitch-controller xmpp-server {{ ejabberd_id }}@{{ xmpp_domain }}
        provider: "{{ vsc_creds }}"
      delegate_to: localhost

    - name: Get vsd node(s) information
      import_role:
        name: common
        tasks_from: vsd-node-info.yml
      vars:
        vsd_hostname: "{{ vsd_fqdn }}"
      run_once: true

    when:
      - private_key_path is defined
      - certificate_path is defined
      - ca_certificate_path is defined
      - ejabberd_id is defined

  - meta: reset_connection

  - name: check xmpp connectivity between VSC and VSD after enabling TLS
    sros_command:
      commands:
        - show vswitch-controller xmpp-server | match Functional
      provider: "{{ vsc_creds }}"
    register: xmpp_status
    until: xmpp_status.stdout[0].find('Functional') != -1
    retries: 30
    delay: 10
    delegate_to: localhost

  - name: Print output of 'show vswitch-controller xmpp-server' when verbosity >= 1
    debug: var=xmpp_status verbosity=1

  when: xmpp_tls

- meta: reset_connection

- name: Configure OpenFlow to use the security profile
  sros_config:
    lines:
        - configure vswitch-controller open-flow tls-profile vsc-tls-profile
        - configure system time ntp ntp-server
        - admin save
    provider: "{{ vsc_creds }}"
  delegate_to: localhost
  when: openflow_tls
