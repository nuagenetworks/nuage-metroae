- block:

  - name: Check SSH Connectivity to target server (ignoring errors)
    include_role:
      name: common
      tasks_from: wait-for-ssh
    vars:
      ssh_host: "{{ target_server }}"
      host_username: "{{ target_server_username }}"
      retries: 5
      delay: 5
    ignore_errors: True

  - name: Check output of SSH test
    assert:
      that: "not {{ wait_for_ssh_output.failed }}"
      msg: "Failed to connect to target_server {{ target_server }}. Is passwordless SSH set up?"

  when: target_server_type | default('NONE') is match("kvm")

- block:

  - block:

    - name: Check that image files are not missing
      set_fact:
        is_file_missing: "{{ image_path | default ('MISSING') == 'MISSING' or image_file_name | default ('MISSING') == 'MISSING' }}"

    - name: Delete the md5 files
      file:
        path: "{{ inventory_dir }}/deployment.md5.yml"
        state: absent
      when: is_file_missing
      delegate_to: localhost

    - name: Check that image files were found
      assert:
        that: not is_file_missing
        msg: "Missing image files for {{ hostname | default(vmname) }} under the unzipped file directory, please unzip them."

    when:
    - component_type | default("NONE") != 'vrs'
    - target_server_type is match("kvm") or target_server_type is match("vcenter")
    - not skip_copy_images | default(False)

  - block:

    - name: Check that image files are not missing
      set_fact:
        is_vrs_package_missing: "{{ vrs_package_path | default ('MISSING') == 'MISSING' }}"
        is_dkms_package_missing: "{{ dkms_install and dkms_package_path  | default ('MISSING') == 'MISSING'}}"

    - name: Delete the md5 files
      file:
        path: "{{ inventory_dir }}/deployment.md5.yml"
        state: absent
      when: is_vrs_package_missing or is_dkms_package_missing
      delegate_to: localhost

    - name: Check that VRS package files were found
      assert:
        that: not is_vrs_package_missing
        msg: "Missing VRS package files under the unzipped file directory, please unzip them."

    - name: Check that DKMS files were found
      assert:
        that: not is_dkms_package_missing
        msg: "Missing VRS DKMS files under the unzipped file directory, please unzip it."

    when: component_type | default("NONE") == 'vrs'

  when: not vsd_inplace_upgrade | default(false)

- block:
  - name: Check for portal files missing
    set_fact:
      is_portal_path_missing: "{{ portal_path | default('MISSING') == 'MISSING' }}"
      is_portal_file_missing: "{{ portal_file_name | default('MISSING') == 'MISSING' }}"

  - name: Delete the md5 files
    file:
      path: "{{ inventory_dir }}/deployment.md5.yml"
      state: absent
    when: is_portal_file_missing or is_portal_path_missing
    delegate_to: localhost

  - name: Check the image path for portal container
    assert:
      that: not is_portal_file_missing and not is_portal_path_missing
      msg: "Missing SDWAN portal container tar or CentOS image for portal under the unzipped directory, Please Copy it"
  when: component_type | default("NONE") == 'portal'

- block:

  - name: Check available disk space on hypervisor
    include_role:
      name: common
      tasks_from: check-hypervisor-disk-space
    vars:
      required_available_space: "{{ required_available_disk_space | default(0) }}"
      path: "{{ disk_space_path | default('NONE') }}"

  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"
  become: "{{ 'no' if target_server_username == 'root' else 'yes' }}"
  when: target_server_type | default('NONE') is match("kvm")

- block:

  - name: Get info on datastore
    delegate_to: localhost
    vmware_datastore_info:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      validate_certs: no
      cluster: "{{ vcenter.cluster }}"
      datacenter: "{{ vcenter.datacenter }}"
    register: datastore_facts

  - name: Select first datastore by default
    set_fact:
      vmware_datastore: "{{ datastore_facts.datastores | first }}"

  - name: Select correct datastore
    set_fact:
      vmware_datastore: "{{ (datastore_facts.datastores | selectattr('name','equalto',vcenter.datastore) | first) }}"
    when: vcenter.datastore is defined

  - name: Set fact for datastore free space
    set_fact:
      datastore_free_space_kb: "{{ vmware_datastore.freeSpace | float / 1024 }}"

  - name: Set fact for required available disk space
    set_fact:
      required_available_space_kb: "{{ required_available_disk_space | default(0) | float * (1024 * 1024) }}"

  - name: Assert datastore has enough space for predeploy
    assert:
      that: (datastore_free_space_kb | float ) > (required_available_space_kb | float)
      msg: "Insufficient disk space {{ datastore_free_space_kb | float / (1024 * 1024) }} GB for predeploy"

  when: target_server_type | default('NONE') is match ("vcenter")

- block:

  - name: Check mgmt target bridge
    assert:
      that: '"mgmt" not in required_bridges or mgmt_bridge != "NONE"'
      msg: "Required mgmt network bridge not configured"

  - name: Check data target bridge
    assert:
      that: '"data" not in required_bridges or data_bridge != "NONE"'
      msg: "Required data network bridge not configured"

  - name: Check access target bridge
    assert:
      that: '"access" not in required_bridges or access_bridge != "NONE"'
      msg: "Required access network bridge not configured"

  when: target_server_type | default('NONE') is match ("kvm") or target_server_type | default('NONE') is match ("vcenter")

- name: Fail if vrs_package_path is not defined
  assert:
    that: vrs_package_path != "MISSING"
    msg: "vrs_package_path not defined. Please define it and try again."
  when: vrss is defined and vrss|length > 0

- name: Get the public key for the current user
  command: cat "{{ user_ssh_pub_key }}"
  delegate_to: localhost
  register: current_user_ssh_key
  changed_when: False
  ignore_errors: True

- name: Check if ssh key file was found
  fail:
    msg: "We couldn't find the user's SSH key file {{ user_ssh_pub_key }}. Is user_ssh_pub_key defined correctly in common.yml?"
  when: target_server_type | default('NONE') is not match ("openstack") and current_user_ssh_key.rc != 0

- name: Check if vsd_license_file is present
  include_role:
    name: common
    tasks_from: check-local-file-present
  vars:
    file_path: "{{ vsd_license_file }}"
    success_message: "Found VSD license file"
    fail_message: "Could not find VSD license file"
    continue_on_error: "{{ vsd_continue_on_license_failure }}"
  when: vsd_license_file is defined

- name: Check if vsd_cluster_license_file is present
  include_role:
    name: common
    tasks_from: check-local-file-present
  vars:
    file_path: "{{ vsd_cluster_license_file }}"
    success_message: "Found VSD cluster license file"
    fail_message: "Could not find VSD cluster license file"
    continue_on_error: "{{ vsd_continue_on_license_failure }}"
  when: vsd_cluster_license_file is defined
