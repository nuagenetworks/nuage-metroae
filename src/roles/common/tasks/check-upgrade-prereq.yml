---
- name: Check that from version is set
  assert:
    that: "upgrade_from_version is defined"
    msg: "Upgrade from version is missing"

- name: Check that to version is set
  assert:
    that: "upgrade_to_version is defined"
    msg: "Upgrade to version is missing"
    
- name: Verify that upgrade_vmname is defined
  assert:
    that: "upgrade_vmname is defined"
    msg: "upgrade_vmname is required for upgrade"
  when: 
    - component_type | default("NONE") != 'vsc'
    - not (vsd_inplace_upgrade | default(false) and component_type | default("NONE") == 'vsd')

- block:

  - name: Get the version from OVA file
    shell: 'ovftool --hideEula "{{ image_path }}/{{ image_file_name }}" | grep ^Name: | cut -d- -f2'
    register: vsd_version_from_ova
    delegate_to: localhost

  - name: Check that to version in OVA agrees with what has been set
    assert:
      that: "vsd_version_from_ova.stdout is search(upgrade_to_version)"
      msg: >
        "VSD version mismatch between {{ image_path }}/{{ image_file_name }} "
        "({{ vsd_version_from_ova.stdout }}) and upgrade_to_version "
        "({{ upgrade_to_version }}). Quitting."

  when:
    - component_type | default("NONE") == 'vsd'
    - target_server_type is match('vcenter')
    - not vsd_inplace_upgrade

- block:

  - name: Check that VSTAT upgrade scripts path is defined
    assert:
      that: "vstat_upgrade_scripts_path | default('MISSING') != 'MISSING'"
      msg: "vstat_upgrade_scripts_path is missing"

  - name: Check that VSTAT upgrade scripts file is defined
    assert:
      that: "vstat_upgrade_scripts_file | default('MISSING') != 'MISSING'"
      msg: "vstat_upgrade_scripts_file is missing"

  when: component_type | default("NONE") == 'vstat'

- name: Check that TIM file was found for VSC
  assert:
    that: "vsc_tim_path | default('MISSING') != 'MISSING' and vsc_tim_file_name | default('MISSING') != 'MISSING'"
    msg: "Missing VSC TIM image file for {{ hostname }} under the unzipped file directory, please unzip it and issue reset_build"
  when: component_type | default("NONE") == 'vsc'

- name: Check that the number of vscs is even when force_vsc_standalone_upgrade is not set
  assert:
    that: "force_vsc_standalone_upgrade | default(false) or vscs|length == 1 or vscs|length % 2 == 0"
    msg: "Cannot upgrade on odd number of vscs in pairs. Please use force_vsc_standalone_upgrade to upgrade vscs as standalone"
  when: vscs is defined and vscs
