- name: Get vsd node(s) information
  import_role:
    name: common
    tasks_from: vsd-node-info.yml
  vars:
    vsd_hostname: "{{ vsd_fqdn }}"
  run_once: true

- block:

  - name: Check Ipv4 connectivity between VSD and Cert transfer server
    command: ping -c1 {{ inventory_hostname }}
    delegate_to: "{{ vsd_hostname_list[0] }}"
    when:
      - not enable_ipv6 | default(False)
      - scp_location is defined

  - name: Check Ipv6 connectivity between VSD and Cert transfer server
    command: ping6 -c1 {{ inventory_hostname }}
    delegate_to: "{{ vsd_hostname_list[0] }}"
    when:
      - enable_ipv6 | default(False)
      - scp_location is defined

  - block:

    - include_role:
        name: common
        tasks_from: get-vsd-version

    delegate_to: "{{ vsd_hostname_list[0] }}"

  - name: Check if the user is already present (ignoring errors)
    shell: '/opt/vsd/ejbca/bin/ejbca.sh ra listendentities -S 40 | grep "End Entity: {{ certificate_username }}"'
    register: userExistsOutput
    delegate_to: "{{ vsd_hostname_list[0] }}"
    ignore_errors: yes

  - name: Revoke certs from VSD
    command: "/opt/vsd/ejbca/deploy/certMgmt.sh -a revoke -u {{ certificate_username }} -c {{ commonName }}"
    delegate_to: "{{ vsd_hostname_list[0] }}"
    register: revoked
    until: "revoked.rc == 0 or (revoked.stdout is search('fail adding entity'))"
    retries: 10
    delay: 30
    when: "userExistsOutput.rc == 0"

  - name: Create and transfer certs from VSD
    # noqa 305
    shell: >-
      /bin/sshpass -p'{{ certificate_password }}' /opt/vsd/ejbca/deploy/certMgmt.sh
      -a generate -u {{ certificate_username }} -c {{ commonName }} -o csp
      -f {{ file_type | default('pem') }}
      -t {{ certificate_type }} {{ additional_parameters }}
    delegate_to: "{{ vsd_hostname_list[0] }}"
    register: created
    until: "created.rc == 0 or (created.stdout is search('fail adding entity'))"
    retries: 10
    delay: 30
    no_log: "{{ lookup('env', 'METROAE_NO_LOG') or 'true' }}"
    when: "'4.0.4' not in vsd_version and scp_user is not defined and scp_location is not defined"

  - name: Check vsc hostname existence in IPv6
    assert:
      that: "hostvars[inventory_hostname].hostname | ipv6"
      msg: "In IPv6, the vsc must define the hostname field"
    when: "'vscs' in group_names and hostvars[inventory_hostname].hostname is defined and hostvars[inventory_hostname].hostname | ipaddr"

  - name: Create and transfer certs from VSD
    # noqa 305
    shell: >-
      /bin/sshpass -p'{{ certificate_password }}' /opt/vsd/ejbca/deploy/certMgmt.sh
      -a generate -u {{ certificate_username }} -c {{ commonName }} -o csp
      -f {{ file_type | default('pem') }}
      -t {{ certificate_type }} -s {{ scp_user }}@{{ inventory_hostname }}:{{ scp_location }} {{ additional_parameters }}
    delegate_to: "{{ vsd_hostname_list[0] }}"
    register: created
    until: "created.rc == 0 or (created.stdout is search('fail adding entity'))"
    retries: 20
    delay: 30
    no_log: "{{ lookup('env', 'METROAE_NO_LOG') or 'true' }}"
    when: "'4.0.4' not in vsd_version and scp_user is defined and scp_location is defined and newname is not defined"

  - name: Create certs from VSD for NUHs multiple external interface
    # noqa 305
    shell: >-
      /bin/sshpass -p'{{ certificate_password }}' /opt/vsd/ejbca/deploy/certMgmt.sh
      -a generate -u {{ certificate_username }} -c {{ commonName }} -o csp
      -f {{ file_type | default('pem') }}
      -t {{ certificate_type }} {{ additional_parameters }}
    delegate_to: "{{ vsd_hostname_list[0] }}"
    register: created
    until: "created.rc == 0 or (created.stdout is search('fail adding entity'))"
    retries: 20
    delay: 30
    no_log: "{{ lookup('env', 'METROAE_NO_LOG') or 'true' }}"
    when: "'4.0.4' not in vsd_version and scp_user is defined and scp_location is defined and newname is defined"

  - block:

    - name: Copy the certs to NUH with a new name
      shell: >-
        cp /opt/vsd/ejbca/p12/pem/{{ certificate_username }}.pem  /opt/vsd/ejbca/p12/pem/{{ newname }}.pem

    - name: Copy the certs to NUH with a new name
      shell: >-
        cp /opt/vsd/ejbca/p12/pem/{{ certificate_username }}-CA.pem  /opt/vsd/ejbca/p12/pem/{{ newname }}-CA.pem

    - name: Copy the certs to NUH with a new name
      shell: >-
        cp /opt/vsd/ejbca/p12/pem/{{ certificate_username }}Cert.pem  /opt/vsd/ejbca/p12/pem/{{ newname }}Cert.pem

    - name: Copy the certs to NUH with a new name
      shell: >-
        cp /opt/vsd/ejbca/p12/pem/{{ certificate_username }}-Key.pem  /opt/vsd/ejbca/p12/pem/{{ newname }}-Key.pem

    - name: Copy the certs to NUH with a new name
      shell: >-
        /bin/sshpass -p'{{ certificate_password }}' scp -o StrictHostKeyChecking=no /opt/vsd/ejbca/p12/pem/{{ certificate_username }}.pem  {{ scp_user }}@{{ inventory_hostname }}:{{ scp_location }}/{{ newname }}.pem

    - name: Copy the certs to NUH with a new name
      shell: >-
        /bin/sshpass -p'{{ certificate_password }}' scp -o StrictHostKeyChecking=no /opt/vsd/ejbca/p12/pem/{{ certificate_username }}-CA.pem  {{ scp_user }}@{{ inventory_hostname }}:{{ scp_location }}/{{ newname }}-CA.pem

    - name: Copy the certs to NUH with a new name
      shell: >-
        /bin/sshpass -p'{{ certificate_password }}' scp -o StrictHostKeyChecking=no /opt/vsd/ejbca/p12/pem/{{ certificate_username }}Cert.pem  {{ scp_user }}@{{ inventory_hostname }}:{{ scp_location }}/{{ newname }}Cert.pem

    - name: Copy the certs to NUH with a new name
      shell: >-
        /bin/sshpass -p'{{ certificate_password }}' scp -o StrictHostKeyChecking=no /opt/vsd/ejbca/p12/pem/{{ certificate_username }}-Key.pem  {{ scp_user }}@{{ inventory_hostname }}:{{ scp_location }}/{{ newname }}-Key.pem

    - name: Copy the certs to NUH with a new name
      shell: >-
        rm -rf /opt/vsd/ejbca/p12/pem/{{ certificate_username }}.pem

    - name: Copy the certs to NUH with a new name
      shell: >-
        rm -rf /opt/vsd/ejbca/p12/pem/{{ certificate_username }}-CA.pem

    - name: Copy the certs to NUH with a new name
      shell: >-
        rm -rf /opt/vsd/ejbca/p12/pem/{{ certificate_username }}Cert.pem

    - name: Copy the certs to NUH with a new name
      shell: >-
        rm -rf /opt/vsd/ejbca/p12/pem/{{ certificate_username }}-Key.pem
       
    no_log: "{{ lookup('env', 'METROAE_NO_LOG') or 'true' }}"
    delegate_to: "{{ vsd_hostname_list[0] }}"
    when: "'4.0.4' not in vsd_version and scp_user is defined and scp_location is defined and newname is defined"

  - name: Create and transfer certs from 4.0.4 VSD
    # noqa 305
    shell: >-
      /bin/sshpass -p'{{ certificate_password }}' /opt/vsd/ejbca/deploy/certMgmt.sh
      -a generate -u {{ certificate_username }} -c {{ commonName }} -o csp
      -f {{ file_type | default('pem') }}
      -t {{ certificate_type }}  -n VSPCA {{ additional_parameters }}
    delegate_to: "{{ vsd_hostname_list[0] }}"
    register: created
    until: "created.rc == 0 or (created.stdout is search('fail adding entity'))"
    retries: 10
    delay: 30
    no_log: "{{ lookup('env', 'METROAE_NO_LOG') or 'true' }}"
    when: "'4.0.4' in vsd_version and scp_user is not defined and scp_location is not defined"

  - name: Create and transfer certs from 4.0.4 VSD
    # noqa 305
    shell: >-
      /bin/sshpass -p'{{ certificate_password }}' /opt/vsd/ejbca/deploy/certMgmt.sh -a generate
      -u {{ certificate_username }} -c {{ commonName }} -o csp
      -f {{ file_type | default('pem') }} -t {{ certificate_type }}
      -s {{ scp_user }}@{{ inventory_hostname }}:{{ scp_location }}   -n VSPCA {{ additional_parameters }}
    delegate_to: "{{ vsd_hostname_list[0] }}"
    register: created
    until: "created.rc == 0 or (created.stdout is search('fail adding entity'))"
    retries: 10
    delay: 30
    no_log: "{{ lookup('env', 'METROAE_NO_LOG') or 'true' }}"
    when: "'4.0.4' in vsd_version and scp_user is defined and scp_location is defined"

  remote_user: "{{ hostvars[hostvars[inventory_hostname].vsd_hostname_list[0]].vsd_custom_username | default(vsd_custom_username | default(vsd_default_username)) }}"
  become: "{{ 'no' if hostvars[hostvars[inventory_hostname].vsd_hostname_list[0]].vsd_custom_username | default(vsd_custom_username | default(vsd_default_username)) == 'root' else 'yes' }}"
  become_flags: '-i'
  vars:
    ansible_become_pass: "{{ hostvars[hostvars[inventory_hostname].vsd_hostname_list[0]].vsd_custom_password | default(vsd_custom_password | default(vsd_default_password)) }}"
