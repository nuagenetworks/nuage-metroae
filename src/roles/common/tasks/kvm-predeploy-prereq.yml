- name: Query Target Server facts
  action: setup
  remote_user: "{{ target_server_username }}"
  delegate_to: "{{ target_server }}"
  become: "{{ 'no' if target_server_username == 'root' else 'yes' }}"

- name: Include OS-specific variables.
  include_vars: "{{ ansible_os_family }}.yml"

- name: Check target for supported OS
  fail: msg="Unsupported OS family ({{ ansible_os_family }})"
  when: ansible_os_family not in supported_target_server_os_family_list

- name: Check target memory
  fail: msg="Not enough memory ({{ ansible_memtotal_mb }})"
  when: ansible_memtotal_mb < target_server_memory_mb_min

- name: Check target cores
  fail: msg="Not enough cores ({{ ansible_processor_vcpus }})"
  when: ansible_processor_vcpus < target_server_vcpus_min

- block:

  - block:

    - name: Check if required OS packages are installed (ignoring errors)
      command: rpm -q qemu-kvm libvirt bridge-utils libguestfs-tools libvirt-python
      register: rpm_check
      ignore_errors: True

    - name: If RedHat, install packages for RedHat OS family distros
      yum: name={{ item }} state=present
      with_items:
       - qemu-kvm
       - libvirt
       - bridge-utils
       - libguestfs-tools
       - libvirt-python
      when: rpm_check.rc != 0

    when: ansible_os_family | match("RedHat")

  - block:

    - name: Check if required OS packages are installed (ignoring errors)
      command: dpkg -l qemu-kvm libvirt bridge-utils libguestfs-tools libvirt-python
      register: dpkg_check
      ignore_errors: True

    - name: If Debian, install pacakges for Debian OS family distros
      apt: name={{ item }} state=present
      with_items:
       - qemu-kvm
       - libvirt-bin
       - bridge-utils
       - libguestfs-tools
       - python-libvirt
      when: dpkg_check.rc != 0

    when: ansible_os_family | match("Debian")

  - name: Make sure libvirtd has started
    service:
      name: libvirtd
      enabled: yes
      state: started

  - name: Get updated Target Server facts
    action: setup

  - name: Check target bridges
    fail: msg="Required network bridges not found"
    when: (mgmt_bridge not in ansible_interfaces) or
          (data_bridge not in ansible_interfaces)

  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"
  become: "{{ 'no' if target_server_username == 'root' else 'yes' }}"
