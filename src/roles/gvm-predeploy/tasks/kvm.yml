---
- name: Query {{ target_server }} facts
  action: setup
  remote_user: "{{ target_server_username }}"
  delegate_to: "{{ target_server }}"

- name: Check target for supported OS
  fail: msg="Unsupported OS family ({{ ansible_os_family }})"
  when: ansible_os_family not in gvm_target_server_os_family_list

- name: Include OS-specific variables.
  include_vars: "{{ ansible_os_family }}.yml"

- name: If RedHat, install packages for RedHat OS family distros
  yum: name={{ item }} state=present
  with_items:
   - qemu-kvm
   - libvirt
   - bridge-utils
   - libvirt-python
  when: ansible_os_family == "RedHat"
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: If Debian, install packages for Debian OS family distros
  apt: name={{ item }} state=present
  with_items:
   - qemu-kvm
   - libvirt-bin
   - bridge-utils
   - python-libvirt
  when: ansible_os_family == "Debian"
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: List the Virtual Machines running
  virt: command=list_vms
  register: virt_vms
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Verify that the VM is not already running
  assert:
    that: "inventory_hostname not in virt_vms.list_vms"
    msg: "{{ inventory_hostname }} is already running on {{ target_server }}"

- name: "Define new VM"
  virt: name="{{ inventory_hostname }}"
        command=define
        xml="{{ lookup('file', gvm_xml_file) }}"
        uri=qemu:///system
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: "Run VSD VM"
  virt: name="{{ inventory_hostname }}"
        state=running
        uri=qemu:///system
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"
