---
- name: Clean known_hosts of VSC's on "{{ target_server }}"
  known_hosts:
    name: "{{ mgmt_ip }}"
    state: absent
  delegate_to: localhost
  no_log: True
  ignore_errors: True

- name: Get output of 'show vswitch-controller xmpp-server detail'
  sros_command:
    commands:
      - show vswitch-controller xmpp-server detail
    provider: "{{ vsc_creds }}"
  delegate_to: localhost
  register: xmpp_detail
  until: xmpp_detail.stdout[0].find('Functional') != -1
  retries: 5
  delay: 30

- name: Print 'show vswitch-controller xmpp-server detail' when verbosity >= 1
  debug: var=xmpp_detail verbosity=1

- name: Create local variable with xmpp-server detail in json
  set_fact: xmpp_detail_json="{{ xmpp_detail.stdout[0]|xmpp_server_detail_to_json }}"

- name: Print xmpp-server detail in json when verbosity >= 1
  debug: var=xmpp_detail_json verbosity=1

- name: Create local variable for xmpp-server state
  set_fact: xmpp_server_state="{{ xmpp_detail_json['State'] }}"

- name: Print xmpp-server state when verbosity >= 1
  debug: var=xmpp_server_state verbosity=1

- name: Check for the expected xmpp-server state
  assert: {
    that: "{{ expected_xmpp_server_state == xmpp_server_state }}",
    msg: "Invalid xmpp-server state ({{ xmpp_server_state }}) detected. Expected {{ expected_xmpp_server_state }}. Check 'show vswitch-controller xmpp-server details'."
}
- name: define variable to match vsd strings in show vswitch vsd details
  set_fact:
    vsd1_s: "cna@{{ vsd_fqdn }}"

- name: Get output of 'show vswitch-controller vsd detail'
  sros_command:
    commands:
      - show vswitch-controller vsd detail
    provider: "{{ vsc_creds }}"
  delegate_to: localhost
  register: vsd_detail
  until: vsd_detail.stdout[0].find(vsd1_s) != -1
  retries: 5
  delay: 30

- name: Print 'show vswitch-controller vsd' when verbosity >= 1
  debug: var=vsd_detail verbosity=1

- name: Get VSD deployment mode
  include_role:
    name: common
    tasks_from: vsd-node-info.yml
  vars:
    vsd_hostname: "{{ vsd_fqdn }}"

- name: Print vsd deployment mode when verbosity >= 1
  debug: var="vsd_sa_or_ha"

- name: Verify VSD FQDN is found in vsd_detail
  assert:
    that: "'cna@{{ vsd_fqdn }}' in vsd_detail.stdout[0]"
    msg: "VSD Node1 could not be found in 'show vswitch-controller vsd detail'"
  when: vsd_sa_or_ha | match('sa')

- name: Verify VSD Node1 is found in vsd_detail
  assert:
    that: "'cna@{{ vsd_fqdn }}/{{ vsd_hostname_list[0].split('.')[0:1] | join('.') }}' in vsd_detail.stdout[0]"
    msg: "VSD Node1 could not be found in 'show vswitch-controller vsd detail'"
  when: vsd_sa_or_ha | match('ha')

- name: Verify VSD Node2 is found in vsd_detail
  assert:
    that: "'cna@{{ vsd_fqdn }}/{{ vsd_hostname_list[1].split('.')[0:1] | join('.') }}' in vsd_detail.stdout[0]"
    msg: "VSD Node2 could not be found in 'show vswitch-controller vsd detail'"
  when: vsd_sa_or_ha | match('ha')

- block:
  - name: Set mgmt_ip to second vsc node
    set_fact:
      mgmt_ip: "{{ hostvars[groups['vscs'][1]]['mgmt_ip'] }}"

  - name: Check if vsc ha node2 is configured with PBR config
    sros_command:
      commands: admin display-config
      provider: "{{ vsc_creds }}"
    delegate_to: localhost
    register: pbr_config_ha_node2

  - name: Print 'admin display-config' when verbosity >= 1
    debug: var=pbr_config_ha_node2.stdout[0] verbosity=1

  - name: Delete PBR backward compatibility config on second VSC node
    sros_config:
      lines:
        - configure router bgp evpn-pre-rfc no send-opaque-community
        - configure router bgp evpn-pre-rfc no non-compliant
        - admin save
      provider: "{{ vsc_creds }}"
    delegate_to: localhost
    when: pbr_config_ha_node2.stdout[0].find('evpn-pre-rfc') != -1

  - name: Set mgmt_ip to first vsc node
    set_fact:
      mgmt_ip: "{{ hostvars[groups['vscs'][0]]['mgmt_ip'] }}"

  - name: Check if vsc ha node1 is configured with PBR config
    sros_command:
      commands: admin display-config
      provider: "{{ vsc_creds }}"
    delegate_to: localhost
    register: pbr_config_ha_node1

  - name: Print 'admin display-config' when verbosity >= 1
    debug: var=pbr_config_ha_node1.stdout[0] verbosity=1

  - name: Delete PBR backward compatibility config on first VSC node
    sros_config:
      lines:
        - configure router bgp evpn-pre-rfc no send-opaque-community
        - configure router bgp evpn-pre-rfc no non-compliant
        - admin save
      provider: "{{ vsc_creds }}"
    delegate_to: localhost
    when: pbr_config_ha_node1.stdout[0].find('evpn-pre-rfc') != -1
  when:
    - groups['vscs'] is defined and groups['vscs'][1] is defined
    - inventory_hostname in groups['vsc_ha_node2']
