- name: Clean known_hosts of VSDs (ignoring errors)
  known_hosts:
    name: "{{ mgmt_ip }}"
    state: absent
  delegate_to: localhost
  no_log: True
  ignore_errors: True

- name: Wait for VM to be ready
  include_role:
    name: common
    tasks_from: wait-for-ssh
  vars:
    ssh_host: "{{ mgmt_ip }}"
    host_username: "{{ vsd_custom_username | default(vsd_default_username) }}"

- name: Stats only VM
  set_fact:
    stats_only_vm: "{{ (groups['stats_only_vsds'] is defined) and (inventory_hostname in groups['stats_only_vsds']) }}"

- import_tasks: report_start.yml

- block:

  - block:

    - name: Run VSD Disk Performance Test if it was not run during deploy
      include_role:
        name: common
        tasks_from: disk-performance-test.yml
      vars:
        disk_performance_file_total_size: "{{ vsd_disk_performance_test_total_file_size }}"
        disk_performance_minimum_threshold: "{{ vsd_disk_performance_test_minimum_threshold }}"
        disk_performance_max_time: "{{ vsd_disk_performance_test_max_time }}"
        ignore_disk_performance_test_errors: "{{ vsd_ignore_disk_performance_test_errors }}"
        disk_performance_username: "{{ vsd_custom_username | default(vsd_default_username) }}"
        disk_performance_password: "{{ vsd_custom_password | default(vsd_default_password) }}"

    remote_user: "{{ vsd_custom_username | default(vsd_default_username) }}"
    become: "{{ 'no' if vsd_custom_username | default(vsd_default_username) == 'root' else 'yes' }}"
    vars:
      ansible_become_pass: "{{ vsd_custom_password | default(vsd_default_password) }}"

  - name: Write Disk Performance Test separator to report file
    nuage_append: filename="{{ report_path }}" text="----------{{ inventory_hostname }} Disk Performance Test measurements---------------\n"
    delegate_to: localhost
    run_once: true

  - name: Write VSD Disk IOPS value to json file
    nuage_append: filename="{{ report_path }}" text="VSD Disk IOPS value of {{ disk_performance_val | to_nice_json }} did not meet the specified threshold of {{ vsd_disk_performance_test_minimum_threshold | to_nice_json }}\n"         # noqa 204
    delegate_to: localhost
    when: disk_performance_val|int < vsd_disk_performance_test_minimum_threshold

  - name: Write VSD Disk IOPS value to json file
    nuage_append: filename="{{ report_path }}" text="VSD Disk IOPS value of {{ disk_performance_val | to_nice_json }} met the specified threshold of {{ vsd_disk_performance_test_minimum_threshold | to_nice_json }}\n"        # noqa 204
    delegate_to: localhost
    when: disk_performance_val|int >= vsd_disk_performance_test_minimum_threshold

  when:
    - not vsd_ran_disk_performance_test | default(False)
    - vsd_run_disk_performance_test

- block:

  - name: Write Disk Performance Test separator to report file
    nuage_append: filename="{{ report_path }}" text="----------{{ inventory_hostname }} Disk Performance Test measurements---------------\n"
    delegate_to: localhost
    run_once: true

  - name: Write VSD Disk IOPS value to json file
    nuage_append: filename="{{ report_path }}" text="VSD Disk IOPS value of {{ disk_performance_val | to_nice_json }} did not meet the specified threshold of {{ vsd_disk_performance_test_minimum_threshold | to_nice_json }}\n"       # noqa 204
    delegate_to: localhost
    when: disk_performance_val|int < vsd_disk_performance_test_minimum_threshold

  - name: Write VSD Disk IOPS value to json file
    nuage_append: filename="{{ report_path }}" text="VSD Disk IOPS value of {{ disk_performance_val | to_nice_json }} met the specified threshold of {{ vsd_disk_performance_test_minimum_threshold | to_nice_json }}\n"         # noqa 204
    delegate_to: localhost
    when: disk_performance_val|int >= vsd_disk_performance_test_minimum_threshold

  when: vsd_ran_disk_performance_test | default(False)

- block:

  - include_role:
      name: common
      tasks_from: get-vsd-version

  remote_user: "{{ vsd_custom_username | default(vsd_default_username) }}"

- name: Get configured VSD Hostname
  command: hostname -f
  register: hostname_output
  changed_when: False
  remote_user: "{{ vsd_custom_username | default(vsd_default_username) }}"
  become: "{{ 'no' if vsd_custom_username | default(vsd_default_username) == 'root' else 'yes' }}"
  vars:
    ansible_become_pass: "{{ vsd_custom_password | default(vsd_default_password) }}"

- name: Verify configured VSD hostname
  assert:
    that: "hostname_output.stdout is search('{{ inventory_hostname }}')"
    msg: "Configured VSD hostname does not match expected VSD hostname"

- name: Write VSD hostname to report file
  nuage_append: filename="{{ report_path }}" text="VSD Hostname {{ hostname_output.stdout }}\n"
  delegate_to: localhost

- name: Write VSD version to json file
  nuage_append: filename="{{ report_path }}" text="VSD Version {{ vsd_version.stdout | to_nice_json }}\n"
  delegate_to: localhost

- name: Get current network config of all VSD nodes
  network_info:
    mac_addr: False
  register: net_conf
  remote_user: "{{ vsd_custom_username | default(vsd_default_username) }}"
  become: "{{ 'no' if vsd_custom_username | default(vsd_default_username) == 'root' else 'yes' }}"
  vars:
    ansible_become_pass: "{{ vsd_custom_password | default(vsd_default_password) }}"

- name: Write network config separator to report file
  nuage_append: filename="{{ report_path }}" text="-----VSD Network Config-----\n"
  delegate_to: localhost

- name: Write network config to json file
  nuage_append: filename="{{ report_path }}" text="{{ net_conf.info | to_nice_json }}\n"
  delegate_to: localhost

- import_tasks: monit_status.yml

- block:

  - name: Write RTT separator to RTT report file
    nuage_append: filename="{{ vsd_rtt_report_path }}" text="----------VSD RTT measurements---------------\n"
    delegate_to: localhost
    run_once: true

  - block:

    - name: Run RTT tests for Primary cluster
      import_role:
        name: vsd-run-rtt
      vars:
        first_node: "{{ groups['vsd_ha_node1'][0] }}"
        second_node: "{{ groups['vsd_ha_node2'][0] }}"
        third_node: "{{ groups['vsd_ha_node3'][0] }}"
        standby_cluster: false
      when: not vsd_ran_rtt_test | default(false)

    - name: Write Primary VSD RTT separator to file
      nuage_append: filename="{{ vsd_rtt_report_path }}" text=-----"RTT results for Primary VSD-----\n"
      delegate_to: localhost

    - name: Write Primary VSD RTT to file
      nuage_append: filename="{{ vsd_rtt_report_path }}" text="{{ vsd_rtt_test_results | to_nice_json }}\n"
      delegate_to: localhost

    when: inventory_hostname == groups['vsd_ha_node1'][0]

  - block:

    - name: Run RTT tests for Standby cluster
      import_role:
        name: vsd-run-rtt
      vars:
        first_node: "{{ groups['vsd_standby_node1'][0] }}"
        second_node: "{{ groups['vsd_standby_node2'][0] }}"
        third_node: "{{ groups['vsd_standby_node3'][0] }}"
        standby_cluster: true
      when: not vsd_ran_rtt_test | default(false)

    - name: Write Secondary VSD RTT separator to file
      nuage_append: filename="{{ vsd_rtt_report_path }}" text="-----RTT results for Secondary VSD-----\n"
      delegate_to: localhost

    - name: Write Secondary VSD RTT to file
      nuage_append: filename="{{ vsd_rtt_report_path }}" text="{{ vsd_rtt_test_results | to_nice_json }}\n"
      delegate_to: localhost

    when:
      - groups['vsd_standby_node1'] is defined
      - inventory_hostname == groups['vsd_standby_node1'][0]

  when:
    - vsd_run_cluster_rtt_test | default(False)
    - not nuage_upgrade | default(False)

  remote_user: "{{ vsd_custom_username | default(vsd_default_username) }}"
  become: "{{ 'no' if vsd_custom_username | default(vsd_default_username) == 'root' else 'yes' }}"
  vars:
    ansible_become_pass: "{{ vsd_custom_password | default(vsd_default_password) }}"

- block:

  - name: Execute list_p1db command on VSD(s)
    shell: "{{ p1db_cmd }}"  # noqa 305
    changed_when: True
    register: list_p1db_output
    remote_user: "{{ vsd_custom_username | default(vsd_default_username) }}"
    become: "{{ 'no' if vsd_custom_username | default(vsd_default_username) == 'root' else 'yes' }}"
    vars:
      ansible_become_pass: "{{ vsd_custom_password | default(vsd_default_password) }}"

  - name: Create local variable with p1db output to json
    set_fact: ejabberd_p1db_json="{{ list_p1db_output.stdout|ejabberd_p1db_to_json }}"

  - name: Write list_p1db command separator to report file
    nuage_append: filename="{{ report_path }}" text="-----Result from {{ p1db_cmd }}-----\n"
    delegate_to: localhost

  - name: Write p1bd JSON to file
    nuage_append: filename="{{ report_path }}" text="{{ inventory_hostname }} {{ ejabberd_p1db_json|to_nice_json }}\n"
    delegate_to: localhost

  - name: Execute list_cluster command on VSD(s)
    shell: "{{ ejabber_cluster_list_command }}"  # noqa 305
    changed_when: True
    register: list_cluster_output
    remote_user: "{{ vsd_custom_username | default(vsd_default_username) }}"
    become: "{{ 'no' if vsd_custom_username | default(vsd_default_username) == 'root' else 'yes' }}"
    vars:
      ansible_become_pass: "{{ vsd_custom_password | default(vsd_default_password) }}"

  - name: Create local variable with ejabberd cluster output to json
    set_fact: ejabberd_cluster_json="{{ list_cluster_output.stdout|ejabberd_cluster_to_json }}"

  - name: Write ejabberd cluster output separator to report file
    nuage_append: filename="{{ report_path }}" text="-----Result from executing {{ ejabber_cluster_list_command }}-----\n"
    delegate_to: localhost

  - name: Write cluster JSON to file
    nuage_append: filename="{{ report_path }}" text="{{ inventory_hostname }} {{ ejabberd_cluster_json|to_nice_json }}\n"
    delegate_to: localhost

  - name: Execute ejabberd_connected_users_command command on VSD(s)
    shell: "{{ ejabberd_connected_users_command }}"  # noqa 305
    register: user_list
    changed_when: True
    remote_user: "{{ vsd_custom_username | default(vsd_default_username) }}"
    become: "{{ 'no' if vsd_custom_username | default(vsd_default_username) == 'root' else 'yes' }}"
    vars:
      ansible_become_pass: "{{ vsd_custom_password | default(vsd_default_password) }}"

  - name: Create local variable with ejabberd connected users to json
    set_fact: ejabberd_users_json="{{ user_list.stdout|ejabberd_clients_to_json }}"

  - name: Write connected_users output separator to report file
    nuage_append: filename="{{ report_path }}" text="-----Results from executing {{ ejabberd_connected_users_command }}-----\n"
    delegate_to: localhost

  - name: Write users JSON to file
    nuage_append: filename="{{ report_path }}" text="{{ inventory_hostname }} {{ ejabberd_users_json|to_nice_json }}\n"
    delegate_to: localhost

  - name: Verify connected VSCs
    assert:
      that: "user_list.stdout|search('{{ hostvars[item].xmpp.username }}')"
      msg: "{{ hostvars[item].xmpp.username }} could not be found in '/opt/ejabberd/bin/ejabberdctl connected_users'"
    remote_user: "{{ vsd_custom_username | default(vsd_default_username) }}"
    become: "{{ 'no' if vsd_custom_username | default(vsd_default_username) == 'root' else 'yes' }}"
    vars:
      ansible_become_pass: "{{ vsd_custom_password | default(vsd_default_password) }}"
    with_items: "{{ groups['vscs'] }}"
    when:
      - groups['vscs'] is defined
      - groups['vscs']
      - not postdeploy_only | default('False')
      - not skip_vsc | default('False')

  when: not stats_only_vm


- name: Get VSD deployment mode
  include_role:
    name: common
    tasks_from: vsd-node-info.yml
  vars:
    vsd_hostname: "{{ vsd_fqdn }}"
  run_once: true

- block:
  - name: Verify cna user is found in connected_users of ejabberd in vsds
    assert:
      that: "user_list.stdout is search('cna@{{ vsd_fqdn }}')"
      msg: "cna@{{ vsd_fqdn }} could not be found in '/opt/ejabberd/bin/ejabberdctl connected_users'"

  - name: Verify push user is found in connected_users of ejabberd in vsds
    assert:
      that: "user_list.stdout is search('push@{{ vsd_fqdn }}')"
      msg: "push@{{ vsd_fqdn }} could not be found in '/opt/ejabberd/bin/ejabberdctl connected_users'"

  - name: Verify keyserver user is found in connected_users of ejabberd in vsds
    assert:
      that: "user_list.stdout is search('keyserver@{{ vsd_fqdn }}')"
      msg: "keyserver@{{ vsd_fqdn }} could not be found in '/opt/ejabberd/bin/ejabberdctl connected_users'"
  when: vsd_sa_or_ha is match('ha') and not statistics_only | default(false)

- name: Get monit summary for vsd processes
  vsd_monit:
    group: all
  register: vsd_proc
  remote_user: "{{ vsd_custom_username | default(vsd_default_username) }}"
  become: "{{ 'no' if vsd_custom_username | default(vsd_default_username) == 'root' else 'yes' }}"
  vars:
    ansible_become_pass: "{{ vsd_custom_password | default(vsd_default_password) }}"

- block:

  - name: Set the URL for the VSD
    set_fact:
      vsd_url_address: >-
        {% if enable_ipv6|default(False) %}[{{ mgmt_ip }}]{% else %}{{ mgmt_ip }}{% endif %}

  - name: Get the health status of VSD via HTTPS (ignoring errors)
    uri:
      url: https://{{ vsd_url_address }}:8443/nuage/health?proxyRequest=false
      method: GET
      user: "{{ vsd_auth.username }}"
      password: "{{ vsd_auth.password }}"
      status_code: [200,503]
      validate_certs: False
    register: health_status
    delegate_to: localhost
    retries: 15
    delay: 60
    until: health_status.status in [200,503] and health_status.json[0].status != 'BAD'
    ignore_errors: True

  - name: Check the HTTP response of the health status query
    assert:
      that: health_status.status in [200]
      fail_msg: "VSD API health status check failed: '{{ health_status.msg | default('Empty') }}'"

  - name: Verify the HTTP response VSD is healthy
    assert:
      that: "not {{ health_status.json[0].status == 'BAD' }}"
      fail_msg: "VSD health checks failed due to: {{ health_status.json[0].summary | default('Unknown') }}"

  - name: Set JMS gateway to empty string
    set_fact:
      jms_master_hostname: ""

  - name: Get JMS gateway
    include_role:
      name: common
      tasks_from: VSD-JMS-master-node.yml

  - block:

    - name: Verify that JMS gateway is reachable on Master Node
      wait_for:
        host: "{{ jms_master_hostname }}"
        port: 61619
      retries: 15
      delay: 60
      delegate_to: localhost

    when: jms_master_hostname is defined and jms_master_hostname

  when:
    - "'activemq-status' in vsd_proc.state"
    - inventory_hostname in groups['primary_vsds']

- block:

  - name: Verify VSD licenses valid
    include_role:
      name: common
      tasks_from: check-vsd-license-validity.yml

  - name: Write license validity check separator to report file
    nuage_append: filename="{{ report_path }}" text="-----Results of license validity check-----\n"
    delegate_to: localhost

  - name: Write license valid result
    nuage_append: filename="{{ report_path }}" text="{{ inventory_hostname }}  License  {{ license_valid | to_nice_json }}\n"
    delegate_to: localhost

  when: check_vsd_license | default(True)

- name: Get the JAVA_HOME
  shell: echo $JAVA_HOME
  changed_when: False
  register: java_home
  remote_user: "{{ vsd_custom_username | default(vsd_default_username) }}"

- name: Write java home path
  nuage_append: filename="{{ report_path }}" text="JAVA_HOME = {{ java_home.stdout }}\n"
  delegate_to: localhost


- block:

  - name: Verify keystore pass is set
    command: "keytool -keystore /opt/vsd/jboss/standalone/configuration/vsd.keystore -storepass {{ keyStorePwd }} -list"
    register: keystore_pass_check
    when: keyStorePwd is defined

  - name: Write keystore password check separator to report file
    nuage_append: filename="{{ report_path }}" text="-----Results of verifying if keystore password is set-----\n"
    delegate_to: localhost
    when: keyStorePwd is defined

  - name: Write keystore password check result
    nuage_append: filename="{{ report_path }}" text="{{ keystore_pass_check | dict2items | rejectattr("key", "eq", "cmd") | list | items2dict | to_nice_json }}\n"
    delegate_to: localhost
    when: keyStorePwd is defined

  - name: Verify truststore pass is set
    command: "keytool -keystore /opt/vsd/jboss/standalone/configuration/vsd.truststore -storepass {{ trustStorePwd }} -list"
    register: truststore_pass_check
    when: trustStorePwd is defined

  - name: Write truststore password check separator to report file
    nuage_append: filename="{{ report_path }}" text="-----Results of verifying truststore password-----\n"
    delegate_to: localhost
    when: trustStorePwd is defined

  - name: Write truststore password check result
    nuage_append: filename="{{ report_path }}" text="{{ truststore_pass_check | dict2items | rejectattr("key", "eq", "cmd") | list | items2dict | to_nice_json }}\n"
    delegate_to: localhost
    when: trustStorePwd is defined

  - name: Verify keyserver pass is set
    command: "keytool -keystore /opt/vsd/jboss/standalone/configuration/keyserver.jks -storepass {{ keyServerStorePwd }} -list"
    register: keyserver_pass_check
    when: keyServerStorePwd is defined
  
  - name: Write keyserver password check separator to report file
    nuage_append: filename="{{ report_path }}" text="-----Results of verifying keyserver password-----\n"
    delegate_to: localhost
    when: keyServerStorePwd is defined

  - name: Write keyserver password check result
    nuage_append: filename="{{ report_path }}" text="{{ keyserver_pass_check | dict2items | rejectattr("key", "eq", "cmd") | list | items2dict | to_nice_json }}\n"
    delegate_to: localhost
    when: keyServerStorePwd is defined

  - name: Verify jrestore pass is set for version
    command: "keytool -keystore {{ java_home.stdout }}/lib/security/cacerts -alias vspca -storepass {{ jreStorePwd }} -list"
    register: jrestore_pass_check
    when:
      - jreStorePwd is defined
      - vsd_major_version|int < 6

  - name: Write jrestore password check separator to report file
    nuage_append: filename="{{ report_path }}" text="-----Results of verifying jrestore password-----\n"
    delegate_to: localhost
    when:
      - jreStorePwd is defined
      - vsd_major_version|int < 6

  - name: Write jrestore password check result
    nuage_append: filename="{{ report_path }}" text="{{ jrestore_pass_check | dict2items | rejectattr("key", "eq", "cmd") | list | items2dict | to_nice_json }}\n"
    delegate_to: localhost
    when:
      - jreStorePwd is defined
      - vsd_major_version|int < 6

  - name: Verify cnauser pass is set
    command: "mysql -ucnauser -p{{ cnaPwd }} -e 'select 1'"
    register: cnauser_pass_check
    when: cnaPwd is defined

  - name: Write cnauser password check separator to report file
    nuage_append: filename="{{ report_path }}" text="-----Results of verifying cnauser password-----\n"
    delegate_to: localhost
    when: cnaPwd is defined

  - name: Write cnauser password check result
    nuage_append: filename="{{ report_path }}" text="{{ cnauser_pass_check | dict2items | rejectattr("key", "eq", "cmd") | list | items2dict | to_nice_json }}\n"
    delegate_to: localhost
    when: cnaPwd is defined

  - name: Verify ejbcauser pass is set
    command: "mysql -uejbcauser -p{{ ejbcaPwd }} -e 'select 1'"
    register: ejbcauser_pass_check
    when: ejbcaPwd is defined

  - name: Write ejbcauser password check separator to report file
    nuage_append: filename="{{ report_path }}" text="-----Results of verifying ejbcauser password-----\n"
    delegate_to: localhost
    when: ejbcaPwd is defined

  - name: Write ejbcauser password check result
    nuage_append: filename="{{ report_path }}" text="{{ ejbcauser_pass_check | dict2items | rejectattr("key", "eq", "cmd") | list | items2dict | to_nice_json }}\n"
    delegate_to: localhost
    when: ejbcaPwd is defined

  - name: Verify amquser pass is set
    command: "mysql -uamquser -p{{ ampPwd }} -e 'select 1'"
    register: amquser_pass_check
    when: ampPwd is defined

  - name: Write amquser password check separator to report file
    nuage_append: filename="{{ report_path }}" text="-----Results of verifying amquser password-----\n"
    delegate_to: localhost
    when: ampPwd is defined

  - name: Write amquser password check result
    nuage_append: filename="{{ report_path }}" text="{{ amquser_pass_check | dict2items | rejectattr("key", "eq", "cmd") | list | items2dict | to_nice_json }}\n"
    delegate_to: localhost
    when: ampPwd is defined

  - name: Verify adminuser pass is set
    command: "mysql -udbadmin -p{{ adminPwd }} -e 'select 1'"
    register: adminuser_pass_check
    when: adminPwd is defined

  - name: Write adminuser password  check separator to report file
    nuage_append: filename="{{ report_path }}" text="-----Results of verifying adminuser password-----\n"
    delegate_to: localhost
    when: adminPwd is defined

  - name: Write adminuser password check result
    nuage_append: filename="{{ report_path }}" text="{{ adminuser_pass_check | dict2items | rejectattr("key", "eq", "cmd") | list | items2dict | to_nice_json }}\n"
    delegate_to: localhost
    when: adminPwd is defined

  - name: Verify monituser pass is set
    command: "mysql -umonituser -p{{ monitPwd }} -e 'select 1'"
    register: monituser_pass_check
    when: monitPwd is defined

  - name: Write monituser password check separator to report file
    nuage_append: filename="{{ report_path }}" text="-----Results of verifying monituser password-----\n"
    delegate_to: localhost
    when: monitPwd is defined

  - name: Write monituser password check result
    nuage_append: filename="{{ report_path }}" text="{{ monituser_pass_check | dict2items | rejectattr("key", "eq", "cmd") | list | items2dict | to_nice_json }}\n"
    delegate_to: localhost
    when: monitPwd is defined

- block:

  - name: Verify the Memory and CPU Usages
    command: "monit status '{{ inventory_hostname }}' "
    register: memory_cpu_usage

  - name: Write the Memory and CPU usage to report file
    nuage_append: filename="{{ report_path }}" text="-----Results of Memory & CPU usgage check-----\n"
    delegate_to: localhost

  - name: Write Memory and  CPU Usages result
    nuage_append: filename="{{ report_path }}" text="{{ item }}\n"
    with_items: "{{ memory_cpu_usage.stdout_lines[2:9] }}"
    delegate_to: localhost

  remote_user: "{{ vsd_custom_username | default(vsd_default_username) }}"
  no_log: "{{ lookup('env', 'METROAE_NO_LOG') or 'true' }}"
  become: "{{ 'no' if vsd_custom_username | default(vsd_default_username) == 'root' else 'yes' }}"
  vars:
    ansible_become_pass: "{{ vsd_custom_password | default(vsd_default_password) }}"

- import_tasks: report_end.yml
