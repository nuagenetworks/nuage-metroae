- name: Create VSD backup directory on localhost
  include_role:
    name: common
    tasks_from: create-backup-dir
  vars:
    backup_component_name: vsd
    backup_host_name: "{{ inventory_hostname }}"
  when: not vcin_backup | default(False)

- name: Create VCIN backup directory on localhost
  include_role:
    name: common
    tasks_from: create-backup-dir
  vars:
    backup_component_name: vcin
    backup_host_name: "{{ inventory_hostname }}"
  when: vcin_backup | default(False)

- block:

  - include_role:
      name: common
      tasks_from: get-vsd-version

  remote_user: "{{ vsd_custom_username | default(vsd_default_username) }}"

- block:
  - name: Enable maintainance mode on all l3/l2 domains
    vsd_maintainance:
      vsd_auth:
        "{{ vsd_auth }}"
      state: enabled
      vsd_version: "{{ vsd_version.stdout }}"
    register: mode_status
    delegate_to: localhost
    retries: 10
    until: mode_status.rc == 0
    no_log: "{{ lookup('env', 'METROAE_NO_LOG') or 'true' }}"
    delay: 20

  - name: Print vsd maintainance mode output when verbosity >= 1
    debug: var=mode_status verbosity=1

  - name: Set event log age to 7
    set_event_log:
      vsd_auth:
        "{{ vsd_auth }}"
      event_log_age: 7
      api_version: "{{ vsd_version.stdout }}"
    delegate_to: localhost

  when:
    - inventory_hostname in groups['vsds']
    - not vsd_inplace_upgrade

- name: Read status of the DB upgrade directory and verify it
  include_role:
    name: common
    tasks_from: vsd-verify-db-status
  tags: vsd

- block:

  - name: Read gateway purge timer
    config_vsd_system:
      vsd_auth:
        "{{ vsd_auth }}"
      get_gateway_purge_time: True
      vsd_version: "{{ vsd_version.stdout }}"
    register: update_time_status
    delegate_to: localhost
    no_log: "{{ lookup('env', 'METROAE_NO_LOG') or 'true' }}"

  - debug: var=update_time_status verbosity=1

  - name: Create a file with purge timer value to be restored after VSD upgrade
    copy:
      content: "{{ update_time_status.result }}"
      dest: "{{ localhost_component_backup_dir }}/purge_time"
    delegate_to: localhost

  #TODO move updating gateway purge timer from vsd-dbbackup
  - name: Update gateway purge timer
    config_vsd_system:
      vsd_auth:
        "{{ vsd_auth }}"
      vsd_version: "{{ vsd_version.stdout }}"
      gateway_purge_time: 86400
    register: update_time_status
    delegate_to: localhost
    no_log: "{{ lookup('env', 'METROAE_NO_LOG') or 'true' }}"

  - name: Print update time output when verbosity >= 1
    debug: var=update_time_status verbosity=1
  when: inventory_hostname in groups['vsds']

- block:

  - name: Set Purge commands to purge commands with custom password
    set_fact:
      purge_cmd: "{{ purge_cmd_with_custom_pass }}"
    when: vsd_mysql_password is defined

  - name: Purge the alarms and event history from database
    shell: "{{ item }}"         # noqa 305
    with_items: "{{ purge_cmd }}"

  - name: Copy the VSD migration script ISO to VSD's temp directory
    copy: src={{ vsd_migration_iso_path }}/{{ vsd_migration_iso_file_name }}
        dest=/tmp/

  - name: Register target directory status
    stat: path="/media/CDROM"
    register: cdrom_dir

  - name: Create target directory to mount ISO if necessary
    file: name="/media/CDROM" state=directory mode=0775
    when: not cdrom_dir.stat.exists

  - name: Get VSD Mounts
    include_role:
      name: common
      tasks_from: vsd_list_iso_mount
    register: mount_file

  - name: Check if ISO is mounted
    set_fact:
      is_mounted: true
    when: "'iso' in mount_file.stdout"

  - name: mount ISO as loop back device
    shell:
      cmd: "mount -o loop /tmp/{{ vsd_migration_iso_file_name }} /media/CDROM/"         # noqa 305
      warn: no
    register: mount_out
    when: not is_mounted | default( False )

  - debug: var=mount_out verbosity=1

  - name: Get VSD Mounts
    include_role:
      name: common
      tasks_from: vsd_list_iso_mount
    register: mount_file

  - name: Verify that the ISO is mounted
    assert:
      that:
        - "'.iso' in mount_file.stdout"
      msg: "Did not find iso file in mount path"

  - block:

    - name: Copy pre-upgrade database check script to vsd
      copy:
        src: "{{ vsd_preupgrade_db_check_script_path }}/pre-upgrade-backup.sh"
        dest: "/opt/vsd/data/"
        mode: '0744'

    - name: Set fact for path to script on VSD
      set_fact:
        db_preupgrade_script_vsd_path: "/opt/vsd/data"

    when: vsd_preupgrade_db_check_script_path is defined

  - block:

    - name: Check if pre-upgrade database check script exists in migration ISO
      find:
        path: "/media/CDROM/"
        pattern: "pre-upgrade-backup.sh"
      register: preupgrade_script

    - name: Set fact for path to script on VSD
      set_fact:
        db_preupgrade_script_vsd_path: "/media/CDROM"
      when: preupgrade_script.matched == 1

    when: vsd_preupgrade_db_check_script_path is not defined

  - block:

    - name: Check VSD database before upgrade
      shell: "{{ db_preupgrade_script_vsd_path }}/pre-upgrade-backup.sh -s"
      register: preupgrade_db_check

    - name: Assert that db preupgrade check was successful
      assert:
        that: "'Successfully executed pre-upgrade-backup script' in preupgrade_db_check.stdout"
        msg: "The preupgrade database check was not successfully executed. Please check /opt/vsd/logs/upgrade_issue.log for more details."

    when: db_preupgrade_script_vsd_path is defined

  - name: Run backup script from mount location
    shell: "{{ backup_cmd }}"   # noqa 305
    when: vsd_mysql_password is undefined
    vars:
      ansible_python_interpreter: "{{ python_location }}"

  - name: Run backup script from mount location
    shell: "{{ backup_cmd }}"   # noqa 305
    environment:
      ENV_MYSQL_ROOT_PWD: "{{ vsd_mysql_password }}"
    when: vsd_mysql_password is defined
    vars:
      ansible_python_interpreter: "{{ python_location }}"

  - name: Umount the ISO
    shell: "umount /media/CDROM"        # noqa 305

  - name: Delete the VSD migration script ISO from VSD's temp directory
    file:
      path: /tmp/{{ vsd_migration_iso_file_name }}
      state: absent

  remote_user: "{{ vsd_custom_username | default(vsd_default_username) }}"
  become: "{{ 'no' if vsd_custom_username | default(vsd_default_username) == 'root' else 'yes' }}"
  become_flags: '-i'
  vars:
    ansible_become_pass: "{{ vsd_custom_password | default(vsd_default_password) }}"

- name: Fetch backup files onto localhost
  include_role:
    name: vsd-backup-only
    tasks_from: fetch-backup-files
