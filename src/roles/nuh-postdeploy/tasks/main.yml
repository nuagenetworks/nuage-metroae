- block:

  - name: Check for the role file
    stat:
      path: /opt/proxy/role
    register: role_file

  - name: debugging the role file stat
    debug:
      msg: "{{ role_file.stat }}"
      
  - name: Assert role file present
    assert:
      that: role_file.stat.exists
      msg: Could not find the /opt/proxy/role file on NUH.

  - name: Check haproxy status
    command: systemctl status haproxy
    register: haproxy_status

  - name: Assert haproxy is active
    assert:
      that: "haproxy_status.stdout is search('Active')"
      msg: haproxy is not active on NUH

  - name: Run only if Internal IP is present
    block: 

    - name: Get vsd node(s) information
      import_role:
        name: common
        tasks_from: vsd-node-info.yml
      vars:
        vsd_hostname: "{{ vsd_fqdn }}"
      run_once: true

    - name: Check notification app status
      command: systemctl status notification-app
      register: notification_app_status
      ignore_errors: yes

    - name: Restart notification app when not active
      command: systemctl restart notification-app
      when: notification_app_status.stdout is not search('active (running)')

    - name: Verify that notification application 1 is connected to VSD
      command: "/opt/ejabberd/bin/ejabberdctl connected_users"
      run_once: true
      register: app1_output
      delegate_to: "{{ vsd_hostname_list[0] }}"
      remote_user: "{{ custom_username | default(vsd_default_username) }}"
      become: "{{ 'no' if custom_username | default(vsd_default_username) == 'root' else 'yes' }}"
      vars:
        ansible_become_pass: "{{ custom_password | default(vsd_default_password) }}"
      until: app1_output.stdout.find(notification_app1.username) != -1
      retries: 5
      delay: 30
      when: notification_app1 is defined

    - name: Verify that notification application 2 is connected to VSD
      command: "/opt/ejabberd/bin/ejabberdctl connected_users"
      run_once: true
      register: app2_output
      delegate_to: "{{ vsd_hostname_list[0] }}"
      remote_user: "{{ custom_username | default(vsd_default_username) }}"
      become: "{{ 'no' if custom_username | default(vsd_default_username) == 'root' else 'yes' }}"
      vars:
        ansible_become_pass: "{{ custom_password | default(vsd_default_password) }}"
      until: app2_output.stdout.find(notification_app2.username) != -1
      retries: 5
      delay: 30
      when: notification_app2 is defined

    when: 
      - internal_ip is defined
      - groups['vsds'] is defined
      - not skip_vsd_installed_check

  - block: 

    - name: Get current VSD API version
      include_role:
        name: common
        tasks_from: get-current-vsd-api-version

    - name: Format VSPK auth for VSPK module
      set_fact:
        vspk_auth:
          api_username: "{{ vsd_auth.username }}"
          api_password: "{{ vsd_auth.password }}"
          api_enterprise: "{{ vsd_auth.enterprise }}"
          api_url: "{{ vsd_auth.api_url }}"
          api_version: "{{ current_api_version }}"
      no_log: "{{ lookup('env', 'METROAE_NO_LOG') or 'true' }}"

    - name: Set statsout proxy as elasticsearch proxy
      nuage_vspk:
        auth: "{{ vspk_auth }}"
        type: SystemConfig
        state: present
        properties:
          stats_database_proxy: "{{ stats_out_proxy }}:6200"
      delegate_to: localhost
      when: stats_out | default(false)

  remote_user: "{{ nuh_default_username }}"
