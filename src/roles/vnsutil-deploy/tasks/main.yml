- name: Clean known_hosts of VNSUTILs (ignoring errors)
  known_hosts:
    name: "{{ mgmt_ip }}"
    state: absent
  delegate_to: localhost
  no_log: "{{ lookup('env', 'METROAE_NO_LOG') or 'true' }}"
  ignore_errors: True

- name: Wait for VNS Utility VM ssh to be ready
  include_role:
    name: common
    tasks_from: wait-for-ssh
  vars:
    ssh_host: "{{ mgmt_ip }}"
    host_username: "{{ vnsutil_default_username }}"

- block:

  - name: Configure yum proxy
    lineinfile:
      dest: /etc/yum.conf
      regexp: "^proxy="
      line: "proxy={{ yum_proxy }}"
    when: yum_proxy is not match('NONE')

  - name: Install NTP package on the vnsutil vm
    yum: name=ntp state=present

  remote_user: "{{ vnsutil_default_username }}"

- name: Configure ntpd and ntpdate and local time zone
  include_role:
    name: common
    tasks_from: linux-ntp-sync
  vars:
    rem_user: "{{ vnsutil_default_username }}"

- block:

  - name: Gather all NSGvs
    set_fact:
      all_nsgvs: "{% for nsgv_name in groups['nsgvs'] %}{{ nsgv_objs.append(hostvars[nsgv_name]) }}{% endfor %}{{ nsgv_objs }}"
    vars:
      nsgv_objs: []
    no_log: "{{ lookup('env', 'METROAE_NO_LOG') or 'true' }}"

  - name: Filter NSGvs that have IP addresses
    set_fact:
      dhcpd_nsgvs: "{{ all_nsgvs | selectattr('nsgv_ip', 'defined') | list }}"
    no_log: "{{ lookup('env', 'METROAE_NO_LOG') or 'true' }}"

  when: '"nsgvs" in groups'

- block:

  - name: Install dhcp package
    yum: name=dhcp state=present

  - name: Write dhcp config
    template: src=dhcpd.conf.j2 backup=no dest=/etc/dhcp/dhcpd.conf

  - name: Restart dhcp service
    service:
      name: dhcpd
      state: restarted

  - name: Chkconfig of dhcpd
    command: chkconfig dhcpd on

  - name: Install dnsmasq package
    yum: name=dnsmasq state=present

  - name: Copy dnsmasq config
    template: src=dnsmasq.conf.j2 backup=no dest=/etc/dnsmasq.conf

  - name: Start dnsmasq
    service:
      name: dnsmasq
      state: started

  - name: Chkconfig of dnsmasq
    command: chkconfig dnsmasq on

  remote_user: "{{ vnsutil_default_username }}"
  when: dhcpd_nsgvs is defined and dhcpd_nsgvs | length > 0

- block:
  - name: Create dir to hold the keys
    file:
      path: "/opt/proxy/config/keys"
      state: directory

  - name: Create and transfer certs
    include_role:
      name: common
      tasks_from: vsd-generate-transfer-certificates
    vars:
      certificate_password: "{{ vnsutil_default_password }}"
      certificate_username: proxy
      commonName: proxy
      certificate_type: server
      scp_user: "{{ vnsutil_default_username }}"
      scp_location: /opt/proxy/config/keys
      additional_parameters: -d {{ data_fqdn }}

  - name: Install supervisord and haproxy
    command: "{{ install_cmd }}"

  - name: Start supervisord
    service:
      name: supervisord
      state: restarted
      enabled: true

  - name: Trigger generation of CRL file
    command: /opt/proxy/bin/crlreloader.sh

  - name: Wait for CRL file to be created, before starting HAProxy
    wait_for:
      path: /etc/haproxy/crl.pem
      state: present
      timeout: 60
      msg: Timeout waiting for CRL file to be created

  - name: Start haproxy
    service:
      name: haproxy
      state: started
      enabled: true

  - name: Add firewall rules to accept dhcp and dns requests
    lineinfile:
      insertafter: '<service name="ssh"/>'
      dest: /etc/firewalld/zones/public.xml
      line: "{{ item }}"
    with_items: "{{ firewall_rules }}"

  - name: Restart firewalld
    service:
      name: firewalld
      state: restarted

  # block properties
  remote_user: "{{ vnsutil_default_username }}"

- name: Setup health monitoring
  include_role:
    name: setup-health-monitoring
  vars:
    component_username: "{{ vnsutil_default_username }}"
  when: health_monitoring_agent | default("none") != "none"
