---
# Check registration of VRS on Controller

- name: Set JSON Query to retrieve MgmtIP for VSC({{ controller_addr }})
  set_fact:
    ctrl_query: "*|[?control_ip=='{{controller_addr}}'].{host: mgmt_ip, username: vsc_default_username, password: vsc_default_password }"

- name: Query host variables for VSC Controller({{ controller_addr }})
  set_fact:
   vsc_creds: '{{ hostvars|json_query(ctrl_query) }}'

- block:
  - name: Clean known_hosts of VSC Controller (ignoring errors)
    known_hosts:
      name: "{{ vsc_creds[0].host }}"
      state: absent
    delegate_to: localhost
    no_log: "{{ lookup('env', 'METROAE_NO_LOG') or 'true' }}"
    ignore_errors: True

  - name: Set sed-expression variable
    set_fact:
     sed_expr: "s/^.*src \\([0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\).*/\\1/"


  - name: Get VTEP IP address of compute server
    shell: "ip -o route get {{ controller_addr }} | sed '{{ sed_expr }}'"
    remote_user: "{{ compute_username | default(target_server_username) }}"
    become: "{{ 'no' if compute_username == 'root' else 'yes' }}"
    register: ovs_vtep_ip

  - debug: var=ovs_vtep_ip verbosity=1

  - name: Wait for VSC ssh to be ready
    include_role:
      name: common
      tasks_from: wait-for-ssh-port
    vars:
      ssh_host: "{{ vsc_creds[0].host }}"
      ssh_password: "{{ vsc_creds[0].password }}"
      ssh_user: "{{ vsc_creds[0].username }}"
      check_login: True

  - name: Set awk expression for parse the version
    set_fact:
      version_expr: '{ split($1, version, "-"); print version[4] }'

  - name: Get output of 'show version'
    sros_command:
      commands:
        - show version
      provider: "{{ vsc_creds[0] }}"
    delegate_to: localhost
    register: sh_version

  - name: Parse version
    shell: "echo '{{ sh_version.stdout[0] }}' | awk '{{ version_expr }}'"
    delegate_to: localhost
    register: vsc_version

  - debug: var=vsc_version.stdout verbosity=1

  - block:

    - name: Get output of 'show vswitch-controller information' on VSC ({{ controller_addr }}) for version less than 6.0.1
      sros_command:
        commands:
          - show vswitch-controller vswitches vs-ip {{ ovs_vtep_ip.stdout }} detail
        provider: "{{ vsc_creds[0] }}"
      delegate_to: localhost
      register: vsc_vsw_info

    - name: Set fact for vswitch_controller_info
      set_fact:
        vswitch_controller_info: "{{ vsc_vsw_info.stdout[0] }}"

    when: vsc_version.stdout is version('6.0.1', '<')

  - block:
    
    - name: Get output of 'show vswitch-controller information' on VSC ({{ controller_addr }}) for version greater than 6.0.1
      sros_command:
        commands:
          - show vswitch-controller vswitches detail vs-name VRS-{{ ovs_vtep_ip.stdout }}
        provider: "{{ vsc_creds[0] }}"
      delegate_to: localhost
      register: vsc_vsw_info
    
    - name: Set fact for vswitch_controller_info
      set_fact:
        vswitch_controller_info: "{{ vsc_vsw_info.stdout[0] }}"

    when: vsc_version.stdout is version('6.0.1', '>=')

  - name: Assert that VRS has been registered properly
    assert:
      that: "'Cntrl. Conn. state         : ready' in vswitch_controller_info"

  when: vsc_creds | length == 1
