- name: Clean known_hosts of VSCs (ignoring errors)
  known_hosts:
    name: "{{ mgmt_ip }}"
    state: absent
  delegate_to: localhost
  no_log: True
  ignore_errors: True

- block:

  - name: Wait for VSC ssh to be ready
    include_role:
      name: common
      tasks_from: wait-for-ssh-port
    vars:
      ssh_host: "{{ mgmt_ip }}"
    tags:
      - vsc
      - vsc-health

  - name: Get output of 'show router bgp summary'
    sros_command:
      commands:
        - show router bgp summary
      provider: "{{ vsc_creds }}"
    register: bgp_summary

  - name: Create local variable with BGP Summary in json
    set_fact: bgp_summary_json="{{ bgp_summary.stdout[0]|bgp_summary_to_json }}"

  - name: Create local variable with BGP Admin State
    set_fact: bgp_admin_state="{{ bgp_summary_json['BGP Admin State'] }}"

  - name: Check for expected BGP Admin State
    assert: {
      that: "'{{ expected_bgp_admin_state }}' in bgp_admin_state",
      msg: "Unexpected BGP Admin State - {{ bgp_admin_state }}. Expected '{{ expected_bgp_admin_state }}'. Check output of 'show router bgp summary'."
      }
    ignore_errors: "{{ not nuage_upgrade | default(False) }}"

  - name: Create local variable for BGP Oper State
    set_fact: bgp_oper_state="{{ bgp_summary_json['BGP Oper State'] }}"

  - name: Check for expected BGP Oper State
    assert: {
      that: "'{{ expected_bgp_oper_state }}' in bgp_oper_state",
      msg: "Unexpected BGP Oper State - {{ bgp_oper_state }}. Expected '{{ expected_bgp_oper_state }}'. Check output of 'show router bgp summary'."
      }
    ignore_errors: "{{ not nuage_upgrade | default(False) }}"

  - name: Create local variable for BGP Peer Count
    set_fact: bgp_peer_count="{{ bgp_summary_json['Total Peers'] }}"

  - name: Check for expected BGP Peer Count
    assert: {
      that: "{{ expected_num_bgp_peers }} == {{ bgp_peer_count }}",
      msg: "Invalid BGP Peer count ({{ bgp_peer_count }}) detected. Expected '{{ expected_num_bgp_peers }}'. Check 'show router bgp summary'."
      }
    ignore_errors: "{{ not nuage_upgrade | default(False) }}"
    when: expected_num_bgp_peers | default(0) > 0

  - name: Get output of 'show vswitch-controller xmpp-server detail'
    sros_command:
      commands:
        - show vswitch-controller xmpp-server detail
      provider: "{{ vsc_creds }}"
    register: xmpp_detail

  - name: Create local variable with xmpp-server detail in json
    set_fact: xmpp_detail_json="{{ xmpp_detail.stdout[0]|xmpp_server_detail_to_json }}"

  - name: Create local variable for xmpp-server state
    set_fact: xmpp_server_state="{{ xmpp_detail_json['State'] }}"

  - name: Check for the expected xmpp-server state
    assert: {
      that: "{{ expected_xmpp_server_state == xmpp_server_state }}",
      msg: "Invalid xmpp-server state ({{ xmpp_server_state }}) detected. Expected {{ expected_xmpp_server_state }}. Check 'show vswitch-controller xmpp-server details'."
      }
    ignore_errors: "{{ not nuage_upgrade | default(False) }}"

  - block:

    - name: Get output of 'show vswitch-controller vswitches'
      sros_command:
        commands:
          - show vswitch-controller vswitches
        provider: "{{ vsc_creds }}"
      register: show_vswitches

    - name: Create local variable with show vswitches output in json
      set_fact: show_vswitches_json="{{ show_vswitches.stdout[0]|show_vswitches_to_json }}"

    - name: Check for the expected number of vswitches
      assert: {
        that: "{{ expected_num_vswitches }} == {{ show_vswitches_json['No. of virtual switches'] }}",
        msg: "Invalid vswitch count ({{ show_vswitches_json['No. of virtual switches'] }}) detected. Expected {{ expected_num_vswitches }}. Check 'show vswitch-controller vswitches'."
        }
      ignore_errors: "{{ not nuage_upgrade | default(False) }}"

    when: expected_num_vswitches | default(0) > 0

  - block:

    - name: Get output of 'show vswitch-controller vports type host'
      sros_command:
        commands:
          - show vswitch-controller vports type host
        provider: "{{ vsc_creds }}"
      register: show_host_vports

    - name: Create local variable with show host vports output in json
      set_fact: show_host_vports_json="{{ show_host_vports.stdout[0]|show_host_vports_to_json }}"

    - name: Check for the expected number of host vports
      assert: {
        that: "{{ expected_num_host_vports }} == {{ show_host_vports_json['No. of virtual ports'] }}",
        msg: "Invalid host vport count ({{ show_host_vports_json['No. of virtual ports'] }}) detected. Expected {{ expected_num_host_vports }}. Check 'show vswitch-controller vports type host'."
        }
      ignore_errors: "{{ not nuage_upgrade | default(False) }}"

    when: expected_num_host_vports | default(0) > 0

  - block:

    - name: Get output of 'show vswitch-controller vports type vm'
      sros_command:
        commands:
          - show vswitch-controller vports type vm
        provider: "{{ vsc_creds }}"
      register: show_vm_vports

    - name: Create local variable with show vm vports output in json
      set_fact: show_vm_vports_json="{{ show_vm_vports.stdout[0]|show_vm_vports_to_json }}"

    - name: Check for the expected number of vm vports
      assert: {
        that: "{{ expected_num_vm_vports }} == {{ show_vm_vports_json['No. of virtual ports'] }}",
        msg: "Invalid vm vport count ({{ show_vm_vports_json['No. of virtual ports'] }}) detected. Expected {{ expected_num_vm_vports }}. Check 'show vswitch-controller vports type vm'."
        }
      ignore_errors: "{{ not nuage_upgrade | default(False) }}"

    when: expected_num_vm_vports | default(0) > 0

  - block:

    - name: Get output of 'show vswitch-controller gateway ports'
      sros_command:
        commands:
          - show vswitch-controller gateway ports
        provider: "{{ vsc_creds }}"
      register: show_gateway_ports

    - name: Create local variable with show gateway ports output in json
      set_fact: show_gateway_ports_json="{{ show_gateway_ports.stdout[0]|show_gateway_ports_to_json }}"

    - name: Check for the expected number of gateway ports
      assert: {
        that: "{{ expected_num_gateway_ports }} == {{ show_gateway_ports_json['No. of Ports'] }}",
        msg: "Invalid gateway port count ({{ show_gateway_ports_json['No. of Ports'] }}) detected. Expected {{ expected_num_gateway_ports }}. Check 'show vswitch-controller gateway ports'."
        }
      ignore_errors: "{{ not nuage_upgrade | default(False) }}"

    when: expected_num_gateway_ports | default(0) > 0

  - name: Get output of 'show router interface'
    sros_command:
      commands:
        - show router interface
      provider: "{{ vsc_creds }}"
    register: show_router_interfaces

  - name: Create local variable with show router interface output in json
    set_fact: show_router_interfaces_json="{{ show_router_interfaces.stdout[0]|vsc_router_interfaces_to_json }}"

  - name: Check for expected control Adm Status
    assert: {
      that: "{{ show_router_interfaces_json.control_Adm | match('Up') }}",
      msg: "Invalid Adm status for control interface. ({{ show_router_interfaces_json.control_Adm }}) detected. Expected 'Up'. Check 'show router interface'."
      }

  - name: Check for expected control Oprv4 Status
    assert: {
      that: "{{ show_router_interfaces_json.control_Oprv4 | match('Up') }}",
      msg: "Invalid Oprv4 status for control interface. ({{ show_router_interfaces_json.control_Oprv4 }}) detected. Expected 'Up'. Check 'show router interface'."
      }

  - name: Check for expected system Adm Status
    assert: {
      that: "{{ show_router_interfaces_json.system_Adm | match('Up') }}",
      msg: "Invalid Adm status for system interface. ({{ show_router_interfaces_json.system_Adm }}) detected. Expected 'Up'. Check 'show router interface'."
      }

  - name: Check for expected system Oprv4 Status
    assert: {
      that: "{{ show_router_interfaces_json.system_Oprv4 | match('Up') }}",
      msg: "Invalid Oprv4 status for system interface. ({{ show_router_interfaces_json.system_Oprv4 }}) detected. Expected 'Up'. Check 'show router interface'."
      }

  - name: Get NTP status
    sros_command:
      commands:
        - show system ntp | match "Clock Source"
      provider: "{{ vsc_creds }}"
    register: ntp_status
    until: not ntp_status.stdout[0]|search('none')
    retries: "{{ ntp_sync_retries }}"
    delay: "{{ ntp_sync_delay }}"

  - name: Verify NTP status
    assert:
      that: not ntp_status.stdout[0]|search('none')
      msg: "NTP Status not okay: {{ ntp_status.stdout[0] }}. Quitting."

  delegate_to: localhost
