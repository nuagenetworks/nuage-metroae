---
- block:

  - name: Pull facts on VRS target {{ inventory_hostname }}
    action: setup

  - name: Set openvswitch file on RedHat OS family distros
    set_fact:
      openvswitch_file: "/etc/default/openvswitch"
    when: ansible_os_family == "RedHat"

  - name: Set openvswitch file on Debian OS family distros
    set_fact:
      openvswitch_file: "/etc/default/openvswitch-switch"
    when: ansible_os_family == "Debian"

  - name: Set connection type
    set_fact:
      conn_type: "ssl"

  - name: Set Client key path
    set_fact:
      client_keys_path: "/etc/default/bootstrap/keys"

  - name: Create Key directory
    file:
      path: "{{ client_keys_path }}"
      state: directory
      recurse: yes

  - name: Set openvswitch file on Debian OS family distros
    set_fact:
      openvswitch_file: "/etc/default/openvswitch-switch"
    when: ansible_os_family == "Debian"

  - name: Check whether active controller address is already configured (ignoring errors)
    command: grep -Fq "ACTIVE_CONTROLLER={{ active_controller_addr }}" {{ openvswitch_file }}
    register: active_address_result
    ignore_errors: True

  - name: Check whether standby controller address is already configured (ignoring errors)
    command: grep -Fq "STANDBY_CONTROLLER={{ standby_controller_addr }}" {{ openvswitch_file }}
    register: standby_address_result
    ignore_errors: True

  - name: Get controller connection info (ignoring errors)
    shell: "ovs-vsctl show | grep -Pzl '(?s)Controller \"ctrl(1|2)\"\\n *target: \"(tcp|ssl):({{ item }}):6633\"\\n *role: (master|slave)\\n *is_connected: true'"      # noqa 204
    with_items:
      - "{{ active_controller_addr }}"
      - "{{ standby_controller_addr }}"
    register: command_result
    ignore_errors: yes
    changed_when: False

  - name: Set if skipping VRS deploy
    set_fact: skip_vrs_deploy="{{ command_result is defined and command_result.results[0].rc == 0 and
                                  active_address_result is defined and active_address_result.rc == 0 and
                                  standby_address_result is defined and standby_address_result.rc == 0 }}"

  - name: Display if skipping VRS deploy
    debug:
      msg:
        - "*************************************************"
        - "Skipping VRS deploy because it is already running"
        - "*************************************************"
    when: skip_vrs_deploy

  remote_user: "{{ compute_username | default(target_server_username) }}"
  become: "{{ 'no' if compute_username == 'root' else 'yes' }}"
  vars:
    ansible_become_pass: "{{ compute_password | default(target_server_password) }}"

- block:
  - name: Copy External PKI Certificates
    shell: "sshpass -p'{{ compute_password | default(target_server_password) }}' scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ item }} {{ compute_username | default(target_server_username) }}@{{ inventory_hostname }}:/etc/default/bootstrap/keys/"
    no_log: "{{ lookup('env', 'METROAE_NO_LOG') or 'true' }}"
    with_items:
      - "{{ private_key_path }}"
      - "{{ certificate_path }}"
      - "{{ ca_certificate_path }}"
    delegate_to: localhost

  - name: set tls profiles vars
    set_fact:
      own_key: "{{ private_key_path | basename }}"
      own_certificate: "{{ certificate_path | basename }}"
      own_ca_certificate: "{{ ca_certificate_path | basename }}"

  when:
    - private_key_path is defined
    - certificate_path is defined
    - ca_certificate_path is defined

- block:
  - name: Generate TLS Certificates for VRS
    include_role:
      name: common
      tasks_from: vsd-generate-transfer-certificates
    vars:
      certificate_password: "{{ compute_password | default(target_server_password) }}"
      certificate_username: vrs-{{ inventory_hostname }}
      commonName: vrs-{{ inventory_hostname }}
      certificate_type: vrs
      scp_user: "{{ compute_username | default(target_server_username) }}"
      scp_location: "{{ client_keys_path }}"
      additional_parameters:  -v {{ inventory_hostname }}

  - name: set tls profiles vars
    set_fact:
      own_key: "vrs-{{ inventory_hostname }}-Key.pem"
      own_certificate: "vrs-{{ inventory_hostname }}.pem"
      own_ca_certificate: "vrs-{{ inventory_hostname }}-CA.pem"

  when:
    - private_key_path is undefined
    - certificate_path is undefined
    - ca_certificate_path is undefined

- block:

  - name: Create temporary directory
    file: path={{ temp_dir }}/{{ inventory_hostname }} state=directory

  - name: Copy VRS packages to temporary directory
    copy: src={{ vrs_package_path }}/{{ item }} dest={{ temp_dir }}/{{ inventory_hostname }}/{{ item }}
    with_items: "{{ vrs_package_file_name_list }}"

  - name: Copy Selinux packages to temporary directory for RHEL7 and Centos7
    copy: src={{ selinux_package_path }}/{{ item }} dest={{ temp_dir }}/{{ inventory_hostname }}/{{ item }}
    with_items: "{{ selinux_package_file_name_list }}"
    when: selinux_package_path is defined and selinux_package_path != 'None'

  - name: Install Nuage OpenVSwitch packages on Debian OS family distros
    apt: deb={{ temp_dir }}/{{ inventory_hostname }}/{{ item }} state=present
    with_items:
     - "{{ vrs_package_file_name_list }}"
    when: ansible_os_family == "Debian"

  - name: Install Nuage OpenVSwitch packages on RedHat OS family distros
    yum: name={{ temp_dir }}/{{ inventory_hostname }}/{{ item }} state=present
    vars:
      ansible_python_interpreter: /usr/bin/python2
    with_items:
     - "{{ vrs_package_file_name_list }}"
    when: ansible_os_family == "RedHat"

  - name: Install Selinux package for RHEL7 and Centos7
    yum: name={{ temp_dir }}/{{ inventory_hostname }}/{{ item }} state=present
    vars:
      ansible_python_interpreter: /usr/bin/python2
    with_items:
     - "{{ selinux_package_file_name_list }}"
    when:
      - ansible_os_family == "RedHat"
      - ansible_distribution_major_version == '7'
      - selinux_package_path is defined and selinux_package_path != 'None'

  - block:

    - name: Copy DKMS packages to temporary directory for RHEL and Ubuntu14
      copy: src={{ dkms_package_path }}/{{ item }} dest={{ temp_dir }}/{{ inventory_hostname }}/{{ item }}
      with_items: "{{ dkms_package_file_name_list }}"

    - name: Install Nuage DKMS packages on RedHat OS family distros
      yum: name={{ temp_dir }}/{{ inventory_hostname }}/{{ item }} state=present
      vars:
        ansible_python_interpreter: /usr/bin/python2
      with_items:
       - "{{ dkms_package_file_name_list }}"
      when: ansible_os_family == "RedHat"

    when: dkms_install

  - name: Remove temporary directory
    file: path={{ temp_dir }}/{{ inventory_hostname }} state=absent

  - name: Update active controller in {{ openvswitch_file }} file
    lineinfile:
      dest: "{{ openvswitch_file }}"
      regexp: "^ACTIVE_CONTROLLER="
      line: "ACTIVE_CONTROLLER={{ active_controller_addr }}"

  - name: Update standby controller in {{ openvswitch_file }} file
    lineinfile:
      dest: "{{ openvswitch_file }}"
      regexp: "^STANDBY_CONTROLLER="
      line: "STANDBY_CONTROLLER={{ standby_controller_addr }}"

  - name: Update connection type in {{ openvswitch_file }} file
    lineinfile:
      dest: "{{ openvswitch_file }}"
      regexp: "^CONN_TYPE="
      line: "CONN_TYPE=tcp"
    when: not openflow_tls

  - block:

    - name: Update client key path in {{ openvswitch_file }} file
      lineinfile:
        dest: "{{ openvswitch_file }}"
        regexp: "^CLIENT_KEY_PATH="
        line: "CLIENT_KEY_PATH={{ client_keys_path }}/{{ own_key }}"

    - name: Update client cert path in {{ openvswitch_file }} file
      lineinfile:
        dest: "{{ openvswitch_file }}"
        regexp: "^CLIENT_CERT_PATH="
        line: "CLIENT_CERT_PATH={{ client_keys_path }}/{{ own_certificate }}"

    - name: Update CA cert path in {{ openvswitch_file }} file
      lineinfile:
        dest: "{{ openvswitch_file }}"
        regexp: "^CA_CERT_PATH="
        line: "CA_CERT_PATH={{ client_keys_path }}/{{ own_ca_certificate }}"

    - name: Update connection type in {{ openvswitch_file }} file
      lineinfile:
        dest: "{{ openvswitch_file }}"
        regexp: "^CONN_TYPE="
        line: "CONN_TYPE={{ conn_type }}"

    when: openflow_tls

  - name: Restart OpenVSwitch Service on RedHat OS family distros
    service: name=openvswitch state=restarted
    when: ansible_os_family == "RedHat"

  - name: Restart OpenVSwitch Service on Debian OS family distros
    service: name=nuage-openvswitch-switch state=restarted
    when: ansible_os_family == "Debian"

  - name: Pause for Service to start
    pause: seconds=20

  remote_user: "{{ compute_username | default(target_server_username) }}"
  become: "{{ 'no' if compute_username == 'root' else 'yes' }}"
  vars:
    ansible_become_pass: "{{ compute_password | default(target_server_password) }}"
  when: not skip_vrs_deploy
