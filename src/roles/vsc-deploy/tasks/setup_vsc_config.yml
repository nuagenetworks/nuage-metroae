- name: Set local variable with tmp directory name
  set_fact:
    tmp_dir_name: "/tmp/{{ vmname }}"

- name: Set local variable with default config file name
  set_fact:
    config_file_name: "config.cfg"

- name: Update local config file name if not rebooting
  set_fact:
    config_file_name: "new-config.cfg"
  when: not reboot_vsc | default(true)

- name: delegate to localhost
  block:

  - name: Create temporary folder for vsc config
    file:
      path: "{{ tmp_dir_name }}"
      state: directory

  - name: Setup VSC temporary configuration files
    template:
      src: "{{ config_template }}"
      backup: no
      dest: "{{ tmp_dir_name }}/{{ config_file_name }}"
    when:
      - not restore_vsc | default(False)
      - not override_vsc_config

  - name: Restore VSC
    block:

    - name: Set local variable with bof file name
      set_fact:
        bof_file_name: "bof.cfg"

    - name: Copy backup files from backup_machine
      copy:
        src: "{{ item }}"
        dest: "{{ tmp_dir_name }}"
        backup: no
      with_fileglob:
        - "{{ metro_backup_root }}/{{ restore_dir | default( 'backup-latest-full' ) }}/vsc-{{ inventory_hostname }}/*.cfg"

    - name: Remove old tls-profile from backup config as it will be applied during deploy
      replace:
        path: "{{ tmp_dir_name }}/config.cfg"
        regexp: tls-profile(.*)create(.|\n)*?exit
        replace: |
            tls-profile "vsc-tls-profile" create
                shutdown
            exit
        backup: no
      when: xmpp_tls or openflow_tls

    when: restore_vsc | default(False)

  - meta: reset_connection

  - name: Wait for VSC ssh to be ready before config
    include_role:
      name: common
      tasks_from: wait-for-ssh-port
    vars:
      ssh_host: "{{ hostname }}"
      ssh_timeout_seconds: 600
      ssh_password: "{{ vsc_creds.password }}"
      ssh_user: "{{ vsc_creds.username }}"
      check_login: True

  - name: Add proxy setup
    set_fact:
      proxy_conf: '-o ProxyCommand="ssh -W %h:%p -q {{ ssh_proxy_configuration }}"'
    when: ssh_proxy_configuration is defined

  - name: Copy VSC config file to the VSC
    delegate_to: localhost
    shell: >-
      sshpass -p'{{ vsc_password | default(vsc_default_password) }}' scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null
      {{ proxy_conf | default('') }} {{ tmp_dir_name }}/{{ config_file_name }} {{ vsc_username | default(vsc_default_username) }}@{{ mgmt_ip }}:
    no_log: "{{ lookup('env', 'METROAE_NO_LOG') or 'true' }}"
    when:
      - not mgmt_ip | ipv6
      - not override_vsc_config

  - name: Copy VSC config file to the VSC
    delegate_to: localhost
    shell: >-
      sshpass -p'{{ vsc_password | default(vsc_default_password) }}' scp -6 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null
      {{ proxy_conf | default('') }} {{ tmp_dir_name }}/{{ config_file_name }}
      {{ vsc_username|default(vsc_default_username) }}@{{ '[' }}{{ mgmt_ip }}{{ ']' }}:
    no_log: "{{ lookup('env', 'METROAE_NO_LOG') or 'true' }}"
    when:
      - mgmt_ip | ipv6
      - not override_vsc_config

  - name: Override using user provided config
    block:
    - name: Copy user provided config file for VSC(IPv4)
      delegate_to: localhost
      shell: >-
        sshpass -p'{{ vsc_password | default(vsc_default_password) }}' scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null
        {{ proxy_conf | default('') }} {{ item }} {{ vsc_username | default(vsc_default_username) }}@{{ mgmt_ip }}:
      loop: "{{ vsc_config_file_paths }}"
      when: not mgmt_ip | ipv6

    - name: Copy user provided config file for VSC(IPv6)
      delegate_to: localhost
      shell: >-
        sshpass -p'{{ vsc_password | default(vsc_default_password) }}' scp -6 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null
        {{ proxy_conf | default('') }} {{ item }}
        {{ vsc_username|default(vsc_default_username) }}@{{ '[' }}{{ mgmt_ip }}{{ ']' }}:
      loop: "{{ vsc_config_file_paths }}"
      when: mgmt_ip | ipv6

    - meta: reset_connection

    - name: Save user provided config file
      sros_command:
        commands:
          - exec cf1:\{{ item | basename }}
          - admin save
        provider: "{{ vsc_creds }}"
      loop: "{{ vsc_config_file_paths }}"
      delegate_to: localhost

    when: override_vsc_config

  - name: Copy BOF on restore
    block:

    - name: Copy VSC BOF file to the VSC
      delegate_to: localhost
      shell: >-
        sshpass -p'{{ vsc_password | default(vsc_default_password) }}' scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null
        {{ proxy_conf | default('') }} {{ tmp_dir_name }}/{{ bof_file_name }} {{ vsc_username | default(vsc_default_username) }}@{{ mgmt_ip }}:
      no_log: "{{ lookup('env', 'METROAE_NO_LOG') or 'true' }}"
      when: not mgmt_ip | ipv6

    - name: Copy VSC BOF file to the VSC
      delegate_to: localhost
      shell: >-
        sshpass -p'{{ vsc_password | default(vsc_default_password) }}' scp -6 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null
        {{ proxy_conf | default('') }} {{ tmp_dir_name }}/{{ bof_file_name }}
        {{ vsc_username|default(vsc_default_username) }}@{{ '[' }}{{ mgmt_ip }}{{ ']' }}:
      no_log: "{{ lookup('env', 'METROAE_NO_LOG') or 'true' }}"
      when: mgmt_ip | ipv6

    when: restore_vsc | default(False)

  - name: Execute if not rebooting
    block:

    - meta: reset_connection

    - name: Execute VSC basic configuration
      sros_command:
        commands:
          - exec cf1:\new-config.cfg
        provider: "{{ vsc_creds }}"

    - name: Reconnect to ssh after it is hardened
      include_role:
        name: common
        tasks_from: wait-for-ssh-port
      vars:
        ssh_host: "{{ hostname }}"
        ssh_timeout_seconds: 600
        ssh_password: "{{ vsc_creds.password }}"
        ssh_user: "{{ vsc_creds.username }}"
        check_login: True
      when: enable_hardening | default(False)

    - meta: reset_connection

    - name: Save VSC basic configuration
      sros_command:
        commands:
          - admin save
        provider: "{{ vsc_creds }}"

    when: not reboot_vsc | default(true)

  - name: Execute when rebooting
    block:

    - name: Pause to ensure VSC uptime is high enough
      pause:
        seconds: 30

    - meta: reset_connection

    - name: Register uptime before reboot
      sros_command:
        commands:
          - show uptime
        provider: "{{ vsc_creds }}"
      register: uptime_before_reboot

    - meta: reset_connection

    - name: Reboot VSC VM (ignoring errors)
      sros_command:
        commands:
          - admin reboot now
        provider: "{{ vsc_creds }}"
      ignore_errors: true

    - meta: reset_connection

    - name: Wait for VSC ssh to be ready
      include_role:
        name: common
        tasks_from: wait-for-ssh-port
      vars:
        ssh_host: "{{ hostname }}"
        ssh_timeout_seconds: 600
        ssh_password: "{{ vsc_creds.password }}"
        ssh_user: "{{ vsc_creds.username }}"
        check_login: True

    - meta: reset_connection

    - name: Register uptime after reboot
      sros_command:
        commands:
          - show uptime
        provider: "{{ vsc_creds }}"
      register: uptime_after_reboot

    - name: Verify reboot happened successfully
      assert:
        that: "uptime_after_reboot.stdout < uptime_before_reboot.stdout"
        fail_msg: "System uptime after reboot step suggests there were issues during reboot. Check log for errors."

    when: reboot_vsc | default(true)

  - name: Delete temporary folder for vsc config
    file:
      path: "{{ tmp_dir_name }}"
      state: absent

  delegate_to: "localhost"
