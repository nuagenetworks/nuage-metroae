---
- name: Set local variable with vmname
  set_fact:
    vm_name: "{{ vmname }}"

- block:

  - name: Create temporary folder for vsc config
    file:
      path: "/tmp/{{ vm_name }}"
      state: directory

  - name: Setup VSC temporary configuration files
    template:
      src: "{{ config_template }}"
      backup: no
      dest: "/tmp/{{ vm_name }}/new-config.cfg"

  - name: Wait for VSC ssh to be ready before config
    include_role:
      name: common
      tasks_from: wait-for-ssh-port
    vars:
      ssh_host: "{{ hostname }}"
      ssh_timeout_seconds: 600
      ssh_password: "{{ vsc_creds.password }}"
      ssh_user: "{{ vsc_creds.username }}"
      check_login: True

  - name: Add proxy setup
    set_fact:
      proxy_conf: '-o ProxyCommand="ssh -W %h:%p -q {{ ssh_proxy_configuration }}"'
    when: ssh_proxy_configuration is defined

  - name: Copy VSC config file to the VSC
    connection: local
    command: "sshpass -p {{ vsc_password|default(vsc_default_password) }} scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ proxy_conf | default('') }} /tmp/{{ vm_name }}/new-config.cfg {{ vsc_username|default(vsc_default_username) }}@{{ mgmt_ip }}:"
    when: not mgmt_ip | ipv6

  - name: Copy VSC config file to the VSC
    connection: local
    command: "sshpass -p {{ vsc_password|default(vsc_default_password) }} scp -6 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ proxy_conf | default('') }} /tmp/{{ vm_name }}/new-config.cfg {{ vsc_username|default(vsc_default_username) }}@{{ '[' }}{{ mgmt_ip }}{{ ']' }}:"
    when: mgmt_ip | ipv6

  - name: Execute VSC basic configuration
    sros_command:
      commands:
        - exec cf1:\new-config.cfg
      provider: "{{ vsc_creds }}"

  - name: Reconnect to ssh after it is hardened
    include_role:
      name: common
      tasks_from: wait-for-ssh-port
    vars:
      ssh_host: "{{ hostname }}"
      ssh_timeout_seconds: 600
      ssh_password: "{{ vsc_creds.password }}"
      ssh_user: "{{ vsc_creds.username }}"
      check_login: True
    when: enable_hardening | default(True)

  - name: Save VSC basic configuration
    sros_command:
      commands:
        - admin save
      provider: "{{ vsc_creds }}"

  - block:

    - name: Pause to ensure VSC uptime is high enough
      pause:
        seconds: 30

    - name: Register uptime before reboot
      sros_command:
        commands:
          - show uptime
        provider: "{{ vsc_creds }}"
      register: uptime_before_reboot

    - name: Reboot VSC VM (ignoring errors)
      sros_command:
        commands:
          - admin reboot now
        provider: "{{ vsc_creds }}"
      ignore_errors: true

    - name: Wait for VSC ssh to be ready
      include_role:
        name: common
        tasks_from: wait-for-ssh-port
      vars:
        ssh_host: "{{ hostname }}"
        ssh_timeout_seconds: 600
        ssh_password: "{{ vsc_creds.password }}"
        ssh_user: "{{ vsc_creds.username }}"
        check_login: True

    - name: Register uptime after reboot
      sros_command:
        commands:
          - show uptime
        provider: "{{ vsc_creds }}"
      register: uptime_after_reboot

    - name: Verify reboot happened successfully
      assert:
        that: "uptime_after_reboot < uptime_before_reboot"
        fail_msg: "System uptime after reboot step suggests there were issues during reboot. Check log for errors."

    when: reboot_vsc

  - name: Remove temporary configuration files
    file: path=/tmp/{{ vm_name }}/new-config.cfg state=absent

  - name: Delete temporary folder for vsc config
    file:
      path: "/tmp/{{ vm_name }}"
      state: absent

  delegate_to: "localhost"
