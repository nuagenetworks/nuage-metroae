---
- block:
  - name: Resolve hostname DNS IP
    shell: "getent hosts {{ hostname }} | awk '{print $1}'"
    register: resolved_ip_result
    delegate_to: localhost

  - name: Check DNS response
    assert:
      that: (target_server_type is match("heat") and dhcp) or resolved_ip_result.stdout | ipaddr
      msg: "{{ hostname }} cannot be resolved"

  - name: Check if resolved IP is equal to management IP
    assert:
      that: resolved_ip_result.stdout == mgmt_ip
      msg: "Resolved {{ resolved_ip_result.stdout }} address is not equal to management IP {{ mgmt_ip }} for {{ hostname }}"
  when: target_server_type is not match("heat") or not dhcp

- block:

  - name: Ping hostname IPv6 (ignoring errors)
    command: ping6 -c 1 {{ hostname }}
    ignore_errors: yes
    register: host_ping6_result
    remote_user: "{{ ssh_proxy_username | default(None) }}"
    delegate_to: "{{ ssh_proxy_host | default('localhost') }}"

  - block:

    - name: Ping IP address IPv6 (ignoring errors)
      command: ping6 -c 1 {{ mgmt_ip }}
      ignore_errors: yes
      register: mgmt_ip_ping6_result
      remote_user: "{{ ssh_proxy_username | default(None) }}"
      delegate_to: "{{ ssh_proxy_host | default('localhost') }}"

    - name: Assert reachability of hostname is the same as management IP
      assert:
        that: "host_ping6_result.rc != 0 or mgmt_ip_ping6_result.rc == 0"
        msg:  "Response received from hostname {{ hostname }} but not from management IP {{ mgmt_ip }}. Quitting."

    - name: Assert reachability of management IP is the same as hostname
      assert:
        that: "host_ping6_result.rc == 0 or mgmt_ip_ping6_result.rc != 0"
        msg:  "Response received from management IP {{ mgmt_ip }} but not from hostname {{ hostname }} Quitting."

    when: target_server_type is not match("heat") or not dhcp

  - name: Set fact for node reachability
    set_fact:
      node_reachable: "{{ host_ping6_result.rc == 0 }}"

  when: enable_ipv6 | default(False)

- block:

  - name: Ping hostname (ignoring errors)
    command: ping -c 1 {{ hostname }}
    ignore_errors: yes
    register: host_ping_result
    remote_user: "{{ ssh_proxy_username | default(None) }}"
    delegate_to: "{{ ssh_proxy_host | default('localhost') }}"

  - block:

    - name: Ping IP address (ignoring errors)
      command: ping -c 1 {{ mgmt_ip }}
      ignore_errors: yes
      register: mgmt_ip_ping_result
      remote_user: "{{ ssh_proxy_username | default(None) }}"
      delegate_to: "{{ ssh_proxy_host | default('localhost') }}"
      when: not enable_ipv6 | default(True)

    - name: Assert reachability of hostname is the same as management IP
      assert:
        that: "host_ping_result.rc != 0 or mgmt_ip_ping_result.rc == 0"
        msg:  "Response received from hostname {{ hostname }} but not from management IP {{ mgmt_ip }}. Quitting."

    - name: Assert reachability of management IP is the same as hostname
      assert:
        that: "host_ping_result.rc == 0 or mgmt_ip_ping_result.rc != 0"
        msg:  "Response received from management IP {{ mgmt_ip }} but not from hostname {{ hostname }} Quitting."

    when: target_server_type is not match("heat") or not dhcp

  - name: Set fact for node reachability
    set_fact:
      node_reachable: "{{ host_ping_result.rc == 0 }}"

  when: not enable_ipv6 | default(True)
