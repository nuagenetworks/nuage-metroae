- block:

  - name: Configure NSGv on VSD
    create_zfb_profile:
      skip_iso_create: True
      vsd_license_file: "{{ vsd_license_file }}"
      vsd_auth: "{{ vsd_auth }}"
      zfb_constants: "{{ zfb_constants }}"
      zfb_proxy_user: "{{ zfb_proxy_user }}"
      zfb_nsg: "{{ zfb_nsg }}"
      zfb_ports: "{{ zfb_ports }}"
      zfb_nsg_infra: "{{ zfb_nsg_infra }}"
      zfb_vsc_infra: "{{ zfb_vsc_infra }}"
    delegate_to: localhost

  - name: Get current VSD API version
    include_role:
      name: common
      tasks_from: get-current-vsd-api-version

  - name: Format VSD auth for VSPK module
    set_fact:
      vspk_auth:
        api_username: "{{ vsd_auth.username }}"
        api_password: "{{ vsd_auth.password }}"
        api_enterprise: "{{ vsd_auth.enterprise }}"
        api_url: "{{ vsd_auth.api_url }}"
        api_version: "{{ current_api_version }}"
    no_log: "{{ lookup('env', 'METROAE_NO_LOG') or 'true' }}"

  - name: Get Enterprise from VSD
    connection: local
    nuage_vspk:
      auth: "{{ vspk_auth }}"
      type: Enterprise
      command: find
      properties:
        name: "{{ zfb_nsg.nsg_organization }}"
    register: nuage_enterprise

  - name: Get NSG Gateway from VSD
    connection: local
    nuage_vspk:
      auth: "{{ vspk_auth }}"
      type: NSGateway
      parent_id: "{{ nuage_enterprise.id }}"
      parent_type: Enterprise
      command: find
      properties:
        name: "{{ zfb_nsg.nsg_name }}"
    register: nuage_nsg

  - name: Find port1 of the NSG-AMI
    connection: local
    nuage_vspk:
      auth: "{{ vspk_auth }}"
      type: NSPort
      parent_type: NSGateway
      parent_id: "{{ nuage_nsg.id }}"
      command: find
      properties:
        name: "{{ zfb_ports.network_port.name }}"
    register: nuage_nsg_port1

  - name: Ensure 1:1 NAT is enabled on port1 of the NSG-AMI
    connection: local
    nuage_vspk:
      auth: "{{ vspk_auth }}"
      type: NSPort
      id: "{{ nuage_nsg_port1.id }}"
      state: present
      properties:
        nat_traversal: "ONE_TO_ONE_NAT"

  - name: Create Job to download auto-bootstrap info
    connection: local
    nuage_vspk:
      auth: "{{ vspk_auth }}"
      type: Job
      parent_id: "{{ nuage_enterprise.id }}"
      parent_type: Enterprise
      state: present
      properties:
        command: GET_ZFB_INFO
        parameters: '{ "mediaType": "YAML", "NSGType": "NSG-AMI", "associatedEntityType": "nsgateway", "associatedEntityID": "{{ nuage_nsg.id }}" }'
    register: nuage_nsg_zfb

  - name: Set user data Network variable
    set_fact: { "{{ item.key }}": "{{ item.value }}" }
    with_items:
    - { key: "nsg_ami_user_data", value: "{{ nuage_nsg_zfb.entities[0].result }}" }
    when: nuage_nsg_zfb.entities[0].status == "SUCCESS"

  when: bootstrap_method|default( "None" ) == 'zfb_metro'

- block:

  - name: Deploy Sample Network Structure / VPC
    delegate_to: localhost
    cloudformation:
      aws_access_key: "{{ aws_access_key | default(None) }}"
      aws_secret_key: "{{ aws_secret_key | default(None) }}"
      stack_name: "VPC-{{ vmname | replace('.', '-') }}"
      state: "present"
      region: "{{ aws_region }}"
      template: "{{ role_path }}/files/aws-nsg-vpc.json"
      template_parameters: "{{ provision_vpc }}"
    register: rc_aws_cfn_nuagevpc

  - name: Set Network variables from cloudformation results
    set_fact: { "{{ item.key }}": "{{ item.value }}" }
    with_items:
     - { key: "NSGLANENI", value: "{{ rc_aws_cfn_nuagevpc.stack_outputs.NSGLANENIId }}" }
     - { key: "NSGWANENI", value: "{{ rc_aws_cfn_nuagevpc.stack_outputs.NSGWANENIId }}" }
     - { key: "NSGLANENIIP", value: "{{ rc_aws_cfn_nuagevpc.stack_outputs.NSGLANENIIP }}" }
    when: "'Stack CREATE complete' in rc_aws_cfn_nuagevpc.output"

  when: provision_vpc is defined

- block:

  - name: Get facts for LAN ENI
    delegate_to: localhost
    ec2_eni_facts:
      aws_access_key: "{{ aws_access_key | default(None) }}"
      aws_secret_key: "{{ aws_secret_key | default(None) }}"
      filters:
        network-interface-id: "{{ aws_data_eni }}"
      region:  "{{ aws_region }}"
    register: rc_aws_nsg_lan_eni_facts

  - name: Set Network variables from user inputs
    set_fact: { "{{ item.key }}": "{{ item.value }}" }
    with_items:
     - { key: "NSGLANENI", value: "{{ aws_data_eni }}" }
     - { key: "NSGWANENI", value: "{{ aws_access_eni }}" }
     - { key: "NSGLANENIIP", value: "{{ rc_aws_nsg_lan_eni_facts.network_interfaces[0].private_ip_address }}" }
    when: (rc_aws_nsg_lan_eni_facts.network_interfaces|length > 0 )

  when: provision_vpc is not defined

- name: Create user data for bootstrap
  command: cat "{{ iso_path }}/{{ iso_file }}"
  delegate_to: localhost
  register: bootstrap_user_data

- name: Set NSGv User Data
  set_fact:
    nsg_ami_user_data: "{{ bootstrap_user_data.stdout }}"

- debug: var=nsg_ami_user_data

- name: Generate CloudFormation Template
  delegate_to: localhost
  template:
    src: "aws-nsg.json.j2"
    dest: "/tmp/aws-nsg-{{ inventory_hostname }}.json"

- name: Deploy NSG-AWS Stack
  delegate_to: localhost
  cloudformation:
    aws_access_key: "{{ aws_access_key | default(None) }}"
    aws_secret_key: "{{ aws_secret_key | default(None) }}"
    stack_name: "{{ vmname | replace('.', '-') }}"
    state: "present"
    region: "{{ aws_region }}"
    template: "/tmp/aws-nsg-{{ inventory_hostname }}.json"
    template_parameters:
      AMI: "{{ aws_ami_id }}"
      InstanceName: "{{ vmname | replace('.', '-') }}"
      InstanceType: "{{ aws_instance_type }}"
      KeyName: "{{ aws_key_name }}"
      NSGLANENI: "{{ NSGLANENI }}"
      NSGWANENI: "{{ NSGWANENI }}"
      NSGWANEIPAllocId: "{{ aws_eip_allocid | default('') }}"
  register: rc_aws_cfn_nsgami
