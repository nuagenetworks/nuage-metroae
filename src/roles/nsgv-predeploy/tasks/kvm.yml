- block:

  - name: Query Target Server facts
    action: setup

  - name: Include OS-specific variables.
    include_vars: "{{ ansible_os_family }}.yml"

  - name: Check target for supported OS
    fail: msg="Unsupported OS family ({{ ansible_os_family }})"
    when: ansible_os_family not in supported_target_server_os_family_list

  - name: Check target memory
    fail: msg="Not enough memory ({{ ansible_memtotal_mb }})"
    when: ansible_memtotal_mb < target_server_memory_mb_min

  - name: Check target cores
    fail: msg="Not enough cores ({{ ansible_processor_vcpus }})"
    when: ansible_processor_vcpus < target_server_vcpus_min

  - name: Check target bridges
    fail: msg="Required network bridges not found"
    when: (data_bridge not in ansible_interfaces) or
          (access_bridge not in ansible_interfaces)

  - name: Check if required OS packages are installed (ignoring errors)         # noqa 303
    command: rpm -q qemu-kvm libvirt bridge-utils libguestfs-tools libvirt-python
    register: rpm_check
    ignore_errors: True

  - name: Print rpm_check when verbosity >= 1
    debug: var=rpm_check verbosity=1

  - name: If RedHat, install packages for RedHat OS family distros
    yum:
      name:
        - qemu-kvm
        - libvirt
        - bridge-utils
        - libguestfs-tools
        - libvirt-python
      state: present
    when: rpm_check.rc == 1

  - name: Make sure libvirtd has started
    service:
      name: libvirtd
      enabled: yes
      state: started

  - name: List the Virtual Machines running
    virt: command=list_vms
    register: virt_vms

  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"
  become: "{{ 'no' if target_server_username == 'root' else 'yes' }}"

- name: Set fact for VM already running
  set_fact:
    node_running: "{{ vmname in virt_vms.list_vms }}"

- block:

  - name: set skip copy images to default
    set_fact:
      skip_copy_images: False
    when: skip_copy_images is undefined

  - include_tasks: copy_qcow2.yml
    when: not skip_copy_images

  - block:
    - name: Check to make sure there is an existing qcow image
      stat:
        path: "{{ images_path }}/{{ vmname }}/{{ image_file_name }}"
      register: statResult

    - name: check the result of image find command
      assert:
        that: statResult.stat.exists
        msg: Missing qcow2 file in {{ images_path }}/{{ vmname }}/{{ image_file_name }}

    when: skip_copy_images

  when: not node_running
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"
  become: "{{ 'no' if target_server_username == 'root' else 'yes' }}"

- block:

  - name: Create local temp directory
    tempfile:
      path: "{{ lookup('env', 'TMPDIR') | default('/tmp/',true) }}"
      state: directory
    delegate_to: localhost
    register: mktemp_output

  - name: Generate ISO file
    create_zfb_profile:
      nsgv_path: "{{ mktemp_output.path }}"
      fact_name: nsgv_already_configured
      vsd_license_file: "{{ vsd_license_file }}"
      vsd_auth: "{{ vsd_auth }}"
      zfb_constants: "{{ zfb_constants }}"
      zfb_proxy_user: "{{ zfb_proxy_user }}"
      zfb_nsg: "{{ zfb_nsg }}"
      zfb_ports: "{{ zfb_ports }}"
      zfb_nsg_infra: "{{ zfb_nsg_infra }}"
      zfb_vsc_infra: "{{ zfb_vsc_infra }}"
    delegate_to: localhost

  - name: Ensure NSGV has the correct configuration
    assert:
      that: "not node_running or nsgv_already_configured"
      msg: "NSGV is already running, but there was no corresponding configuration for it."

  - name: Copy the ISO image to virt images directory
    copy: src="{{ mktemp_output.path }}/user_image.iso"
          dest={{ images_path }}/{{ vmname }}
          owner={{ libvirt.user }}
          group={{ libvirt.group }}
    delegate_to: "{{ target_server }}"
    remote_user: "{{ target_server_username }}"
    become: "{{ 'no' if target_server_username == 'root' else 'yes' }}"

  when: bootstrap_method is match('zfb_metro')

- name: Display if skipping NSGV predeploy
  debug:
    msg:
      - "*****************************************************"
      - "Skipping NSGV predeploy because it is already present"
      - "*****************************************************"
  when: node_running

- block:

  - name: Define VM
    virt: name={{ vmname }}
          command=define
          xml="{{ lookup('template', 'nsgv.xml.j2') }}"
          uri=qemu:///system

  - name: Autostart
    virt: name={{ vmname }}
          command=status
          autostart=True
          uri=qemu:///system

  - name: Run VM
    virt: name={{ vmname }}
          state=running
          uri=qemu:///system

  when: not node_running
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"
  become: "{{ 'no' if target_server_username == 'root' else 'yes' }}"
