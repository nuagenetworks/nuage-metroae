---
- name: Register target directory status
  stat: path="{{ nuage_directory_path }}"
  register: target_dir
  remote_user: root

- name: Create target directory if necessary
  file: name="{{ nuage_directory_path }}" state=directory mode=0775 owner=jenkins group=jenkins
  when: target_dir.stat.exists == false
  remote_user: root

- name: Check contents of target directory
  shell: "ls -1 {{ nuage_directory_path }}"
  register: contents
  remote_user: root

- name: Remove directories of release versions not in the list
  file: path={{ nuage_directory_path }}/{{ item }} state=absent
  with_items: "{{ contents.stdout_lines }}"
  when: (item not in "{{ nuage_release }}") and (item != 'misc')
  remote_user: root

- name: Create directory for specific release on localhost
  file: name="{{ nuage_directory_path }}/{{ item }}/" state=directory mode=0775 owner=jenkins group=jenkins
  with_items: "{{ nuage_release }}"
  remote_user: root

- name: Create directory for downloaded Nuage tar files on localhost
  file: name="{{ nuage_directory_path }}/{{ item }}/nuage-packed/" state=directory mode=0775 owner=jenkins group=jenkins
  with_items: "{{ nuage_release }}"
  remote_user: root

- name: Create directory for unpacking Nuage tar files on localhost
  file: name="{{ nuage_directory_path }}/{{ item }}/nuage-unpacked/" state=directory mode=0775 owner=jenkins group=jenkins
  with_items: "{{ nuage_release }}"
  remote_user: root
  
- name: Download files to the directory for Nuage tar files on localhost
  shell: "wget ftp://{{ archive_retriever_ftp_username }}:{{ archive_retriever_ftp_password }}@{{ archive_retriever_ftp_host }}/{{ item[1] }}/{{ item[0] }} -P {{ nuage_directory_path }}/{{ item[1] }}/nuage-packed/"
  with_nested: 
    - "{{ filename_patterns }}"
    - "{{ nuage_release }}"
  remote_user: root

- name: Delete older files
  shell: " find {{ nuage_directory_path }}/{{ item }}/nuage-packed/ -name '*[0-9]' -delete"
  with_items: "{{ nuage_release }}"
  remote_user: root
