---
- name: Set unzip user value
  set_fact:
    unzip_user: "{{ unzip_user|default('root') }}"

- name: Verify that the tar.gz directory is specified
  assert: {
    that: nuage_zipped_files_dir is defined,
    msg: "nuage_zipped_files_dir is not defined in build_vars.yml"
  }

- name: Stat the tar.gz directory
  stat:
    path: "{{ nuage_zipped_files_dir }}"
  register: tar_gz

- name: Verify that the tar.gz directory exists
  assert: {
    that: tar_gz.stat.isdir is defined and tar_gz.stat.isdir,
    msg: "{{ nuage_zipped_files_dir }} is not a valid directory"
  }

#################
# VSD
#################

# QCOW2
- block:
  - name: Find VSD QCOW2 Archive
    find: path="{{ nuage_zipped_files_dir }}"  pattern="Nuage-VSD*QCOW*"
    register: rc_vsd
  - debug: var=rc_vsd verbosity=1
  - block:
    - name: Clean up any previous unzipped files
      file: name="{{ nuage_unzipped_files_dir }}/vsd/qcow2" state=absent
      remote_user: "{{ unzip_user }}"
    - name: Create subdirectory for unzipped files
      file: name="{{ nuage_unzipped_files_dir }}/vsd/qcow2" state=directory mode=0775
      remote_user: "{{ unzip_user }}"
    - name: Unpack VSD QCOW2 Archive
      unarchive: src="{{ rc_vsd.files[0].path}}" dest="{{ nuage_unzipped_files_dir }}/vsd/qcow2" list_files=yes mode=0775
      register: rc_vsd_archive_files
      remote_user: "{{ unzip_user }}"
    - debug: var=rc_vsd_archive_files verbosity=1
    when: rc_vsd.matched > 0 

  - name: Find VSD OVA Archive
    find: path="{{ nuage_zipped_files_dir }}"  pattern="Nuage-VSD*OVA*"
    register: rc_vsd
  - debug: var=rc_vsd verbosity=1
  - block:
    - name: Clean up any previous unzipped files
      file: name="{{ nuage_unzipped_files_dir }}/vsd/ova" state=absent
      remote_user: "{{ unzip_user }}"
    - name: Create subdirectory for unzipped files
      file: name="{{ nuage_unzipped_files_dir }}/vsd/ova" state=directory mode=0775
      remote_user: "{{ unzip_user }}"
    - name: Unpack VSD OVA Archive
      unarchive: src="{{ rc_vsd.files[0].path}}" dest="{{ nuage_unzipped_files_dir }}/vsd/ova" list_files=yes mode=0775
      register: rc_vsd_archive_files
      remote_user: "{{ unzip_user }}"
    - debug: var=rc_vsd_archive_files verbosity=1
    when: rc_vsd.matched > 0 

  - name: Find VSD mmigration Archive
    find: path="{{ nuage_zipped_files_dir }}"  pattern="Nuage-VSD-migration*ISO*"
    register: rc_vsd_migration
  - debug: var=rc_vsd_migration verbosity=1
  - block:
    - name: Clean up any previous unzipped files
      file: name="{{ nuage_unzipped_files_dir }}/vsd/migration" state=absent
      remote_user: "{{ unzip_user }}"
    - name: Create subdirectory for unzipped files
      file: name="{{ nuage_unzipped_files_dir }}/vsd/migration" state=directory mode=0775
      remote_user: "{{ unzip_user }}"
    - name: Unpack VSD migration Archive
      unarchive: src="{{ rc_vsd_migration.files[0].path}}" dest="{{ nuage_unzipped_files_dir }}/vsd/migration" list_files=yes mode=0775
      register: rc_vsd_migration_files
      remote_user: "{{ unzip_user }}"
    - debug: var=rc_vsd_migration_files verbosity=1
    when: rc_vsd_migration.matched > 0 
  tags:
    - vsd

###################
# VSTAT - Stats VM
###################

- block:
  - name: Find Stats VM Archive
    find: path="{{ nuage_zipped_files_dir }}"  pattern="Nuage-elastic-\d.*" use_regex=true
    register: rc_vstat
  - debug: var=rc_vstat verbosity=1
  - block:
    - name: Clean up unzipped files from previous run
      file: name="{{ nuage_unzipped_files_dir }}/vstat/" state=absent
      remote_user: "{{ unzip_user }}"
    - name: Ensure binaries target directory exists for Stats VM
      file: name="{{ nuage_unzipped_files_dir }}/vstat/" state=directory mode=0775
      remote_user: "{{ unzip_user }}"
    - name: Unpack Stats VM Archive
      unarchive: src="{{ rc_vstat.files[0].path}}" dest="{{ nuage_unzipped_files_dir }}/vstat" list_files=yes mode=0775
      register: rc_vstat_archive_files
      remote_user: "{{ unzip_user }}"
    - debug: var=rc_vstat_archive_files verbosity=1
    when: rc_vstat.matched > 0 
  tags:
    - vstat
 
###################
# VSC
###################

- block:
  - name: Find VSC Archive
    find: path="{{ nuage_zipped_files_dir }}"  pattern="Nuage-VSC*"
    register: rc_vsc
  - debug: var=rc_vsc verbosity=1
  - block:
    - name: Clean up unzipped directory from previous runs
      file: name="{{ nuage_unzipped_files_dir }}/vsc/" state=absent
      remote_user: "{{ unzip_user }}"
    - name: Ensure binaries target directory exists for VSC QCOW2 
      file: name="{{ nuage_unzipped_files_dir }}/vsc/" state=directory mode=0775
      remote_user: "{{ unzip_user }}"
    - name: Unpack VSC Archive
      unarchive: src="{{ rc_vsc.files[0].path}}" dest="{{ nuage_unzipped_files_dir }}/vsc/" list_files=yes mode=0775
      register: rc_vsc_archive_files
      remote_user: "{{ unzip_user }}"
    - debug: var=rc_vsc_archive_files verbosity=1
    when: rc_vsc.matched > 0
  tags:
    - vsc

################
# VRS 
################

- block:
  - name: Find EL6 VRS Archive
    find: path="{{ nuage_zipped_files_dir }}"  pattern="Nuage-VRS*-el6*"
    register: rc_vrs_el6
  - debug: var=rc_vrs_el6 verbosity=1
  - block:
    - name: Clean up unzipped directory from previous runs
      file: name="{{ nuage_unzipped_files_dir }}/vrs/el6/" state=absent
      remote_user: "{{ unzip_user }}"
    - name: Ensure that VRS binary target directory exists if vrs is el6
      file: name="{{ nuage_unzipped_files_dir }}/vrs/el6/" state=directory mode=0775
      remote_user: "{{ unzip_user }}"
    - name: Unpack VRS Archive
      unarchive: src="{{ item.path }}" dest="{{ nuage_unzipped_files_dir }}/vrs/el6" list_files=yes mode=0775
      with_items: "{{ rc_vrs_el6.files }}"
      register: rc_vrs_el6_archive_files
      remote_user: "{{ unzip_user }}"
    - debug: var=rc_vrs_el6_archive_files verbosity=1
    when: rc_vrs_el6.matched > 0

  - name: Find EL7 VRS Archive
    find: path="{{ nuage_zipped_files_dir }}"  pattern="Nuage-VRS*-el7*"
    register: rc_vrs_el7
  - debug: var=rc_vrs_el7 verbosity=1
  - block:
    - name: Clean up unzipped directory from previous runs
      file: name="{{ nuage_unzipped_files_dir }}/vrs/el7/" state=absent
      remote_user: "{{ unzip_user }}"
    - name: Ensure that VRS binary target directory exists if vrs is el7
      file: name="{{ nuage_unzipped_files_dir }}/vrs/el7/" state=directory mode=0775
      remote_user: "{{ unzip_user }}"
    - name: Unpack VRS Archive
      unarchive: src="{{ item.path }}" dest="{{ nuage_unzipped_files_dir }}/vrs/el7" list_files=yes mode=0775
      with_items: "{{ rc_vrs_el7.files }}"
      register: rc_vrs_el7_archive_files
      remote_user: "{{ unzip_user }}"
    - debug: var=rc_vrs_el7_archive_files verbosity=1
    when: rc_vrs_el7.matched > 0

  - name: Find ubuntu-14.04 VRS Archive
    find: path="{{ nuage_zipped_files_dir }}"  pattern="Nuage-VRS*-ubuntu.14.04*"
    register: rc_vrs_u14_04
  - debug: var=rc_vrs_u14_04 verbosity=1
  - block:
    - name: Clean up unzipped directory from previous runs
      file: name="{{ nuage_unzipped_files_dir }}/vrs/u14_04/" state=absent
      remote_user: "{{ unzip_user }}"
    - name: Ensure that VRS binary target directory exists if vrs is u14_04
      file: name="{{ nuage_unzipped_files_dir }}/vrs/u14_04/" state=directory mode=0775
      remote_user: "{{ unzip_user }}"
    - name: Unpack VRS Archive
      unarchive: src="{{ item.path }}" dest="{{ nuage_unzipped_files_dir }}/vrs/u14_04" list_files=yes mode=0775
      with_items: "{{ rc_vrs_u14_04.files }}"
      register: rc_vrs_u14_04_archive_files
      remote_user: "{{ unzip_user }}"
    - debug: var=rc_vrs_u14_04_archive_files verbosity=1
    when: rc_vrs_u14_04.matched > 0

  - name: Find ubuntu-16.04 VRS Archive
    find: path="{{ nuage_zipped_files_dir }}"  pattern="Nuage-VRS*-ubuntu.16.04*"
    register: rc_vrs_u16_04
  - debug: var=rc_vrs_u16_04 verbosity=1
  - block:
    - name: Clean up unzipped directory from previous runs
      file: name="{{ nuage_unzipped_files_dir }}/vrs/u16_04/" state=absent
      remote_user: "{{ unzip_user }}"
    - name: Ensure that VRS binary target directory exists if vrs is u16_04
      file: name="{{ nuage_unzipped_files_dir }}/vrs/u16_04/" state=directory mode=0775
      remote_user: "{{ unzip_user }}"
    - name: Unpack VRS Archive
      unarchive: src="{{ item.path }}" dest="{{ nuage_unzipped_files_dir }}/vrs/u16_04" list_files=yes mode=0775
      with_items: "{{ rc_vrs_u16_04.files }}"
      register: rc_vrs_u16_04_archive_files
      remote_user: "{{ unzip_user }}"
    - debug: var=rc_vrs_u16_04_archive_files verbosity=1
    when: rc_vrs_u16_04.matched > 0
  tags:
    - vrs

################
# Docker-Monitor
#################

- block:
  - name: Find Docker-Monitor Archive
    find: path="{{ nuage_zipped_files_dir }}"  pattern="Nuage-Docker-Monitor*"
    register: rc_dockermon
  - debug: var=rc_dockermon verbosity=1
  - block:
    - name: Clean up after previous unzipped runs
      file: name="{{ nuage_unzipped_files_dir }}/dockermon/" state=absent
      remote_user: "{{ unzip_user }}"
    - name: Create directory to unzipped Docker-Monitor to
      file: name="{{ nuage_unzipped_files_dir }}/dockermon/" state=directory mode=0775
      remote_user: "{{ unzip_user }}"
    - name: Unpack Docker-Monitor Archive
      unarchive: src="{{ rc_dockermon.files[0].path}}" dest="{{ nuage_unzipped_files_dir }}/dockermon/" list_files=yes mode=0775
      register: rc_dockermon_archive_files
      remote_user: "{{ unzip_user }}"
    - debug: var=rc_dockermon_archive_files verbosity=1
    when: rc_dockermon.matched > 0
  tags:
    - dockermon

#####################
# VNS Utility/ NSGV
#####################

- block:
  - name: Find VNS Archive
    find: path="{{ nuage_zipped_files_dir }}"  pattern="Nuage-VNS*"
    register: rc_vns
  - debug: var=rc_vns verbosity=1
  - block:
    - name: Clean up files from previous unzipped run
      file: name="{{ nuage_unzipped_files_dir }}/vns" state=absent
      remote_user: "{{ unzip_user }}"
    - name: Ensure target directory exists for VNS
      file: name="{{ nuage_unzipped_files_dir }}/{{ item }}" state=directory mode=0775
      with_items:
        - "vns/nsg/"
        - "vns/utils/"
        - "vns/nsg/aws"
      remote_user: "{{ unzip_user }}"
    - name: Unpack VNS Archive
      unarchive: src="{{ rc_vns.files[0].path}}" dest="{{ nuage_unzipped_files_dir }}/vns" list_files=yes mode=0775
      register: rc_vns_archive_files
      remote_user: "{{ unzip_user }}"
    when: rc_vns.matched > 0

  - name: Find NSG and Utils archive files
    find: path="{{ nuage_unzipped_files_dir }}/vns/" pattern="{{ item }}"
    with_items:
      - "Nuage-VNS-NSG-*"
      - "Nuage-VNS-Utils-*"
    register: rc_vns_archives
  - debug: var=rc_vns_archives verbosity=1
  - block:
    - name: Unpack VNS NSG and Utils archive files
      unarchive: src="{{ rc_vns_archives.results[item.0].files[0].path }}" dest="{{ nuage_unzipped_files_dir }}/{{ item.1 }}" mode=0775
      register: rc_vns_archives_files
      with_indexed_items:
        - "vns/nsg/"
        - "vns/utils/"
      remote_user: "{{ unzip_user }}"
    - name: Find name of NSG-AWSs archive files
      find: path="{{ nuage_unzipped_files_dir }}/vns/nsg" pattern="{{ item }}"
      with_items:
        - "Nuage-NSG-*AWS*"
      register: rc_vns_aws_archives
    - debug: var=rc_vns_aws_archives verbosity=1
    - name: Unpack VNS NSG AWS archive files
      unarchive: src="{{ rc_vns_aws_archives.results[item.0].files[0].path }}" dest="{{ nuage_unzipped_files_dir }}/{{ item.1 }}"  mode=0775
      register: rc_vns_aws_archives_files
      with_indexed_items:
        - "vns/nsg/aws"
      remote_user: "{{ unzip_user }}"
      when: rc_vns_aws_archives.results[0].matched > 0
    when: rc_vns_archives.results[0].matched > 0 and rc_vns_archives.results[1].matched > 0
  tags:
    - vns

##########################
## Nuage OpenStack Plugins
##########################

- block:
  - name: Find the Nuage OpenStack Plugin Archive
    find: path="{{ nuage_zipped_files_dir }}"  pattern="Nuage-openstack*"
    register: rc_nuage_os
  - debug: var=rc_nuage_os verbosity=1
  - block:
    - name: Clean up after previous unzipped runs
      file: name="{{ nuage_unzipped_files_dir }}/nuage_os/" state=absent
      remote_user: "{{ unzip_user }}"
    - name: Create directory to unzipped Nuage OpenStack plugins
      file: name="{{ nuage_unzipped_files_dir }}/nuage_os/" state=directory mode=0775
      remote_user: "{{ unzip_user }}"
    - name: Unpack Nuage OpenStack Archive
      unarchive: src="{{ rc_nuage_os.files[0].path}}" dest="{{ nuage_unzipped_files_dir }}/nuage_os/" list_files=yes mode=0775
      register: rc_nuage_os_archive_files
      remote_user: "{{ unzip_user }}"
    - debug: var=rc_nuage_os_archive_files
    when: rc_nuage_os.matched > 0
  tags:
    - nuage_os
