---
- block:
  - name: Get current version of VSD software to use it in loading correct vspk version
    command: echo $VSD_VERSION
    register: vsd_old_version
    remote_user: "root"

  - name: Print vsd_version output when verbosity >= 1
    debug: var=vsd_old_version verbosity=1
  when: 
    - inventory_hostname in groups['vsds']
    - inventory_hostname == groups['vsds'][0] and vsd_sa_or_ha | match("sa")) or (inventory_hostname == groups['vsds'][1] and vsd_sa_or_ha | match("ha"))

- block:
  - name: Stop vsd services gracefully
    include_role:
      name: vsd-services-stop
    when:
    - inventory_hostname in groups['vsd_node2'] or inventory_hostname in groups['vsd_node3']
    remote_user: root
  
  - block:
    - name: Backup and Shutdown/Destroy Current vsd nodes 1 and 3
      include_role: 
        name: vsd-destroy
      vars:
        nuage_upgrade: True
    when: inventory_hostname in groups['vsd_node2'] or inventory_hostname in groups['vsd_node3']
  
  - block:
    - name: Shutdown/Destroy Current vsd node 2
      include_role: 
        name: vsd-destroy
      vars:
         nuage_upgrade: True
    when: inventory_hostname in groups['vsd_node1'] 
  when: vsd_sa_or_ha | match('ha')

- block:
  - name: Backup and Shutdown/Destroy Current vsd node 1  for SA
    include_role: 
      name: vsd-destroy
    vars:
      nuage_upgrade: True
  when: vsd_sa_or_ha | match('sa')

- name: Deploy VSD nodes with new version
  include_role:
    name: vsd-predeploy

- name: Wait for VSD ssh to be ready
  local_action:
    module: wait_for
    port: "22"
    host: "{{ mgmt_ip }}"
    search_regex: OpenSSH
    delay: 1

- include: copy_backup_files.yml

#TODO: 
#- name: Compare network information of VSD's across pre-uppgrade and upgrade

- name: Install VSD on new node(s)
  include_role:
    name: vsd-deploy

- name: Get monit summary for all process on VSD
  vsd_monit:
    state: summary
  register: proc_list
  remote_user: "root"

- name: wait for VSD common , core and stats services to become running
  monit_waitfor_service:
    name: "{{ item }}"
    timeout_seconds: 1200
    test_interval_seconds: 30
  with_items: "{{ proc_list['state'].keys() }}"
  remote_user: "root"


#TODO:
#-update vsd_post_upgrade_helper to include disabling VSD maintenance mode
- block:
  - name: Get current version of VSD software
    command: echo $VSD_VERSION
    register: vsd_version
    remote_user: "root"

  - name: Print vsd_version output when verbosity >= 1
    debug: var=vsd_version verbosity=1

  - name: Disable maintainance mode on all l3/l2 domains
    vsd_maintainance:
      vsd_auth:
        "{{ vsd_auth }}"
      state: disabled
      api_version: "{{ vsd_version.stdout }}"
    register: mode_status
    delegate_to: 127.0.0.1

  - name: Print vsd maintainance mode output when verbosity >= 1
    debug: var=mode_status verbosity=1

  - name: shut/noshut vswitch controller on VSCs after disabling VSD maintenance mode
    sros_config:
      lines:
          - configure vswitch-controller shutdown
          - configure vswitch-controller no shutdown
      provider:
        host: "{{ item }}"
        username: "{{ vsc_user }}"
        password: "{{ vsc_password }}"
        transport: cli
    register: vsc_command_status
    #connection: local
    delegate_to: "{{ ansible_deployment_host }}"
    remote_user: "{{ ansible_sudo_username }}"
    with_items: "{{ groups['vscs'] }}"

  - debug: var=vsc_command_status verbosity=1

  - block:
    - name: read saved vsd purge time before upgrade
      command: cat "/tmp/backup-{{ groups['vsd_node2'][0] }}-latest/purge_time"
      register: purge_time_saved
      delegate_to: 127.0.0.1

    - debug: var=purge_time_saved.stdout verbosity=1

    - name: Update gateway purge timer to original value
      config_vsd_system:
        vsd_auth:
          "{{ vsd_auth }}"
        gateway_purge_time: "{{ purge_time_saved.stdout }}"
        api_version: "{{ vsd_old_version.stdout }}"
      register: update_time_status
      delegate_to: 127.0.0.1
    when: vsd_sa_or_ha | match("ha")

  - block:
    - name: read saved vsd purge time before upgrade
      command: cat "/tmp/backup-{{ groups['vsds'][0] }}-latest/purge_time"
      register: purge_time_saved
      delegate_to: 127.0.0.1

    - debug: var=purge_time_saved.stdout verbosity=1

    - name: Update gateway purge timer to original value
      config_vsd_system:
        vsd_auth:
          "{{ vsd_auth }}"
        gateway_purge_time: "{{ purge_time_saved.stdout }}"
        api_version: "{{ vsd_old_version.stdout }}"
      register: update_time_status
      delegate_to: 127.0.0.1
    when: vsd_sa_or_ha | match("sa")
  when: 
   - inventory_hostname in groups['vsds']
   - (inventory_hostname == groups['vsds'][0] and vsd_sa_or_ha | match("sa")) or (inventory_hostname == groups['vsds'][1] and vsd_sa_or_ha | match("ha"))
