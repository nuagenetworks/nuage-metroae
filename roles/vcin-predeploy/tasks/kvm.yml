---
- name: Query {{ target_server }} facts
  action: setup
  remote_user: "{{ target_server_username }}"
  delegate_to: "{{ target_server }}"

- name: Include OS-specific variables.
  include_vars: "{{ ansible_os_family }}.yml"

- name: Check target for supported OS
  fail: msg="Unsupported OS family ({{ ansible_os_family }})"
  when: ansible_os_family not in vcin_target_server_os_family_list

- name: Check target memory
  fail: msg="Not enough memory ({{ ansible_memtotal_mb }})"
  when: ansible_memtotal_mb < {{ vcin_target_server_memory_mb_min }}

- name: Check target cores
  fail: msg="Not enough cores ({{ ansible_processor_vcpus }})"
  when: ansible_processor_vcpus < {{ vcin_target_server_vcpus_min }}

- name: Check target bridges
  fail: msg="Required network bridges not found"
  when: ("{{ mgmt_bridge }}" not in ansible_interfaces)

- name: If RedHat, install packages for RedHat OS family distros
  yum: name={{ item }} state=present
  with_items:
   - qemu-kvm
   - libvirt
   - bridge-utils
   - libguestfs-tools
   - libvirt-python
  when: ansible_os_family == "RedHat"
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: If Debian, install packages for Debian OS family distros
  apt: name={{ item }} state=present
  with_items:
   - qemu-kvm
   - libvirt-bin
   - bridge-utils
   - libguestfs-tools
   - python-libvirt
  when: ansible_os_family == "Debian"
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: List the Virtual Machines running
  virt: command=list_vms
  register: virt_vms
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Verify that the VM is not already running
  assert:
    that: "inventory_hostname not in virt_vms.list_vms"
    msg: "{{ inventory_hostname }} is already running on {{ target_server }}"

- name: Create libvirt image directory
  file: path={{ images_path }}/{{ inventory_hostname }}
        state=directory
        owner={{ libvirt.user }}
        group={{ libvirt.group }}
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Copy the VCIN qcow image to virt images directory
  copy: src={{ vcin_qcow2_path }}/{{ vcin_qcow2_file_name }}
        dest={{ images_path }}/{{ inventory_hostname }}
        owner={{ libvirt.user }}
        group={{ libvirt.group }}
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Create a temporary copy of the network script for eth0
  template: src=ifcfg-eth0.j2 backup=no dest={{ images_path }}/{{ inventory_hostname }}/ifcfg-eth0
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- block:
  - name: Copy eth0 network script file to the VCIN image
    command: guestfish --rw -a {{ images_path }}/{{ inventory_hostname }}/{{ vcin_qcow2_file_name }} -m /dev/sda2 copy-in {{ images_path }}/{{ inventory_hostname }}/ifcfg-eth0 /etc/sysconfig/network-scripts/
    delegate_to: "{{ target_server }}"
    remote_user: "{{ target_server_username }}"
  - name: Set guestfish mount variable
    set_fact: guestfish_mount=/dev/sda2
  rescue:
  - name: Copy eth0 network script file to the VCIN image
    command: guestfish --rw -a {{ images_path }}/{{ inventory_hostname }}/{{ vcin_qcow2_file_name }} -m /dev/rhel/rootvol copy-in {{ images_path }}/{{ inventory_hostname }}/ifcfg-eth0 /etc/sysconfig/network-scripts/
    delegate_to: "{{ target_server }}"
    remote_user: "{{ target_server_username }}"
  - name: Set guestfish mount variable
    set_fact: guestfish_mount=/dev/rhel/rootvol

- debug: var=guestfish_mount verbosity=1

- name: Remove temporary copy of eth0 network script
  file: path={{ images_path }}/{{ inventory_hostname }}/ifcfg-eth0 state=absent
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Set the owner and group on the eth0 network script file in the VCIN image
  command: guestfish --rw -a {{ images_path }}/{{ inventory_hostname }}/{{ vcin_qcow2_file_name }} -m {{ guestfish_mount }} chown 0 0 /etc/sysconfig/network-scripts/ifcfg-eth0
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Create a temporary copy of the syscfg network file
  template: src=network.j2 backup=no dest={{ images_path }}/{{ inventory_hostname }}/network
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Copy network file to the VCIN image
  command: guestfish --rw -a {{ images_path }}/{{ inventory_hostname }}/{{ vcin_qcow2_file_name }} -m {{ guestfish_mount }} copy-in {{ images_path }}/{{ inventory_hostname }}/network /etc/sysconfig/
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Remove temporary copy of network file
  file: path={{ images_path }}/{{ inventory_hostname }}/network state=absent
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Set the owner and group for the network hostname file on the VCIN image
  command: guestfish --rw -a {{ images_path }}/{{ inventory_hostname }}/{{ vcin_qcow2_file_name }} -m {{ guestfish_mount }} chown 0 0 /etc/sysconfig/network
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Create the directory /root/.ssh for authorized_keys
  command: guestfish --rw -a {{ images_path }}/{{ inventory_hostname }}/{{ vcin_qcow2_file_name }} -m {{ guestfish_mount }} mkdir-mode /root/.ssh 0700
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Set the owner and group for the /root/.ssh directory on the VCIN image
  command: guestfish --rw -a {{ images_path }}/{{ inventory_hostname }}/{{ vcin_qcow2_file_name }} -m {{ guestfish_mount }} chown 0 0 /root/.ssh
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Get the public key for the current user
  local_action: command cat "{{ user_ssh_pub_key }}"
  register: current_user_ssh_key

- name: Create a temporary copy of the authorized_keys file
  template: src=authorized_keys.j2 backup=no dest={{ images_path }}/{{ inventory_hostname }}/authorized_keys
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Copy authorized_keys file to the VCIN image
  command: guestfish --rw -a {{ images_path }}/{{ inventory_hostname }}/{{ vcin_qcow2_file_name }} -m {{ guestfish_mount }} copy-in {{ images_path }}/{{ inventory_hostname }}/authorized_keys /root/.ssh/
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Remove temporary copy of authorized_keys file
  file: path={{ images_path }}/{{ inventory_hostname }}/authorized_keys state=absent
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Set the owner and group for the authorized_keys file on the VCIN image
  command: guestfish --rw -a {{ images_path }}/{{ inventory_hostname }}/{{ vcin_qcow2_file_name }} -m {{ guestfish_mount }} chown 0 0 /root/.ssh/authorized_keys
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Set the mode for the authorized_keys file on the VCIN image
  command: guestfish --rw -a {{ images_path }}/{{ inventory_hostname }}/{{ vcin_qcow2_file_name }} -m {{ guestfish_mount }} chmod 0640 /root/.ssh/authorized_keys
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: "Define new VCIN VM"
  virt: name="{{ inventory_hostname }}"
        command=define
        xml="{{ lookup('template', 'vcin.xml.j2') }}"
        uri=qemu:///system
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: "Run VCIN VM"
  virt: name="{{ inventory_hostname }}"
        state=running
        uri=qemu:///system
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"
