---
- name: Pull facts on target_server
  setup: gather_subset=!all
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: List the Virtual Machines on target_server
  virt: command=list_vms
  register: virt_vms
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Shutdown/Destroy Current vsd node(s)
  include_role:
    name: vsd-destroy
  vars:
    preserve_vsd_for_rollback: True
    rollback: True

- name: Find VSD backup folder
  shell: ls "{{ images_path }}" | grep "{{ inventory_hostname }}.backup.*"
  register: vsd_backup_dir
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- debug: var=vsd_backup_dir.stdout verbosity=1
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Move the the vsd backup directory to vsd directory
  command: "cp -R {{ images_path }}/{{ vsd_backup_dir.stdout }} {{ images_path }}/{{ inventory_hostname }}"
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Define VSD vm with KVM XML config file from backup
  virt:
    name: "{{ inventory_hostname }}"
    command: define
    xml: "{{ lookup('template', '{{ images_path }}/{{ inventory_hostname }}/{{ inventory_hostname }}.xml') }}" 
    uri: qemu:///system
  register: vsd_xml
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: "Run backed up VSD VM"
  virt: name="{{ inventory_hostname }}"
        state=running
        uri=qemu:///system
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Wait for VSD ssh to be ready
  local_action:
    module: wait_for
    port: "22"
    host: "{{ mgmt_ip }}"
    search_regex: OpenSSH
    delay: 1

- block:
  - name: Get monit summary for all process on VSD
    vsd_monit:
      state: summary
    register: proc_list
    remote_user: "root"
  
  - name: wait for VSD common , core and stats services to become running
    monit_waitfor_service:
      name: "{{ item }}"
      timeout_seconds: 1200
      test_interval_seconds: 30
    with_items: "{{ proc_list['state'].keys() }}"
    remote_user: "root"
  
  - name: Disable maintainance mode on all l3/l2 domains
    vsd_maintainance:
      vsd_auth:
        "{{ vsd_auth }}"
      state: disabled
    register: mode_status
    delegate_to: 127.0.0.1
  
  - name: Print vsd maintainance mode output when verbosity >= 1
    debug: var=mode_status verbosity=1
  
  - name: Clean known_hosts of VSC 1 on "{{ target_server }}"
    command: ssh-keygen -R "{{  groups['vscs'][0] }}" -f /root/.ssh/known_hosts
    delegate_to: "{{ ansible_deployment_host }}"
    remote_user: "{{ ansible_sudo_username }}"
  
  - name: Clean known_hosts of VSC 2 on "{{ target_server }}"
    command: ssh-keygen -R "{{  groups['vscs'][1] }}" -f /root/.ssh/known_hosts
    delegate_to: "{{ ansible_deployment_host }}"
    remote_user: "{{ ansible_sudo_username }}"
  
  - name: shut/noshut vswitch controller on vsc1 after disabling VSD maintenance mode
    sros_config:
      lines:
          - configure vswitch-controller shutdown
          - configure vswitch-controller no shutdown
      provider:
        host: "{{ groups['vscs'][0] }}"
        username: "{{ vsc_user }}"
        password: "{{ vsc_password }}"
        transport: cli
    register: vsc1_command_status
    delegate_to: "{{ ansible_deployment_host }}"
    remote_user: "{{ ansible_sudo_username }}"
                                                                     
  - debug: var=vsc1_command_statusa verbosity=1
  
  - name: shut/noshut vswitch controller on vsc2 after disabling VSD maintenance mode
    sros_config:
      lines:
          - configure vswitch-controller shutdown
          - configure vswitch-controller no shutdown
      provider:
        host: "{{ groups['vscs'][1] }}"
        username: "{{ vsc_user }}"
        password: "{{ vsc_password }}"
        transport: cli
    register: vsc2_command_status verbosity=1
    delegate_to: "{{ ansible_deployment_host }}"
    remote_user: "{{ ansible_sudo_username }}"
  
  - debug: var=vsc2_command_status
  when: vsd_sa_or_ha == 'sa'
