---
#TODO update pauses to poll
- name: Query {{ target_server }} facts
  action: setup
  remote_user: "root"

- block:
  - name: Start Perconna cluster on node 1
    shell: "{{ start_perconna }}"
    remote_user: "root"
  when: inventory_hostname == groups['vsds'][0]

- name: Pause for proccesses to start
  pause:
    seconds: 120
  remote_user: "root"

- name: Start vsd common services
  shell: "{{ start_vsd_common }}"
  remote_user: "root"

- name: Pause 120 seconds for vsd common proccesses to start
  pause:
    seconds: 120
  remote_user: "root"

- name: Start vsd core services
  shell: "{{ start_vsd_core }}"
  remote_user: "root"
 
- name: Pause 120 seconds for vsd core proccesses to start
  pause:
    seconds: 120
  remote_user: "root"

- name: Start vsd statistics services 
  shell: "{{ start_stats }}"
  remote_user: "root"

- name: Pause 120 seconds for vsd statistics proccesses to start
  pause:
    seconds: 120
  remote_user: "root"

- block:
  - name: Disable maintainance mode on all l3/l2 domains
    vsd_maintainance:
      vsd_auth:
        "{{ vsd_auth }}"
      state: disabled
    register: mode_status
    delegate_to: 127.0.0.1

  - name: Print vsd maintainance mode output when verbosity >= 1
    debug: var=mode_status verbosity=1

  - name: Clean known_hosts of VSC 1 on "{{ target_server }}"
    command: ssh-keygen -R "{{  groups['vscs'][0] }}" -f /root/.ssh/known_hosts
    delegate_to: "{{ ansible_deployment_host }}"
    remote_user: "{{ ansible_sudo_username }}"

  - name: Clean known_hosts of VSC 2 on "{{ target_server }}"
    command: ssh-keygen -R "{{  groups['vscs'][1] }}" -f /root/.ssh/known_hosts
    delegate_to: "{{ ansible_deployment_host }}"
    remote_user: "{{ ansible_sudo_username }}"

  - name: shut/noshut vswitch controller on vsc1 after disabling VSD maintenance mode
    sros_config:
      lines:
          - configure vswitch-controller shutdown
          - configure vswitch-controller no shutdown
      provider: 
        host: "{{ groups['vscs'][0] }}"
        username: "{{ vsc_user }}"
        password: "{{ vsc_password }}"
        transport: cli 
    register: vsc1_command_status
    delegate_to: "{{ ansible_deployment_host }}"
    remote_user: "{{ ansible_sudo_username }}"

  - debug: var=vsc1_command_statusa verbosity=1

  - name: shut/noshut vswitch controller on vsc2 after disabling VSD maintenance mode
    sros_config:
      lines:
          - configure vswitch-controller shutdown
          - configure vswitch-controller no shutdown
      provider: 
        host: "{{ groups['vscs'][1] }}"
        username: "{{ vsc_user }}"
        password: "{{ vsc_password }}"
        transport: cli 
    register: vsc2_command_status verbosity=1
    delegate_to: "{{ ansible_deployment_host }}"
    remote_user: "{{ ansible_sudo_username }}"

  - debug: var=vsc2_command_status verbosity=1

  - block:
    - name: read saved vsd purge time before upgrade
      command: cat "/tmp/backup-{{ groups['vsd_ha_node1'][0] }}-latest/purge_time"
      register: purge_time_saved
      delegate_to: 127.0.0.1

    - debug: var=purge_time_saved.stdout verbosity=1

    - name: Update gateway purge timer to original value
      config_vsd_system:
        vsd_auth:
          "{{ vsd_auth }}"
        gateway_purge_time: "{{ purge_time_saved.stdout }}"
      register: update_time_status
      delegate_to: 127.0.0.1
    when: vsd_sa_or_ha == "ha"

  when: inventory_hostname == groups['vsds'][2] 
