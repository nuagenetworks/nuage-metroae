---
##TODO: Rewrite the vnsutil role to remove configuration from post deploy
- name: Create dir to hold the keys 
  file: 
    path: "/opt/proxy/config/keys"
    state: directory
  remote_user: "root"

- block:
  - name: Get VSD version
    shell: echo $VSD_VERSION
    register: vsd_version

  - block:
    - name: Download pip installer
      command: curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py

    - name: Execute pip installer
      command: python get-pip.py

    - name: Install pexpect on VSD1 {{ groups['vsds'][0] }}
      pip:
        name: pexpect

    # JvB TODO should default to '' (empty) such that we can use the same logic everywhere
    when: yum_proxy == 'NONE'

  - block:
    - name: Download pip installer through proxy
      command: curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py

    - name: Execute pip installer through proxy
      command: python get-pip.py

    - name: Install pexpect on VSD1 {{ groups['vsds'][0] }} through proxy
      pip:
        name: pexpect

    when: yum_proxy != 'NONE'
    environment:
      http_proxy: "{{ yum_proxy }}"
      https_proxy: "{{ yum_proxy }}"

  - name: Create and transfer certs for VSD 4.0.4
    expect:
      command: "{{ create_certs_404 }}"
      responses:
        (?i)password: "Alcateldc"
    when: "'4.0.4' in vsd_version.stdout"

  - name: Create and transfer certs
    expect:
      command: "{{ create_certs }}"
      responses:
        (?i)password: "Alcateldc"
    when: "'4.0.4' not in vsd_version.stdout"

  delegate_to: "{{ groups['vsds'][0] }}"
  remote_user: "root"

- name: Install supervisord and haproxy
  command: "{{ install_cmd }}"
  remote_user: "root"

- name: Start supervisord
  service: 
    name: supervisord
    state: restarted
  remote_user: "root"

- name: Chkconfig supervisord
  command: chkconfig supervisord on
  remote_user: "root"

- name: Start haproxy
  service:
    name: haproxy
    state: started
  remote_user: "root"

- name: Chkconfig haproxy
  command: chkconfig haproxy on
  remote_user: "root"

- name: Add firewall rules to accept dhcp and dns requests
  lineinfile: 
    insertafter: '<service name="ssh"/>'
    dest: /etc/firewalld/zones/public.xml
    line: "{{ item }}"
  with_items: "{{ firewall_rules }}"
  remote_user: "root"

- name: Restart firewalld
  service:
    name: firewalld
    state: restarted
  remote_user: "root"

- name: Verify if vsc user is connected to the VSD
  command: /opt/ejabberd/bin/ejabberdctl connected_users
  register: proxy_user
  remote_user: root
  delegate_to: "{{ groups['vsds'][0] }}"
  until: proxy_user.stdout.find('proxy') != -1
  retries: 5
  delay: 30
