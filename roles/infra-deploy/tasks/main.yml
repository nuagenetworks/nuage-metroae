---
- name: Get Infra server details from OpenStack
  os_server_facts:
    auth:
      "{{ os_auth }}"
    server: "{{ inventory_hostname }}*"
  register: infra_server
  delegate_to: 127.0.0.1

- name: Set Infra mgmt ip
  set_fact:
    infra_mgmt_ip: "{{ infra_server['ansible_facts']['openstack_servers'][0]['private_v4'] }}"
 
- name: Update /etc/hosts file on ansible host
  lineinfile:
    dest: /etc/hosts
    line: "{{ infra_mgmt_ip }}    {{ inventory_hostname }}"
  delegate_to: 127.0.0.1

- name: Clean known_hosts of Infra's
  command: ssh-keygen -R "{{ infra_mgmt_ip }}" -f /root/.ssh/known_hosts
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: "{{ ansible_sudo_username }}"

- name: Wait for INFRA ssh to be ready
  local_action:
    module: wait_for
    port: "22"
    host: "{{ infra_mgmt_ip }}"
    search_regex: OpenSSH
    delay: 10

- name: Pause for cloud-init {{ inventory_hostname }}
  pause:
    seconds: 10

- name: Add nameserver
  command: echo "{{ dns_server_list[1] }}" >> /etc/resolv.conf
  remote_user: "root"

- name: Install DNS if not present
  yum:
    name: dnsmasq
    state: latest
  remote_user: "root"

- name: Configure dnsmasq
  template:
    src: "dnsmasq.conf.j2"
    dest: "/etc/dnsmasq.conf"
  remote_user: "root"

- name: Start the DNS service
  command: service dnsmasq start
  remote_user: "root"

- name: Enable the DNS service
  command: chkconfig dnsmasq on
  remote_user: "root"

- name: Install NTP if not present
  yum:
    name: ntp
    state: latest
  remote_user: "root"

- name: Delete the localtime file
  file:
    path: /etc/localtime
    state: absent
  remote_user: "root"

- name: Create the localtime symlink
  file:
    src: /usr/share/zoneinfo/US/Pacific
    dest: /etc/localtime
    state: link
  remote_user: "root"

- name: Remove old NTP servers
  lineinfile:
    dest: /etc/ntp.conf
    regexp: "^server"
    state: absent
  remote_user: "root"

- name: Configure NTP servers
  lineinfile:
    dest: /etc/ntp.conf
    line: "server {{ item }} iburst"
  with_items: "{{ ntp_server_list }}"
  remote_user: "root"

- name: Stop the ntpd service if running
  command: service ntpd stop
  remote_user: "root"

- name: Manually sync time with ntp server
  command: ntpdate -u "{{ntp_server_list[0]}}"
  remote_user: "root"

- name: Start ntpd
  command: service ntpd start
  remote_user: "root"

- name: check ntp sync state
  shell: ntpstat | awk 'NR==1{print $1}'
  register: sync_status
  until: sync_status.stdout == "synchronised"
  retries: 4
  delay: 5
  ignore_errors: yes
  remote_user: "root"

- name: check ntp sync state
  shell: ntpstat | awk 'NR==1{print $1}'
  register: sync_status
  until: sync_status.stdout == "synchronised"
  retries: 4
  delay: 5
  ignore_errors: yes
  remote_user: "root"

- block:
  - name: restart ntp if it hasn't synced yet
    command: service ntpd restart
    remote_user: "root"
  - name: check ntp sync state
    shell: ntpstat | awk 'NR==1{print $1}'
    register: retry_sync_status
    until: retry_sync_status.stdout == "synchronised"
    retries: 4
    delay: 5
    remote_user: "root"
  when: sync_status.stdout != "synchronized"

- name: Enable the NTP service
  command: chkconfig ntpd on
  remote_user: "root"
