---
- name: Query {{ target_server }} facts
  action: setup
  remote_user: root
  delegate_to: "{{ target_server }}"

- name: Include OS-specific variables.
  include_vars: "{{ ansible_os_family }}.yml"

- name: Check target for supported OS
  fail: msg="Unsupported OS family ({{ ansible_os_family }})"
  when: ansible_os_family not in vsd_target_server_os_family_list

- name: Check target memory
  fail: msg="Not enough memory ({{ ansible_memtotal_mb }})"
  when: ansible_memtotal_mb < {{ vsd_target_server_memory_mb_min }}

- name: Check target cores
  fail: msg="Not enough cores ({{ ansible_processor_vcpus }})"
  when: ansible_processor_vcpus < {{ vsd_target_server_vcpus_min }}

- name: Check target bridges
  fail: msg="Required network bridges not found"
  when: ("{{ mgmt_bridge }}" not in ansible_interfaces)

- name: If RedHat, install packages for RedHat OS family distros
  yum: name={{ item }} state=present
  with_items:
   - qemu-kvm
   - libvirt
   - bridge-utils
   - libguestfs-tools
   - libvirt-python
  when: ansible_os_family == "RedHat"
  delegate_to: "{{ target_server }}"
  remote_user: root

- name: If Debian, install packages for Debian OS family distros
  apt: name={{ item }} state=present
  with_items:
   - qemu-kvm
   - libvirt-bin
   - bridge-utils
   - libguestfs-tools
   - python-libvirt
  when: ansible_os_family == "Debian"
  delegate_to: "{{ target_server }}"
  remote_user: root

- name: List the Virtual Machines running on {{ target_server }}
  virt: command=list_vms
  register: virt_vms
  delegate_to: "{{ target_server }}"
  remote_user: root

- block:
  - name: Create libvirt image directory on {{ target_server }}
    file: path={{ images_path }}/{{ inventory_hostname }}
          state=directory
          owner={{ libvirt.user }}
          group={{ libvirt.group }}
    delegate_to: "{{ target_server }}"
    remote_user: root

  - name: Copy the VSD qcow image to virt images directory on {{ target_server }}
    copy: src={{ vsd_qcow2_path }}/{{ vsd_qcow2_file_name }}
          dest={{ images_path }}/{{ inventory_hostname }}
          owner={{ libvirt.user }}
          group={{ libvirt.group }}
    delegate_to: "{{ target_server }}"
    remote_user: root

  - name: Create a temporary copy of the network script for eth0 on {{ target_server }}
    template: src=ifcfg-eth0.j2 backup=no dest={{ images_path }}/{{ inventory_hostname }}/ifcfg-eth0
    delegate_to: "{{ target_server }}"
    remote_user: root

  - name: Copy eth0 network script file to the VSD image on {{ target_server }}
    command: guestfish --rw -a {{ images_path }}/{{ inventory_hostname }}/{{ vsd_qcow2_file_name }} -m /dev/rhel/rootvol copy-in {{ images_path }}/{{ inventory_hostname }}/ifcfg-eth0 /etc/sysconfig/network-scripts/
    delegate_to: "{{ target_server }}"
    remote_user: root

  - name: Remove temporary copy of eth0 network script
    file: path={{ images_path }}/{{ inventory_hostname }}/ifcfg-eth0 state=absent
    delegate_to: "{{ target_server }}"
    remote_user: root

  - name: Set the owner and group on the eth0 network script file in the VSD image
    command: guestfish --rw -a {{ images_path }}/{{ inventory_hostname }}/{{ vsd_qcow2_file_name }} -m /dev/rhel/rootvol chown 0 0 /etc/sysconfig/network-scripts/ifcfg-eth0
    delegate_to: "{{ target_server }}"
    remote_user: root

  - name: Create a temporary copy of the syscfg network file on {{ target_server }}
    template: src=network.j2 backup=no dest={{ images_path }}/{{ inventory_hostname }}/network
    delegate_to: "{{ target_server }}"
    remote_user: root

  - name: Copy network file to the VSD image
    command: guestfish --rw -a {{ images_path }}/{{ inventory_hostname }}/{{ vsd_qcow2_file_name }} -m /dev/rhel/rootvol copy-in {{ images_path }}/{{ inventory_hostname }}/network /etc/sysconfig/
    delegate_to: "{{ target_server }}"
    remote_user: root

  - name: Remove temporary copy of network file
    file: path={{ images_path }}/{{ inventory_hostname }}/network state=absent
    delegate_to: "{{ target_server }}"
    remote_user: root

  - name: Set the owner and group for the network hostname file on the VSD image
    command: guestfish --rw -a {{ images_path }}/{{ inventory_hostname }}/{{ vsd_qcow2_file_name }} -m /dev/rhel/rootvol chown 0 0 /etc/sysconfig/network
    delegate_to: "{{ target_server }}"
    remote_user: root

  - name: Create the directory /root/.ssh for authorized_keys
    command: guestfish --rw -a {{ images_path }}/{{ inventory_hostname }}/{{ vsd_qcow2_file_name }} -m /dev/rhel/rootvol mkdir-mode /root/.ssh 0700
    delegate_to: "{{ target_server }}"
    remote_user: root

  - name: Set the owner and group for the /root/.ssh directory on the VSD image
    command: guestfish --rw -a {{ images_path }}/{{ inventory_hostname }}/{{ vsd_qcow2_file_name }} -m /dev/rhel/rootvol chown 0 0 /root/.ssh
    delegate_to: "{{ target_server }}"
    remote_user: root

  - name: Get the public key for the current user
    local_action: command cat ~/.ssh/id_rsa.pub
    register: current_user_ssh_key

  - name: Create a temporary copy of the authorized_keys file
    template: src=authorized_keys.j2 backup=no dest={{ images_path }}/{{ inventory_hostname }}/authorized_keys
    delegate_to: "{{ target_server }}"
    remote_user: root

  - name: Copy authorized_keys file to the VSD image
    command: guestfish --rw -a {{ images_path }}/{{ inventory_hostname }}/{{ vsd_qcow2_file_name }} -m /dev/rhel/rootvol copy-in {{ images_path }}/{{ inventory_hostname }}/authorized_keys /root/.ssh/
    delegate_to: "{{ target_server }}"
    remote_user: root

  - name: Remove temporary copy of authorized_keys file
    file: path={{ images_path }}/{{ inventory_hostname }}/authorized_keys state=absent
    delegate_to: "{{ target_server }}"
    remote_user: root

  - name: Set the owner and group for the authorized_keys file on the VSD image
    command: guestfish --rw -a {{ images_path }}/{{ inventory_hostname }}/{{ vsd_qcow2_file_name }} -m /dev/rhel/rootvol chown 0 0 /root/.ssh/authorized_keys
    delegate_to: "{{ target_server }}"
    remote_user: root

  - name: Set the mode for the authorized_keys file on the VSD image
    command: guestfish --rw -a {{ images_path }}/{{ inventory_hostname }}/{{ vsd_qcow2_file_name }} -m /dev/rhel/rootvol chmod 0640 /root/.ssh/authorized_keys
    delegate_to: "{{ target_server }}"
    remote_user: root

  - name: "Define new VSD VM"
    virt: name="{{ inventory_hostname }}"
          command=define
          xml="{{ lookup('template', 'vsd.xml.j2') }}"
          uri=qemu:///system
    delegate_to: "{{ target_server }}"
    remote_user: root
  when: inventory_hostname not in virt_vms.list_vms

- name: "Run VSD VM"
  virt: name="{{ inventory_hostname }}"
        state=running
        uri=qemu:///system
  delegate_to: "{{ target_server }}"
  remote_user: root
