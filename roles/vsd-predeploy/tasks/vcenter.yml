---
- block:
  - name: Verify that upgrade_vmname is defined if this is an upgrade
    assert:
      that: "upgrade_vmname is defined"
      msg: "upgrade_vmname is required for upgrade"
  - name: Set local variable with upgrade_vmname
    set_fact:
      vm_name: "{{ upgrade_vmname }}"
  when: nuage_upgrade | default( False )

- block:
  - name: Verify that vmname is defined
    assert:
      that: "vmname is defined"
      msg: "vmname is required for vsd_predeploy"
  - name: Set local variable with vmname
    set_fact:
      vm_name: "{{ vmname }}"
  when: not nuage_upgrade | default( False )

- name: Gathering info on VM
  connection: local
  vmware_guest:
    hostname: "{{ target_server }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    name: "{{ vm_name }}"
    validate_certs: no
    state: gatherfacts
  register: vsd_vm_facts
  ignore_errors: yes

- debug: var=vsd_vm_facts verbosity=1

- name: Verify the VSD VM does not exist
  assert:
    that: "vsd_vm_facts.failed is defined"
    msg: "VM {{ vm_name }} already exists, quiting"

- name: Deploy VSD Image on vCenter
  connection: local
  command: >
    {{ vcenter.ovftool }}
    --acceptAllEulas
    --noSSLVerify
    --powerOn
    --machineOutput
    -dm=thin
    -ds={{ vcenter.datastore }}
    -n={{ vm_name }}
    --net:"VM Network={{ mgmt_bridge }}"
    "{{ vsd_ova_path }}/{{ vsd_ova_file_name }}"
    vi://'{{ vcenter.username | urlencode }}':'{{ vcenter.password | urlencode }}'@{{ target_server }}/{{ vcenter.datacenter }}/host/{{ vcenter.cluster }}

- block:
  - name: Waiting until VMware tools becomes available
    connection: local
    vmware_guest_tools_wait:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      name: "{{ vm_name }}"
      datacenter: "{{ vcenter.datacenter }}"
      validate_certs: no
    register: vsd_vm_facts
  
  - debug: var=vsd_vm_facts verbosity=1
  when: ansible_version.full | version_compare('2.3', '>=')

- block:
  - name: Waiting 120 seconds to make sure the VSD is up
    pause:
      seconds: 120
 
  - name: Gathering info on VM
    connection: local
    vmware_guest:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      name: "{{ vm_name }}"
      datacenter: "{{ vcenter.datacenter }}"
      state: gatherfacts
      validate_certs: no
    register: vsd_vm_facts
  
  - debug: var=vsd_vm_facts verbosity=1

  - name: Verify the Stats VM came up correctly           
    assert:             
      that:             
        - "vsd_vm_facts.instance.hw_guest_id is defined"              
        - "not vsd_vm_facts.instance.hw_guest_id is none"             
        - "not vsd_vm_facts.instance.hw_guest_id == ''"               
      msg: "VSD VM {{ inventory_hostname }} did not come up after two minutes"
  when: ansible_version.full | version_compare('2.3', '<')

- name: Writing eth0 network script file to the VSD VM
  connection: local
  vmware_vm_shell:
    hostname: "{{ target_server }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    cluster: "{{ vcenter.cluster }}"
    validate_certs: no
    vm_id: "{{ vm_name }}"
    vm_username: "root"
    vm_password: "Alcateldc"
    vm_shell: "/usr/bin/echo"
    vm_shell_args: " '{{ lookup('template', 'ifcfg-eth0.j2') }}' > /etc/sysconfig/network-scripts/ifcfg-eth0"

- name: Set the owner and group on the eth0 network script file in the VSD VM
  connection: local
  vmware_vm_shell:
    hostname: "{{ target_server }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    cluster: "{{ vcenter.cluster }}"
    validate_certs: no
    vm_id: "{{ vm_name }}"
    vm_username: "root"
    vm_password: "Alcateldc"
    vm_shell: "/usr/bin/chown"
    vm_shell_args: " 0 0 /etc/sysconfig/network-scripts/ifcfg-eth0"

- name: Writing network file to the VSD VM
  connection: local
  vmware_vm_shell:
    hostname: "{{ target_server }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    cluster: "{{ vcenter.cluster }}"
    validate_certs: no
    vm_id: "{{ vm_name }}"
    vm_username: "root"
    vm_password: "Alcateldc"
    vm_shell: "/usr/bin/echo"
    vm_shell_args: " '{{ lookup('template', 'network.j2') }}' > /etc/sysconfig/network"

- name: Set the owner and group on the network file in the VSD VM
  connection: local
  vmware_vm_shell:
    hostname: "{{ target_server }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    cluster: "{{ vcenter.cluster }}"
    validate_certs: no
    vm_id: "{{ vm_name }}"
    vm_username: "root"
    vm_password: "Alcateldc"
    vm_shell: "/usr/bin/chown"
    vm_shell_args: " 0 0 /etc/sysconfig/network"

- name: Writing hostname file to the VSD VM
  connection: local
  vmware_vm_shell:
    hostname: "{{ target_server }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    cluster: "{{ vcenter.cluster }}"
    validate_certs: no
    vm_id: "{{ vm_name }}"
    vm_username: "root"
    vm_password: "Alcateldc"
    vm_shell: "/usr/bin/echo"
    vm_shell_args: " '{{ lookup('template', 'hostname.j2') }}' > /etc/hostname"

- name: Set the owner and group on the hostname file in the VSD VM
  connection: local
  vmware_vm_shell:
    hostname: "{{ target_server }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    cluster: "{{ vcenter.cluster }}"
    validate_certs: no
    vm_id: "{{ vm_name }}"
    vm_username: "root"
    vm_password: "Alcateldc"
    vm_shell: "/usr/bin/chown"
    vm_shell_args: " 0 0 /etc/hostname"

- name: Create the directory /root/.ssh for authorized_keys on the VSD VM
  connection: local
  vmware_vm_shell:
    hostname: "{{ target_server }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    cluster: "{{ vcenter.cluster }}"
    validate_certs: no
    vm_id: "{{ vm_name }}"
    vm_username: "root"
    vm_password: "Alcateldc"
    vm_shell: "/usr/bin/mkdir"
    vm_shell_args: " -p /root/.ssh"

- name: Set the owner and group for the /root/.ssh directory in the VSD VM
  connection: local
  vmware_vm_shell:
    hostname: "{{ target_server }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    cluster: "{{ vcenter.cluster }}"
    validate_certs: no
    vm_id: "{{ vm_name }}"
    vm_username: "root"
    vm_password: "Alcateldc"
    vm_shell: "/usr/bin/chown"
    vm_shell_args: " 0 0 /root/.ssh"

- name: Get the public key for the current user
  local_action: command cat "{{ user_ssh_pub_key }}"
  register: current_user_ssh_key

- name: Writing authorized_keys to the VSD VM
  connection: local
  vmware_vm_shell:
    hostname: "{{ target_server }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    cluster: "{{ vcenter.cluster }}"
    validate_certs: no
    vm_id: "{{ vm_name }}"
    vm_username: "root"
    vm_password: "Alcateldc"
    vm_shell: "/usr/bin/echo"
    vm_shell_args: " '{{ lookup('template', 'authorized_keys.j2') }}' > /root/.ssh/authorized_keys"

- name: Set the mode on the authorized_keys file in the VSD VM
  connection: local
  vmware_vm_shell:
    hostname: "{{ target_server }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    cluster: "{{ vcenter.cluster }}"
    validate_certs: no
    vm_id: "{{ vm_name }}"
    vm_username: "root"
    vm_password: "Alcateldc"
    vm_shell: "/usr/bin/chmod"
    vm_shell_args: " 0640 /root/.ssh/authorized_keys"

- name: Reboot VSD VM
  connection: local
  vmware_vm_shell:
    hostname: "{{ target_server }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    cluster: "{{ vcenter.cluster }}"
    validate_certs: no
    vm_id: "{{ vm_name }}"
    vm_username: "root"
    vm_password: "Alcateldc"
    vm_shell: "/usr/sbin/reboot"
