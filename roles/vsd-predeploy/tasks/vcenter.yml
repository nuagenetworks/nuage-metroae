---
- block:
  - name: Verify that upgrade_vmname is defined if this is an upgrade
    assert:
      that: "upgrade_vmname is defined"
      msg: "upgrade_vmname is required for upgrade"

  - name: Set local variable with upgrade_vmname
    set_fact:
      vm_name: "{{ upgrade_vmname }}"
  when: nuage_upgrade | default( False )

- block:
  - name: Verify that vmname is defined
    assert:
      that: "vmname is defined"
      msg: "vmname is required for vsd_predeploy"

  - name: Set local variable with vmname
    set_fact:
      vm_name: "{{ vmname }}"
  when: not nuage_upgrade | default( False )

- include_role:
    name: check-node-running

- name: Display if skipping predeploy
  debug:
    msg:
      - "****************************************************"
      - "Skipping VSD predeploy because it is already present"
      - "****************************************************"
  when: node_present

- block:

  - name: Configure vCenter path
    set_fact:
      vcenter_path: "vi://'{{ vcenter.username | urlencode }}':'{{ vcenter.password | urlencode }}'@{{ target_server }}/{{ vcenter.datacenter }}/host/{{ vcenter.cluster }}"

  - name: Update vCenter path if resource pool is configured
    set_fact:
      vcenter_path: "vi://'{{ vcenter.username | urlencode }}':'{{ vcenter.password | urlencode }}'@{{ target_server }}/{{ vcenter.datacenter }}/host/{{ vcenter.cluster }}/Resources/{{ vcenter.resource_pool | urlencode }}"
    when: vcenter.resource_pool != 'NONE'

  - name: Deploy VM image on vCenter
    connection: local
    command: >
      {{ vcenter.ovftool }}
      --acceptAllEulas
      --noSSLVerify
      --powerOn
      --machineOutput
      -dm=thin
      -ds={{ vcenter.datastore }}
      -n={{ vm_name }}
      --net:"VM Network={{ mgmt_bridge }}"
      "{{ ova_path }}/{{ ova_file_name }}"
      {{ vcenter_path }}

  - name: Waiting until VMware tools becomes available
    connection: local
    vmware_guest_tools_wait:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      name: "{{ vm_name }}"
      datacenter: "{{ vcenter.datacenter }}"
      validate_certs: no
    register: vm_facts

  - debug: var=vm_facts verbosity=1

  - name: Get Facts of VM
    vmware_vm_facts:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
    delegate_to: localhost
    register: vm_list

  - name: Verify that VM exists on Host
    assert:
      that: "vm_name in vm_list.virtual_machines"
      msg: "Desired VM does not exist"
        
  - name: Set VM UUID
    set_fact:
      uuid: "{{ vm_list.virtual_machines[vm_name]['uuid'] }}"
  
  - debug: var=uuid
    
  - name: Turn on autostart
    connection: local
    vmware_autostart:
      name: "{{ vm_name }}"
      uuid: "{{ uuid }}"
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      state: enable
           
  - name: Disabling cloud-init
    connection: local
    vmware_vm_shell:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      datacenter: "{{ vcenter.datacenter }}"
      cluster: "{{ vcenter.cluster }}"
      validate_certs: no
      vm_id: "{{ vm_name }}"
      vm_username: "{{ vsd_default_username }}"
      vm_password: "{{ vsd_default_password }}"
      vm_shell: "/bin/systemctl"
      vm_shell_args: " {{ item }}"
    with_items:
      - "stop cloud-init"
      - "disable cloud-init"
      - "stop cloud-init-local"
      - "disable cloud-init-local"
      - "stop cloud-init-config"
      - "disable cloud-config"
      - "stop cloud-final"
      - "disable cloud-final"

  - name: Writing cloud-init disable file in the VM
    connection: local
    vmware_vm_shell:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      datacenter: "{{ vcenter.datacenter }}"
      cluster: "{{ vcenter.cluster }}"
      validate_certs: no
      vm_id: "{{ vm_name }}"
      vm_username: "{{ vsd_default_username }}"
      vm_password: "{{ vsd_default_password }}"
      vm_shell: "/bin/touch"
      vm_shell_args: " /etc/cloud/cloud-init.disabled"

  - name: Set the owner and group on the cloud-init disable file in the VM
    connection: local
    vmware_vm_shell:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      datacenter: "{{ vcenter.datacenter }}"
      cluster: "{{ vcenter.cluster }}"
      validate_certs: no
      vm_id: "{{ vm_name }}"
      vm_username: "{{ vsd_default_username }}"
      vm_password: "{{ vsd_default_password }}"
      vm_shell: "/usr/bin/chown"
      vm_shell_args: " 0 0 /etc/cloud/cloud-init.disabled"

  - name: Writing eth0 network script file to the VM
    connection: local
    vmware_vm_shell:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      datacenter: "{{ vcenter.datacenter }}"
      cluster: "{{ vcenter.cluster }}"
      validate_certs: no
      vm_id: "{{ vm_name }}"
      vm_username: "{{ vsd_default_username }}"
      vm_password: "{{ vsd_default_password }}"
      vm_shell: "/usr/bin/echo"
      vm_shell_args: " '{{ lookup('template', 'ifcfg-eth0.j2') }}' > /etc/sysconfig/network-scripts/ifcfg-eth0"

  - name: Set the owner and group on the eth0 network script file in the VM
    connection: local
    vmware_vm_shell:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      datacenter: "{{ vcenter.datacenter }}"
      cluster: "{{ vcenter.cluster }}"
      validate_certs: no
      vm_id: "{{ vm_name }}"
      vm_username: "{{ vsd_default_username }}"
      vm_password: "{{ vsd_default_password }}"
      vm_shell: "/usr/bin/chown"
      vm_shell_args: " 0 0 /etc/sysconfig/network-scripts/ifcfg-eth0"

  - name: Writing network file to the VM
    connection: local
    vmware_vm_shell:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      datacenter: "{{ vcenter.datacenter }}"
      cluster: "{{ vcenter.cluster }}"
      validate_certs: no
      vm_id: "{{ vm_name }}"
      vm_username: "{{ vsd_default_username }}"
      vm_password: "{{ vsd_default_password }}"
      vm_shell: "/usr/bin/echo"
      vm_shell_args: " '{{ lookup('template', 'network.j2') }}' > /etc/sysconfig/network"

  - name: Set the owner and group on the network file in the VM
    connection: local
    vmware_vm_shell:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      datacenter: "{{ vcenter.datacenter }}"
      cluster: "{{ vcenter.cluster }}"
      validate_certs: no
      vm_id: "{{ vm_name }}"
      vm_username: "{{ vsd_default_username }}"
      vm_password: "{{ vsd_default_password }}"
      vm_shell: "/usr/bin/chown"
      vm_shell_args: " 0 0 /etc/sysconfig/network"

  - name: Writing hostname file to the VM
    connection: local
    vmware_vm_shell:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      datacenter: "{{ vcenter.datacenter }}"
      cluster: "{{ vcenter.cluster }}"
      validate_certs: no
      vm_id: "{{ vm_name }}"
      vm_username: "{{ vsd_default_username }}"
      vm_password: "{{ vsd_default_password }}"
      vm_shell: "/usr/bin/echo"
      vm_shell_args: " '{{ lookup('template', 'hostname.j2') }}' > /etc/hostname"

  - name: Set the owner and group on the hostname file in the VM
    connection: local
    vmware_vm_shell:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      datacenter: "{{ vcenter.datacenter }}"
      cluster: "{{ vcenter.cluster }}"
      validate_certs: no
      vm_id: "{{ vm_name }}"
      vm_username: "{{ vsd_default_username }}"
      vm_password: "{{ vsd_default_password }}"
      vm_shell: "/usr/bin/chown"
      vm_shell_args: " 0 0 /etc/hostname"

  - name: Create the directory /root/.ssh for authorized_keys on the VM
    connection: local
    vmware_vm_shell:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      datacenter: "{{ vcenter.datacenter }}"
      cluster: "{{ vcenter.cluster }}"
      validate_certs: no
      vm_id: "{{ vm_name }}"
      vm_username: "{{ vsd_default_username }}"
      vm_password: "{{ vsd_default_password }}"
      vm_shell: "/usr/bin/mkdir"
      vm_shell_args: " -p /root/.ssh"

  - name: Set the owner and group for the /root/.ssh directory in the VM
    connection: local
    vmware_vm_shell:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      datacenter: "{{ vcenter.datacenter }}"
      cluster: "{{ vcenter.cluster }}"
      validate_certs: no
      vm_id: "{{ vm_name }}"
      vm_username: "{{ vsd_default_username }}"
      vm_password: "{{ vsd_default_password }}"
      vm_shell: "/usr/bin/chown"
      vm_shell_args: " 0 0 /root/.ssh"

  - name: Get the public key for the current user
    local_action: command cat "{{ user_ssh_pub_key }}"
    register: current_user_ssh_key

  - name: Writing authorized_keys to the VM
    connection: local
    vmware_vm_shell:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      datacenter: "{{ vcenter.datacenter }}"
      cluster: "{{ vcenter.cluster }}"
      validate_certs: no
      vm_id: "{{ vm_name }}"
      vm_username: "{{ vsd_default_username }}"
      vm_password: "{{ vsd_default_password }}"
      vm_shell: "/usr/bin/echo"
      vm_shell_args: " '{{ lookup('template', 'authorized_keys.j2') }}' > /root/.ssh/authorized_keys"

  - name: Set the mode on the authorized_keys file in the VM
    connection: local
    vmware_vm_shell:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      datacenter: "{{ vcenter.datacenter }}"
      cluster: "{{ vcenter.cluster }}"
      validate_certs: no
      vm_id: "{{ vm_name }}"
      vm_username: "{{ vsd_default_username }}"
      vm_password: "{{ vsd_default_password }}"
      vm_shell: "/usr/bin/chmod"
      vm_shell_args: " 0640 /root/.ssh/authorized_keys"

  - name: Reboot VM
    connection: local
    vmware_vm_shell:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      datacenter: "{{ vcenter.datacenter }}"
      cluster: "{{ vcenter.cluster }}"
      validate_certs: no
      vm_id: "{{ vm_name }}"
      vm_username: "{{ vsd_default_username }}"
      vm_password: "{{ vsd_default_password }}"
      vm_shell: "/usr/sbin/reboot"

  when: not node_present
