---

# Install Pre-Requisites
- name: Pull facts of localhost
  connection: local
  action: setup
  remote_user: "root"

- name: get the username running the deploy
  local_action: command whoami
  register: username_on_the_host

- debug: var=username_on_the_host

- name: Check if python-pip is installed
  include_role:
    name: common
    tasks_from: check-for-package
  vars:
    package_name: python-pip
  delegate_to: localhost

- name: Get current version of VSD software
  command: echo $VSD_VERSION
  register: vsd_version
  remote_user: "root"

- name: Print vsd_version output when verbosity >= 1
  debug: var=vsd_version verbosity=1

- name: Set name of backup directory
  set_fact: vsdbackup_dir="{{metro_backup_root}}/backup-{{ inventory_hostname }}-{{ ansible_date_time.iso8601_basic_short }}/"

- name: Create the backup directory
  file:
    path: "{{ vsdbackup_dir }}"
    state: directory
    mode: 0755
  delegate_to: localhost
  run_once: true

- block:
  - name: Enable maintainance mode on all l3/l2 domains
    vsd_maintainance:
      vsd_auth:
        "{{ vsd_auth }}"
      state: enabled
      api_version: "{{ vsd_version.stdout }}"
    register: mode_status
    delegate_to: localhost

  - name: Print vsd maintainance mode output when verbosity >= 1
    debug: var=mode_status verbosity=1
  when: inventory_hostname in groups['vsds']

- name: Reading the status of the DB upgrade directory
  stat:
    path: "/var/lib/mysql/nuageDbUpgrade/"
  register: db_dir
  remote_user: root

- name: Verify that DB upgrade directory exists
  assert:
    that:
      - db_dir.stat.exists == True
    msg: "nuageDbUpgrade dir does not exist"

- name: Check that the database is properly identified by MySQL
  shell: "mysql -e 'show databases;' | grep nuageDbUpgrade"
  register: db
  remote_user: root

- name: Verify the upgrade database name
  assert:
    that:
      - "'nuageDbUpgrade' == db.stdout"
    msg: "Could not find nuageDbUpgrade database in mysql"

- block:
  - name: Read gateway purge timer
    config_vsd_system:
      vsd_auth:
        "{{ vsd_auth }}"
      get_gateway_purge_time: True
      api_version: "{{ vsd_version.stdout }}"
    register: update_time_status
    delegate_to: localhost

  - debug: var=update_time_status verbosity=1

  - name: Create a file with purge timer value to be restored after VSD upgrade
    copy:
      content: "{{ update_time_status.result }}"
      dest: "{{ vsdbackup_dir }}/{{ inventory_hostname }}_purge_time"
    delegate_to: localhost

  #TODO move updating gateway purge timer from vsd-dbbackup
  - name: Update gateway purge timer
    config_vsd_system:
      vsd_auth:
        "{{ vsd_auth }}"
      gateway_purge_time: 86400
      api_version: "{{ vsd_version.stdout }}"
    register: update_time_status
    delegate_to: localhost

  - name: Print update time output when verbosity >= 1
    debug: var=update_time_status verbosity=1
  when: inventory_hostname in groups['vsds']

- name: Purge the alarms and event history from database
  shell: "{{ item }}"
  with_items: "{{ purge_cmd }}"
  remote_user: root

- name: Copy the VSD migration script ISO to VSD's temp directory
  copy: src={{ vsd_migration_iso_path }}/{{ vsd_migration_iso_file_name }}
      dest=/tmp/
  remote_user: root

- name: Register target directory status
  stat: path="/media/CDROM"
  register: cdrom_dir
  remote_user: root

- name: Create target directory to mount ISO if necessary
  file: name="/media/CDROM" state=directory mode=0775
  when: cdrom_dir.stat.exists == false
  remote_user: root

- name: mount ISO as loop back device
  shell: "mount -o loop /tmp/{{ vsd_migration_iso_file_name }} /media/CDROM/"
  register: mount_out
  remote_user: "root"

- debug: var=mount_out verbosity=1

- name: List VSD-related mounts
  shell: "mount | grep VSD | grep /media/CDROM"
  register: mount_file
  remote_user: root

- name: Print mount output when verbosity >= 1
  debug: var=mount_file verbosity=1

- name: Verify that the ISO is mounted
  assert:
    that:
      - "'.iso' in mount_file.stdout"
    msg: "Did not find iso file in mount path"

- name: Run backup script from mount location
  shell: "{{ backup_cmd }}"
  remote_user: root

- name: Umount the ISO
  shell: "umount /media/CDROM"
  remote_user: root

- name: Find files created in {{ vsdbackup_dir }}
  find:
    path: "{{ vsdbackup_dir }}"
    patterns: "{{ item }}"
  with_items:
    - "myappconfiguration-*.gz"
    - "mycertificate-*.gz"
    - "mydatabase-*.gz"
    - "vsdbackup-*.log"
  remote_user: root
  register: lst_files

- debug: var="lst_files"

- name: Verify files found in {{ vsdbackup_dir }}
  assert:
    that: "{{ item.matched }} > 0"
    msg: "Could not find file {{ item.item }}"
  with_items: "{{ lst_files.results }}"

- name: Create backup dir
  file:
    dest: "{{ vsdbackup_dir }}"
    state: directory
    owner: "{{ username_on_the_host.stdout }}"
    group: "{{ username_on_the_host.stdout }}"
  delegate_to: localhost

- name: Fetch files from vsd and copy them to backup folder on backup_machine
  fetch:
    src: "{{ item.files[0].path }}"
    dest: "{{ vsdbackup_dir }}"
    flat: yes
    validate_checksum: false
  become: false
  with_items: "{{ lst_files.results }}"
  remote_user: root

- name: Create symbolic link to backup location
  file: dest="{{metro_backup_root}}/backup-{{ inventory_hostname }}-latest" src="{{  vsdbackup_dir }}"  state=link
  delegate_to: localhost
