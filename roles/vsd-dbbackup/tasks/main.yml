---
- block:
  - name: Enabled maintainance mode on all l3/l2 domains
    vsd_maintainance:
      vsd_auth:
        "{{ vsd_auth }}"
      state: enabled
    register: mode_status
    delegate_to: 127.0.0.1

  - name: Print vsd maintainance mode output when verbosity >= 1
    debug: var=mode_status verbosity=1

  - name: Reading the status of the DB upgrade directory
    stat:
      path: "/var/lib/mysql/nuageDbUpgrade/"
    register: db_dir
    remote_user: root
  
  - name: Verify that DB upgrade directory exists
    assert: 
      that: 
        - db_dir.stat.exists == True
      msg: "nuageDbUpgrade dir does not exist"

  - name: Check that the database is properly identified by MySQL
    shell: "mysql -e 'show databases;' | grep nuageDbUpgrade"
    register: db
    remote_user: root
  
  - name: Verify the upgrade database name
    assert: 
      that: 
        - "'nuageDbUpgrade' == db.stdout"
      msg: "Could not find nuageDbUpgrade database in mysql"

  - name: Update gateway purge timer 
    config_vsd_system:
      vsd_auth:
        "{{ vsd_auth }}"
      gateway_purge_time: 86400
    register: update_time_status
    delegate_to: 127.0.0.1
 
  - name: Print update time output when verbosity >= 1
    debug: var=update_time_status verbosity=1

  - name: Purge the alarms and event history from database
    shell: "{{ item }}"
    with_items: "{{ purge_cmd }}"
    remote_user: root
  
  - name: List VSD-related mounts
    shell: "mount | grep VSD | grep /media/CDROM"
    register: mount_file
    remote_user: root

  - name: Print mount output when verbosity >= 1
    debug: var=mount_file verbosity=1

  - name: Verify that the ISO is mounted
    assert: 
      that:
        - "'.iso' in mount_file.stdout"
      msg: "Did not find iso file in mount path"

  - name: Run backup script from mount location
    shell: "{{ backup_cmd }}"
    remote_user: root
 
  - name: Find files created in /tmp/backup
    find:
      path: "/tmp/backup"
      patterns: "{{ item }}"
    with_items:
      - "myappconfiguration-*.gz"
      - "mycertificate-*.gz"
      - "mydatabase-*.gz" 
    remote_user: root
    register: lst_files

  - name: Verify files found in /tmp/backup
    assert:
      that: "{{ item.matched }} > 0"
      msg: "Could not find file {{ item.item }}"
    with_items: "{{ lst_files.results }}"
  
  #TODO: Update Readme 
  - name: Copy the backup folder to backup_machine
    synchronize:
      src: "/tmp/backup/"
      dest: "/tmp/backup/"
      mode: pull
    remote_user: "{{ ansible_sudo_username }}"
    delegate_to: "{{ ansible_deployment_host }}"
  when: inventory_hostname == groups['vsds'][0]
