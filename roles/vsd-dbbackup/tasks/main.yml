---
- name: Pull facts of localhost
  connection: local
  action: setup

- name: get the username running the deploy
  local_action: command whoami
  register: username_on_the_host

- debug: var=username_on_the_host verbosity=1

- name: Get current version of VSD software
  shell: echo $VSD_VERSION
  register: vsd_version
  remote_user: "{{ vsd_username | default(vsd_default_username) }}"

- debug: var=vsd_version verbosity=1

- name: Set name of backup directory
  set_fact: vsdbackup_dir="{{metro_backup_root}}/backup-{{ inventory_hostname }}-{{ ansible_date_time.iso8601_basic_short }}/"

- name: Create the backup directory
  file:
    path: "{{ vsdbackup_dir }}"
    state: directory
    mode: 0755
  delegate_to: localhost
  run_once: true

- block:
  - name: Enable maintainance mode on all l3/l2 domains
    vsd_maintainance:
      vsd_auth:
        "{{ vsd_auth }}"
      state: enabled
      api_version: "{{ vsd_version.stdout }}"
    register: mode_status
    delegate_to: localhost

  - name: Print vsd maintainance mode output when verbosity >= 1
    debug: var=mode_status verbosity=1
  when: inventory_hostname in groups['vsds']

- name: Read status of the DB upgrade directory and verify it 
  include_role:
    name: common
    tasks_from: vsd-verify-db-status
  tags: vsd

- block:
  - name: Read gateway purge timer
    config_vsd_system:
      vsd_auth:
        "{{ vsd_auth }}"
      get_gateway_purge_time: True
      api_version: "{{ vsd_version.stdout }}"
    register: update_time_status
    delegate_to: localhost

  - debug: var=update_time_status verbosity=1

  - name: Create a file with purge timer value to be restored after VSD upgrade
    copy:
      content: "{{ update_time_status.result }}"
      dest: "{{ vsdbackup_dir }}/purge_time"
    delegate_to: localhost

  #TODO move updating gateway purge timer from vsd-dbbackup
  - name: Update gateway purge timer
    config_vsd_system:
      vsd_auth:
        "{{ vsd_auth }}"
      gateway_purge_time: 86400
      api_version: "{{ vsd_version.stdout }}"
    register: update_time_status
    delegate_to: localhost

  - name: Print update time output when verbosity >= 1
    debug: var=update_time_status verbosity=1
  when: inventory_hostname in groups['vsds']

- block:

  - name: Purge the alarms and event history from database
    shell: "{{ item }}"
    with_items: "{{ purge_cmd }}"

  - name: Copy the VSD migration script ISO to VSD's temp directory
    copy: src={{ vsd_migration_iso_path }}/{{ vsd_migration_iso_file_name }}
        dest=/tmp/

  - name: Register target directory status
    stat: path="/media/CDROM"
    register: cdrom_dir

  - name: Create target directory to mount ISO if necessary
    file: name="/media/CDROM" state=directory mode=0775
    when: cdrom_dir.stat.exists == false

  - name: mount ISO as loop back device
    shell: "mount -o loop /tmp/{{ vsd_migration_iso_file_name }} /media/CDROM/"
    register: mount_out

  - debug: var=mount_out verbosity=1

  - name: List VSD-related mounts
    shell: "mount | grep VSD | grep /media/CDROM"
    register: mount_file

  - name: Print mount output when verbosity >= 1
    debug: var=mount_file verbosity=1

  - name: Verify that the ISO is mounted
    assert:
      that:
        - "'.iso' in mount_file.stdout"
      msg: "Did not find iso file in mount path"

  - name: Run backup script from mount location
    shell: "{{ backup_cmd }}"

  - name: Umount the ISO
    shell: "umount /media/CDROM"

  - name: Find files created in {{ vsdbackup_dir }}
    find:
      path: "{{ vsdbackup_dir }}"
      patterns: "{{ item }}"
    with_items:
      - "myappconfiguration-*.gz"
      - "mycertificate-*.gz"
      - "mydatabase-*.gz"
      - "vsdbackup-*.log"
    register: lst_files

  remote_user: "{{ vsd_username | default(vsd_default_username) }}"
  become: "{{ 'no' if vsd_username | default(vsd_default_username) == 'root' else 'yes' }}"
  vars:
    ansible_become_pass: "{{ vsd_password | default(vsd_default_password) }}"

- debug: var="lst_files"

- name: Verify files found in {{ vsdbackup_dir }}
  assert:
    that: "{{ item.matched }} > 0"
    msg: "Could not find file {{ item.item }}"
  with_items: "{{ lst_files.results }}"

- name: Create backup dir
  file:
    dest: "{{ vsdbackup_dir }}"
    state: directory
    owner: "{{ username_on_the_host.stdout }}"
    group: "{{ username_on_the_host.stdout }}"
  delegate_to: localhost

- name: Fetch files from vsd and copy them to backup folder on backup_machine
  fetch:
    src: "{{ item.files[0].path }}"
    dest: "{{ vsdbackup_dir }}"
    flat: yes
    validate_checksum: false
  become: false
  with_items: "{{ lst_files.results }}"
  remote_user: "{{ vsd_username | default(vsd_default_username) }}"
  become: "{{ 'no' if vsd_username | default(vsd_default_username) == 'root' else 'yes' }}"
  vars:
    ansible_become_pass: "{{ vsd_password | default(vsd_default_password) }}"

- name: Create symbolic link to backup location
  file: dest="{{metro_backup_root}}/backup-{{ groups['vsds'][0] }}-latest" src="{{  vsdbackup_dir }}"  state=link
  delegate_to: localhost
