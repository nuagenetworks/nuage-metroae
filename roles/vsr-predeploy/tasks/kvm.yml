---
- name: Pull facts on target_server {{ target_server }}
  action: setup
  remote_user: '{{ target_server_username }}'
  delegate_to: '{{ target_server }}'

- set_fact:
    vsr_memory: '{{ vmmemory|default(vsr_target_server_memory_gb_min)}}'
    vsr_vcpu:   '{{ vmvcpu|default(vsr_target_server_vcpus_min)}}'
    vsr_target_qcow2_file_path: '{{ images_path }}/{{ vmname }}/{{ inventory_hostname }}.qcow2'
    vsr_target_license_file: '{{ images_path }}/{{ vmname }}/license.txt'

- include: kvm_check_hypervisor.yml

- include: kvm_check_resources.yml

- name: List the Virtual Machines
  virt: command=list_vms
  register: virt_vms
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Verify that the VM is not already running
  assert:
    that: "vmname not in virt_vms.list_vms"
    msg: "{{ vmname }} is already running on {{ target_server }}"

- name: Include OS-specific variables.
  include_vars: "{{ ansible_os_family }}.yml"

- name: Create VSR directory
  file:
    path:  '{{ images_path }}/{{ vmname }}'
    state: directory
    owner: '{{ libvirt.user }}'
    group: '{{ libvirt.group }}'
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- include: kvm_upload_license_file.yml

- include: kvm_deploy_image_file.yml

- name: Get license file content
  command: cat {{ vsr_target_license_file }}
  register: rc_vsr_license_content
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Delete license file
  file:
    path: '{{ vsr_target_license_file }}'
    state: absent
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- set_fact:
    vsr_vm_uuid: '{{ rc_vsr_license_content.stdout.split(" ")[0]}}'

- debug: var=vsr_vm_uuid verbosity=1

- include: kvm_define_vsr_vm.yml

- name: Wait for VSR ssh to be ready
  include_role:
    name: common
    tasks_from: wait-for-ssh
  vars:
    ssh_host: "{{ mgmt_ip }}"
