---
- name: Wait for VSTAT ssh to be ready
  local_action:
    module: wait_for
    port: "22"
    host: "{{ mgmt_ip }}"
    search_regex: OpenSSH
    delay: 1
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Update /etc/hosts file
  blockinfile:
    dest: /etc/hosts
    block: |
      {% for host in groups['vstats']  %}
      {{ hostvars[host]['mgmt_ip'] }}    {{ host }}
      {% endfor %}
  remote_user: "root"

- name: Update /etc/hosts file on {{ vsd_fqdn }}
  blockinfile:
    dest: /etc/hosts
    block: |
      {% for host in groups['vstats']  %}
      {{ hostvars[host]['mgmt_ip'] }}    {{ host }}
      {% endfor %}
  delegate_to: "{{ vsd_fqdn }}"
  remote_user: "root"

- block:
  - name: Generate SSH keys
    shell: ssh-keygen -b 2048 -t rsa -f /root/.ssh/id_rsa -q -N ""
    args:
      creates: /root/.ssh/id_rsa
    remote_user: root
    delegate_to: "{{ item }}"
    with_items: "{{ groups['vstats'] }}"
    run_once: true

  - name: Get generated SSH keys
    shell: cat ~/.ssh/id_rsa.pub
    register: ssh_key_lst
    remote_user: root
    delegate_to: "{{ item }}"
    with_items: "{{ groups['vstats'] }}"
    run_once: true

  - name: Add SSH keys to authorized_keys file
    shell: "echo {{ item[1].stdout }} >> /root/.ssh/authorized_keys"
    delegate_to: "{{ item[0] }}"
    with_nested:
      - "{{ groups['vstats'] }}"
      - "{{ ssh_key_lst.results }}"
    remote_user: root
    run_once: true
  when: not vstat_standalone

- name: Delete the localtime file
  file:
    path: /etc/localtime
    state: absent
  remote_user: "root"

- name: Create the localtime symlink
  file:
    src: /usr/share/zoneinfo/{{ timezone }}
    dest: /etc/localtime
    state: link
  remote_user: "root"

- name: Remove old NTP servers
  lineinfile:
    dest: /etc/ntp.conf
    regexp: "^server"
    state: absent
  remote_user: "root"

- name: Configure NTP servers
  lineinfile:
    dest: /etc/ntp.conf
    line: "server {{ item }} iburst"
  with_items: "{{ ntp_server_list }}"
  remote_user: "root"

- name: Stop the ntpd service if running
  systemd:
    name: ntpd
    state: stopped
  remote_user: "root"

- name: Manually sync time with ntp server
  command: ntpdate -u "{{ntp_server_list[0]}}"
  remote_user: "root"

- name: Start ntpd
  systemd:
    name: ntpd
    state: started
  remote_user: "root"

- name: Enable ntpd on boot
  systemd:
    name: ntpd
    enabled: yes
  remote_user: "root"

- name: check ntp sync state
  shell: ntpstat | awk 'NR==1{print $1}'
  register: sync_status
  until: sync_status.stdout == "synchronised"
  retries: 4
  delay: 5
  ignore_errors: yes
  remote_user: "root"

- block:
  - name: restart ntp if it hasn't synced yet
    systemd:
      name: ntpd
      state: restarted
    remote_user: "root"
  - name: check ntp sync state
    shell: ntpstat | awk 'NR==1{print $1}'
    register: retry_sync_status
    until: retry_sync_status.stdout == "synchronised"
    retries: 4
    delay: 5
    remote_user: "root"
  when: sync_status.stdout != "synchronized"

- block:
  - name: Resolve "{{vsd_fqdn}}"  to ip addr
    shell: host "{{vsd_fqdn}}" | awk '{print $3,$4}'
    register: ip_addr
    remote_user: "root"

  - name: Check for ip addr in the registered var
    fail: msg="Could not resolve ip addr of "{{vsd_fqdn}}" "
    when: ip_addr.stdout == "not found:"
  when: vsd_sa_or_ha == 'sa'

- name: Create firewall vars file on ansible host
  template: src="{{ playbook_dir }}/roles/vstat-deploy/templates/firewall.j2" dest="{{ playbook_dir }}/roles/vstat-deploy/vars/main.yml" backup=no mode=0755
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: "{{ ansible_sudo_username }}"

- name: Include variable file.
  include_vars: main.yml
  remote_user: "root"

- name: Config firewall on VSTAT vm to accept conn on ports 9200,9300 from vsd(s)
  shell: "{{ item }}"
  with_items:
    - "{{ firewall_std_commands }}"
  remote_user: "root"
  when: vsd_sa_or_ha == 'sa'

- name: Config firewall on VSTAT vm to accept conn on ports 9200, 9300 from vsd(s) in cluster setup
  shell: "{{ item }}"
  with_items:
    - "{{ firewall_cluster_commands }}"
  when: vsd_sa_or_ha == 'ha'
  remote_user: "root"

- name: Restart elastic search
  systemd:
    name: elasticsearch
    state: restarted
  remote_user: "root"

- name: Execute VSTAT cluster script on VSD
  command: /opt/vsd/vsd-es-cluster-config.sh -e {{ groups['vstats'][0] }},{{ groups['vstats'][1] }},{{ groups['vstats'][2] }}
  delegate_to: "{{vsd_fqdn}}"
  remote_user: root
  environment:
    SSHPASS: "{{lookup('env','SSHPASS')}}"
  run_once: true
  when: 
    - not vstat_standalone
    - vsd_sa_or_ha == 'sa' 

- name: Execute VSTAT cluster script on VSD
  command: /opt/vsd/vsd-es-cluster-config.sh -e {{ groups['vstats'][0] }},{{ groups['vstats'][1] }},{{ groups['vstats'][2] }}
  delegate_to: "{{ item }}"
  remote_user: root
  environment:
    SSHPASS: "{{lookup('env','SSHPASS')}}"
  with_items: groups['vsds']
  run_once: true
  when: 
    - not vstat_standalone
    - vsd_sa_or_ha == 'ha'

- name: Enable stats collection on the VSD VM
  command: /opt/vsd/vsd-stats.sh -e {{ inventory_hostname }}
  delegate_to: "{{vsd_fqdn}}"
  remote_user: "root"
  run_once: true
  when: vsd_sa_or_ha == 'sa'

- name: Enable stats collection on the VSDs in cluster setup
  command: /opt/vsd/vsd-stats.sh -e {{ inventory_hostname }}
  delegate_to: "{{ item }}"
  remote_user: root
  with_items: "{{ groups['vsds'] }}"
  run_once: true
  when: vsd_sa_or_ha == 'ha'
