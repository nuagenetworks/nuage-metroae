---
- name: Wait for VSTAT ssh to be ready
  include_role:
    name: common
    tasks_from: wait-for-ssh
  vars:
    ssh_host: "{{ mgmt_ip }}"

- name: Get vsd node(s) information
  import_role:
    name: common
    tasks_from: vsd-node-info.yml
  vars:
    vsd_hostname: "{{ vsd_fqdn }}"

- name: Update /etc/hosts file
  blockinfile:
    dest: /etc/hosts
    block: |
      {% for host in groups['vstats']  %}
      {{ hostvars[host]['mgmt_ip'] }}    {{ host }}
      {% endfor %}
  remote_user: "root"

- name: Update /etc/hosts file on VSD(s)
  blockinfile:
    dest: /etc/hosts
    marker: "# {mark} Ansible created entries for stats nodes"
    block: |
      {% for host in groups['vstats']  %}
      {{ hostvars[host]['mgmt_ip'] }}    {{ host }}
      {% endfor %}
  delegate_to: "{{ item }}"
  #with_items: "{{ groups['vsds'] }}"
  with_items: "{{ vsd_hostname_list }}"
  remote_user: "root"

- block:
  - name: Generate SSH keys
    shell: ssh-keygen -b 2048 -t rsa -f /root/.ssh/id_rsa -q -N ""
    args:
      creates: /root/.ssh/id_rsa
    remote_user: root
    delegate_to: "{{ item }}"
    with_items: "{{ groups['vstats'] }}"
    run_once: true

  - name: Get generated SSH keys
    shell: cat ~/.ssh/id_rsa.pub
    register: ssh_key_lst
    remote_user: root
    delegate_to: "{{ item }}"
    with_items: "{{ groups['vstats'] }}"
    run_once: true

  - name: Add SSH keys to authorized_keys file
    shell: "echo {{ item[1].stdout }} >> /root/.ssh/authorized_keys"
    delegate_to: "{{ item[0] }}"
    with_nested:
      - "{{ groups['vstats'] }}"
      - "{{ ssh_key_lst.results }}"
    remote_user: root
    run_once: true
  when: vstat_sa_or_ha | match('ha')

- name: check for iptables
  shell: "service iptables status"
  register: _svc_iptables
  ignore_errors: True
  remote_user: "root"

- name: Print vsd deployment mode when verbosity >= 1
  debug: var="vsd_sa_or_ha"

- block:
  - name: Start iptables
    systemd:
      name: iptables
      state: started
    remote_user: "root"

  - name: Enable iptables on boot
    systemd:
      name: iptables
      enabled: yes
    remote_user: "root"

  - name: Check if iptables is already setup for VSD rules
    shell: iptables -L INPUT | grep 'match-set vsd src'
    remote_user: "{{ target_server_username }}"
    register: vstat_iptables_result
    ignore_errors: True

  - name: Set if skipping VSTAT deploy
    set_fact: skip_vstat_deploy="{{ vstat_iptables_result is defined and vstat_iptables_result.rc == 0 }}"

  - name: Display if skipping VSTAT deploy
    debug:
      msg:
        - "***************************************************"
        - "Skipping VSTAT deploy because it is already running"
        - "***************************************************"
    when: skip_vstat_deploy

  - block:

    - name: Create iptables vars file on ansible host
      template: src="{{ role_path }}/templates/iptables.j2" dest="/tmp/main.yml" backup=no mode=0755
      delegate_to: "{{ ansible_deployment_host }}"
      remote_user: "{{ ansible_sudo_username }}"

    - name: Include variable file.
      include_vars: /tmp/main.yml
      delegate_to: "{{ ansible_deployment_host }}"
      remote_user: "{{ ansible_sudo_username }}"

    - block:

      - name: Config iptables on VSTAT vm to accept conn on ports 9200,9300 from vsd(s)
        shell: "{{ item }}"
        with_items:
          - "{{ iptables_std_commands }}"
        remote_user: "root"
        register: iptables_results
        ignore_errors: True

      - name: Verify iptables rules installation
        assert:
          that: "{{ item.rc }} == 0 or
                 {{ item.stderr | search('already exists') }} or
                 {{ item.stderr | search('already added') }}"
          msg: "iptables rule was not installed"
        with_items:
          - "{{ iptables_results.results }}"

      when: vsd_sa_or_ha | match('sa')

    - block:

      - name: Config iptables on VSTAT vm to accept conn on ports 9200, 9300 from vsd(s) in cluster setup
        shell: "{{ item }}"
        with_items:
          - "{{ iptables_cluster_commands }}"
        remote_user: "root"
        register: iptables_results
        ignore_errors: True

      - name: Verify iptables rules installation
        assert:
          that: "{{ item.rc }} == 0 or
                 {{ item.stderr | search('already exists') }} or
                 {{ item.stderr | search('already added') }}"
          msg: "iptables rule was not installed"
        with_items:
          - "{{ iptables_results.results }}"

      when: vsd_sa_or_ha | match('ha')

    when: not skip_vstat_deploy

  when: "_svc_iptables.rc == 0"

- name: check for firewalld
  shell: "service firewalld status"
  register: _svc_firewalld
  ignore_errors: True
  remote_user: "root"

- block:
  - name: Start firewalld
    systemd:
      name: firewalld
      state: started
    remote_user: "root"

  - name: Enable firewalld on boot
    systemd:
      name: firewalld
      enabled: yes
    remote_user: "root"

  - name: Check if firewalld is already setup for VSD rules
    shell: firewall-cmd --list-all | grep 9200 | grep accept
    remote_user: "{{ target_server_username }}"
    register: vstat_firewalld_result
    ignore_errors: True

  - name: Set if skipping VSTAT deploy
    set_fact: skip_vstat_deploy="{{ vstat_firewalld_result is defined and vstat_firewalld_result.rc == 0 }}"

  - name: Display if skipping VSTAT deploy
    debug:
      msg:
        - "***************************************************"
        - "Skipping VSTAT deploy because it is already running"
        - "***************************************************"
    when: skip_vstat_deploy

  - block:

    - name: Create firewall vars file on ansible host
      template: src="{{ role_path }}/templates/firewall.j2" dest="/tmp/main.yml" backup=no mode=0755
      delegate_to: "{{ ansible_deployment_host }}"
      remote_user: "{{ ansible_sudo_username }}"

    - name: Include variable file.
      include_vars: /tmp/main.yml
      delegate_to: "{{ ansible_deployment_host }}"
      remote_user: "{{ ansible_sudo_username }}"

    - name: Config firewall on VSTAT vm to accept conn on ports 9200,9300 from vsd(s)
      shell: "{{ item }}"
      with_items:
        - "{{ firewall_std_commands }}"
      remote_user: "root"
      when: vsd_sa_or_ha | match('sa')

    - name: Config firewall on VSTAT vm to accept conn on ports 9200, 9300 from vsd(s) in cluster setup
      shell: "{{ item }}"
      with_items:
        - "{{ firewall_cluster_commands }}"
      when: vsd_sa_or_ha | match('ha')
      remote_user: "root"

    when: not skip_vstat_deploy

  when:
    - "_svc_firewalld.rc == 0"
    - "_svc_iptables.rc != 0"

- block:

  - name: Configure ntpd and ntpdate and local time zone
    include_role:
      name: common
      tasks_from: linux-ntp-sync

  - name: Restart elastic search
    systemd:
      name: elasticsearch
      state: restarted
    remote_user: "root"

  - name: Stat the standalone script
    stat: path=/opt/vsd/vsd-es-standalone.sh
    register: es_sa_script
    delegate_to: "{{ vsd_fqdn }}"
    remote_user: root
    when:
      - vstat_sa_or_ha | match('sa')

  - name: Execute VSTAT standalone script on standalone or clustered vsds
    command: /opt/vsd/vsd-es-standalone.sh -e {{ inventory_hostname }}
    delegate_to: "{{ vsd_fqdn }}"
    remote_user: root
    environment:
      SSHPASS: "{{ vstat_password }}"
    run_once: true
    when:
      - vstat_sa_or_ha | match('sa')
      - es_sa_script.stat.exists

  - name: Execute VSTAT cluster script on standalone or clustered vsds
    command: /opt/vsd/vsd-es-cluster-config.sh -e {{ groups['vstats'][0] }},{{ groups['vstats'][1] }},{{ groups['vstats'][2] }}
    delegate_to: "{{ vsd_fqdn }}"
    remote_user: root
    environment:
      SSHPASS: "{{ vstat_password }}"
    run_once: true
    when: vstat_sa_or_ha | match('ha')

  - name: Enable stats collection on standalone vsd when vstat is standalone
    command: /opt/vsd/vsd-stats.sh -e {{ inventory_hostname }}
    delegate_to: "{{ item }}"
    with_items: "{{ vsd_hostname_list }}"
    remote_user: "root"
    run_once: true
    when:
      - vsd_sa_or_ha | match('sa')
      - vstat_sa_or_ha | match('sa')

  - name: Enable stats collection on the cluster vsds when vstat is standalone
    command: /opt/vsd/vsd-stats.sh -e {{ inventory_hostname }}
    delegate_to: "{{ item }}"
    remote_user: "root"
    run_once: true
    with_items: "{{ vsd_hostname_list }}"
    when:
      - vsd_sa_or_ha | match('ha')
      - vstat_sa_or_ha | match('sa')

  - name: Enable stats collection on the  vsd(s) when vstat is clustered
    command: /opt/vsd/vsd-stats.sh -e {{ groups['vstats'][0] }},{{ groups['vstats'][1] }},{{ groups['vstats'][2] }}
    delegate_to: "{{ item }}"
    remote_user: root
    with_items: "{{ vsd_hostname_list }}"
    run_once: true
    when:
      - vstat_sa_or_ha | match('ha')
      - vsd_sa_or_ha | match('sa') or vsd_sa_or_ha | match('ha')

  when: not skip_vstat_deploy
