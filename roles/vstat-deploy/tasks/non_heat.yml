---
- name: Wait for VSTAT ssh to be ready
  local_action:
    module: wait_for
    port: "22"
    host: "{{ mgmt_ip }}"
    search_regex: OpenSSH
    delay: 1

- name: Update /etc/hosts file
  blockinfile:
    dest: /etc/hosts
    block: |
      {% for host in groups['vstats']  %}
      {{ hostvars[host]['mgmt_ip'] }}    {{ host }}
      {% endfor %}
  remote_user: "root"

- name: Update /etc/hosts file on VSD(s)
  blockinfile:
    dest: /etc/hosts
    marker: "# {mark} Ansible created entries for stats nodes"
    block: |
      {% for host in groups['vstats']  %}
      {{ hostvars[host]['mgmt_ip'] }}    {{ host }}
      {% endfor %}
  delegate_to: "{{ item }}"
  with_items: "{{ groups['vsds'] }}"
  remote_user: "root"

- block:
  - name: Generate SSH keys
    shell: ssh-keygen -b 2048 -t rsa -f /root/.ssh/id_rsa -q -N ""
    args:
      creates: /root/.ssh/id_rsa
    remote_user: root
    delegate_to: "{{ item }}"
    with_items: "{{ groups['vstats'] }}"
    run_once: true

  - name: Get generated SSH keys
    shell: cat ~/.ssh/id_rsa.pub
    register: ssh_key_lst
    remote_user: root
    delegate_to: "{{ item }}"
    with_items: "{{ groups['vstats'] }}"
    run_once: true

  - name: Add SSH keys to authorized_keys file
    shell: "echo {{ item[1].stdout }} >> /root/.ssh/authorized_keys"
    delegate_to: "{{ item[0] }}"
    with_nested:
      - "{{ groups['vstats'] }}"
      - "{{ ssh_key_lst.results }}"
    remote_user: root
    run_once: true
  when: vstat_sa_or_ha | match('ha')

- name: Configure ntpd and ntpdate and local time zone
  include_role:
    name: common
    tasks_from: linux-ntp
  
- block:
  - name: Resolve "{{vsd_fqdn}}"  to ip addr
    shell: host "{{vsd_fqdn}}" | awk '{print $3,$4}'
    register: ip_addr
    remote_user: "root"

  - name: Check for ip addr in the registered var
    fail: msg="Could not resolve ip addr of "{{vsd_fqdn}}" "
    when: ip_addr.stdout | match("not found:")
  when: vsd_sa_or_ha | match('sa')

- name: check for iptables
  shell: "service iptables status"
  register: _svc_iptables
  ignore_errors: True
  remote_user: "root"

- block:
  - name: Start iptables
    systemd:
      name: iptables
      state: started
    remote_user: "root"

  - name: Enable iptables on boot
    systemd:
      name: iptables
      enabled: yes
    remote_user: "root"

  - name: Create iptables vars file on ansible host
    template: src="{{ role_path }}/templates/iptables.j2" dest="/tmp/main.yml" backup=no mode=0755
    delegate_to: "{{ ansible_deployment_host }}"
    remote_user: "{{ ansible_sudo_username }}"

  - name: Include variable file.
    include_vars: /tmp/main.yml
    delegate_to: "{{ ansible_deployment_host }}"
    remote_user: "{{ ansible_sudo_username }}"

  - name: Config iptables on VSTAT vm to accept conn on ports 9200,9300 from vsd(s)
    shell: "{{ item }}"
    with_items:
      - "{{ iptables_std_commands }}"
    remote_user: "root"
    when: vsd_sa_or_ha | match('sa')

  - name: Config iptables on VSTAT vm to accept conn on ports 9200, 9300 from vsd(s) in cluster setup
    shell: "{{ item }}"
    with_items:
      - "{{ iptables_cluster_commands }}"
    when: vsd_sa_or_ha | match('ha')
    remote_user: "root"

  when: "_svc_iptables.rc == 0"

- name: check for firewalld
  shell: "service firewalld status"
  register: _svc_firewalld
  ignore_errors: True
  remote_user: "root"

- block:
  - name: Start firewalld
    systemd:
      name: firewalld
      state: started
    remote_user: "root"

  - name: Enable firewalld on boot
    systemd:
      name: firewalld
      enabled: yes
    remote_user: "root"

  - name: Create firewall vars file on ansible host
    template: src="{{ role_path }}/templates/firewall.j2" dest="/tmp/main.yml" backup=no mode=0755
    delegate_to: "{{ ansible_deployment_host }}"
    remote_user: "{{ ansible_sudo_username }}"

  - name: Include variable file.
    include_vars: /tmp/main.yml
    delegate_to: "{{ ansible_deployment_host }}"
    remote_user: "{{ ansible_sudo_username }}"

  - name: Config firewall on VSTAT vm to accept conn on ports 9200,9300 from vsd(s)
    shell: "{{ item }}"
    with_items:
      - "{{ firewall_std_commands }}"
    remote_user: "root"
    when: vsd_sa_or_ha | match('sa')

  - name: Config firewall on VSTAT vm to accept conn on ports 9200, 9300 from vsd(s) in cluster setup
    shell: "{{ item }}"
    with_items:
      - "{{ firewall_cluster_commands }}"
    when: vsd_sa_or_ha | match('ha')
    remote_user: "root"

  when:
    - "_svc_firewalld.rc == 0"
    - "_svc_iptables.rc != 0"

- name: Restart elastic search
  systemd:
    name: elasticsearch
    state: restarted
  remote_user: "root"

- name: Execute VSTAT cluster script on standalone or clustered vsds
  command: /opt/vsd/vsd-es-cluster-config.sh -e {{ groups['vstats'][0] }},{{ groups['vstats'][1] }},{{ groups['vstats'][2] }}
  delegate_to: "{{ vsd_fqdn }}"
  remote_user: root
  environment:
    SSHPASS: "{{ vstat_password }}"
  run_once: true
  when:
    - vstat_sa_or_ha | match('ha')
    - vsd_sa_or_ha | match('sa') or vsd_sa_or_ha | match('ha')

- name: Enable stats collection on standalone vsd when vstat is standalone
  command: /opt/vsd/vsd-stats.sh -e {{ inventory_hostname }}
  delegate_to: "{{vsd_fqdn}}"
  remote_user: "root"
  run_once: true
  when:
    - vsd_sa_or_ha | match('sa')
    - vstat_sa_or_ha | match('sa')

- name: Enable stats collection on the cluster vsds when vstat is standalone
  command: /opt/vsd/vsd-stats.sh -e {{ inventory_hostname }}
  delegate_to: "{{ item }}"
  remote_user: "root"
  run_once: true
  with_items: "{{ groups['vsds'] }}"
  when:
    - vsd_sa_or_ha | match('ha')
    - vstat_sa_or_ha | match('sa')

- name: Enable stats collection on the  vsd(s) when vstat is clustered
  command: /opt/vsd/vsd-stats.sh -e {{ groups['vstats'][0] }},{{ groups['vstats'][1] }},{{ groups['vstats'][2] }}
  delegate_to: "{{ item }}"
  remote_user: root
  with_items: "{{ groups['vsds'] }}"
  run_once: true
  when:
    - vstat_sa_or_ha | match('ha')
    - vsd_sa_or_ha | match('sa') or vsd_sa_or_ha | match('ha')
