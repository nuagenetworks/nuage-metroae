- name: Backup VSC node1
  any_errors_fatal: true
  include_role:
    name: vsc-backup
  when: inventory_hostname in groups['vsc_node1']

- name: Prep VSC node1 for upgrade
  any_errors_fatal: true
  include_role:
    name: vsc-preupgrade
  when: inventory_hostname in groups['vsc_node1']

- block:
  - name: Clean known_hosts of VSC's on "{{ target_server }}"
    command: ssh-keygen -R "{{ mgmt_ip }}" -f /root/.ssh/known_hosts
    delegate_to: "{{ ansible_deployment_host }}"
    remote_user: "{{ ansible_sudo_username }}"

  - name: Get output of 'show bof'
    vsc_command:
      command: show bof
      mgmt_ip: "{{ vsc_sros_creds.host }}"
      username: "{{ vsc_sros_creds.username }}"
      password: "{{ vsc_sros_creds.password }}"
    register: bof_config
    connection: local

  - name: Print 'show bof' when verbosity >= 1
    debug: var=bof_config verbosity=1

  - name: Create local variable with bof config in json
    set_fact:
      bof_json: "{{ bof_config.result|show_bof_to_json }}"

  - name: Print bof config in json when verbosity >= 1
    debug: var=bof_json verbosity=1

  - name: Copy current tim file as a backup for rollback
    vsc_command:
      command: file copy "{{ bof_json['image_folder'] }}/cpm.tim" "{{ bof_json['image_folder'] }}/cpm.tim.backup" force
      mgmt_ip: "{{ vsc_sros_creds.host }}"
      username: "{{ vsc_sros_creds.username }}"
      password: "{{ vsc_sros_creds.password }}"
    register: backup_image
    connection: local

  - name: Print bacup copy result when verbosity >= 1
    debug: var=backup_image verbosity=1

  - name: Get current file version of image on VSC
    vsc_command:
      command: file version "{{ bof_json['image_folder'] }}/cpm.tim"
      mgmt_ip: "{{ vsc_sros_creds.host }}"
      username: "{{ vsc_sros_creds.username }}"
      password: "{{ vsc_sros_creds.password }}"
    register: current_image
    connection: local

  - name: Print current vsc image version when verbosity >= 1
    debug: var=current_image verbosity=1

  - name: Create local variable with current vsc image version in json
    set_fact:
      current_version_json: "{{ current_image.result|image_version_to_json }}"

  - name: Print current vsc image version in json  when verbosity >= 1
    debug: var=current_version_json verbosity=1

  - name: Copy new VSC image to VSC nodes
    expect:
      command: "{{ vsc_image_copy }}"
      responses:
        (?i)password: "{{ vsc_password|default('admin') }}"
      timeout: "{{ vsc_scp_timeout }}"
    remote_user: "{{ ansible_sudo_username }}"
    delegate_to: "{{ ansible_deployment_host }}"

  - name: Get file version of new image on VSC
    vsc_command:
      command: file version "{{ bof_json['image_folder'] }}/cpm.tim"
      mgmt_ip: "{{ vsc_sros_creds.host }}"
      username: "{{ vsc_sros_creds.username }}"
      password: "{{ vsc_sros_creds.password }}"
    register: new_image
    connection: local

  - name: Print new vsc image version when verbosity >= 1
    debug: var=new_image verbosity=1

  - name: Create local variable with new vsc image version in json
    set_fact:
      new_version_json: "{{ new_image.result|image_version_to_json }}"

  - name: Print new vsc image version in json when verbosity >= 1
    debug: var=new_version_json verbosity=1

  - name: Reboot VSC VM
    vsc_command:
      command: admin reboot now
      mgmt_ip: "{{ vsc_sros_creds.host }}"
      username: "{{ vsc_sros_creds.username }}"
      password: "{{ vsc_sros_creds.password }}"
    connection: local
    ignore_errors: true
    when: target_server_type | match("kvm") or target_server_type | match("vcenter")

  - name: Reboot VSC VM
    os_server_actions:
      auth:
        "{{ os_auth }}"
      server: "{{ inventory_hostname }}"
      action: reboot
      wait: no
    delegate_to: "{{ ansible_deployment_host }}"
    remote_user: "{{ ansible_sudo_username }}"
    when: target_server_type | match("heat")

  - name: Wait for VSC ssh to be ready
    local_action:
      module: wait_for
      port: "22"
      host: "{{ mgmt_ip }}"
      search_regex: OpenSSH
      delay: 1

  - name: Clean known_hosts of VSC's on "{{ target_server }}"
    command: ssh-keygen -R "{{ mgmt_ip }}" -f /root/.ssh/known_hosts
    delegate_to: "{{ ansible_deployment_host }}"
    remote_user: "{{ ansible_sudo_username }}"

  - name: Get output of 'show version'
    vsc_command:
      command: show version
      mgmt_ip: "{{ vsc_sros_creds.host }}"
      username: "{{ vsc_sros_creds.username }}"
      password: "{{ vsc_sros_creds.password }}"
    register: vsc_version
    connection: local

  - name: Print 'show version' when verbosity >= 1
    debug: var=vsc_version verbosity=1

  - name: Create local variable with show version in json
    set_fact:
      vsc_version_json: "{{ vsc_version.result|show_version_to_json }}"

  - name: Print show version in json when verbosity >= 1
    debug: var=vsc_version_json verbosity=1

  - name: Verify VSC came up with new version
    assert:
      that: "{{ vsc_version_json['vsc_version'] == new_version_json['vsc_image_version'] }}"
      msg: "VSC is still running old version - {{ vsc_version_json['vsc_version'] }}"

  - name: Get output of 'show vswitch-controller xmpp-server detail'
    vsc_command:
      command: show vswitch-controller xmpp-server detail
      mgmt_ip: "{{ vsc_sros_creds.host }}"
      username: "{{ vsc_sros_creds.username }}"
      password: "{{ vsc_sros_creds.password }}"
    register: xmpp_detail
    connection: local
    until: xmpp_detail.result.find('Functional') != -1
    retries: 5
    delay: 30

  - name: Print 'show vswitch-controller xmpp-server detail' when verbosity >= 1
    debug: var=xmpp_detail verbosity=1

  - name: Create local variable with xmpp-server detail in json
    set_fact: xmpp_detail_json="{{ xmpp_detail.result|xmpp_server_detail_to_json }}"

  - name: Print xmpp-server detail in json when verbosity >= 1
    debug: var=xmpp_detail_json verbosity=1

  - name: Create local variable for xmpp-server state
    set_fact: xmpp_server_state="{{ xmpp_detail_json['State'] }}"

  - name: Print xmpp-server state when verbosity >= 1
    debug: var=xmpp_server_state verbosity=1

  - name: Check for the expected xmpp-server state
    assert: {
      that: "{{ expected_xmpp_server_state == xmpp_server_state }}",
      msg: "Invalid xmpp-server state ({{ xmpp_server_state }}) detected. Expected {{ expected_xmpp_server_state }}. Check 'show vswitch-controller xmpp-server details'."
  }
  - name: define variable to match vsd strings in sh vswitch vsd details
    set_fact:
      vsd1_s: "cna@{{ vsd_fqdn }}"

  - name: Get output of 'show vswitch-controller vsd detail'
    vsc_command:
      command: show vswitch-controller vsd detail
      mgmt_ip: "{{ vsc_sros_creds.host }}"
      username: "{{ vsc_sros_creds.username }}"
      password: "{{ vsc_sros_creds.password }}"
    register: vsd_detail
    connection: local
    until: vsd_detail.result.find(vsd1_s) != -1
    retries: 5
    delay: 30

  - name: Print 'show vswitch-controller vsd' when verbosity >= 1
    debug: var=vsd_detail verbosity=1

  - name: Verify VSD Node1 is found in vsd_detail
    assert:
      that: "'cna@{{ vsd_fqdn }}/{{ groups['vsds'][0].split('.')[0:1] | join('.') }}' in vsd_detail.result"
      msg: "VSD Node1 could not be found in 'show vswitch-controller vsd detail'"
    when: vsd_sa_or_ha == 'ha'

  - name: Verify VSD Node1 is found in vsd_detail
    assert:
      that: "'cna@{{ vsd_fqdn }}' in vsd_detail.result"
      msg: "VSD Node1 could not be found in 'show vswitch-controller vsd detail'"
    when: vsd_sa_or_ha == 'sa'

  - name: Verify VSD Node3 is found in vsd_detail
    assert:
      that: "'cna@{{ vsd_fqdn }}/{{ groups['vsds'][2].split('.')[0:1] | join('.') }}' in vsd_detail.result"
      msg: "VSD Node3 could not be found in 'show vswitch-controller vsd detail'"
    when: vsd_sa_or_ha == 'ha'

  - block:
    - name: Set mgmt_ip to second vsc node
      set_fact:
        mgmt_ip: "{{ hostvars[groups['vscs'][1]]['mgmt_ip'] }}"

    - name: Check if vsc ha node2 is configured with PBR config
      vsc_command:
        command: admin display-config
      mgmt_ip: "{{ mgmt_ip }}"
      username: "{{ vsc_sros_creds.username }}"
      password: "{{ vsc_sros_creds.password }}"
      register: pbr_config_ha_node2
      connection: local

    - name: Print 'admin display-config' when verbosity >= 1
      debug: var=pbr_config_ha_node2 verbosity=1

    - name: Delete PBR backward compatibility config on second VSC node
      sros_config:
        lines:
          - configure router bgp evpn-pre-rfc no send-opaque-community
          - configure router bgp evpn-pre-rfc no non-compliant
          - admin save
        provider: "{{ vsc_sros_creds }}"
      connection: local
      when: pbr_config_ha_node2.result.find('evpn-pre-rfc') != -1

    - name: Set mgmt_ip to first vsc node
      set_fact:
        mgmt_ip: "{{ hostvars[groups['vscs'][0]]['mgmt_ip'] }}"

    - name: Check if vsc ha node1 is configured with PBR config
      vsc_command:
        command: admin display-config
        mgmt_ip: "{{ mgmt_ip }}"
        username: "{{ vsc_sros_creds.username }}"
        password: "{{ vsc_sros_creds.password }}"
      register: pbr_config_ha_node1
      connection: local

    - name: Print 'admin display-config' when verbosity >= 1
      debug: var=pbr_config_ha_node1 verbosity=1

    - name: Delete PBR backward compatibility config on first VSC node
      sros_config:
        lines:
          - configure router bgp evpn-pre-rfc no send-opaque-community
          - configure router bgp evpn-pre-rfc no non-compliant
          - admin save
        provider: "{{ vsc_sros_creds }}"
      connection: local
      when: pbr_config_ha_node1.result.find('evpn-pre-rfc') != -1
    when: inventory_hostname in groups['vsc_node2']
  when: inventory_hostname in groups['vscs']
