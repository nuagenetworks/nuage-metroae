---
# TODO:
# Check for existing stack or vms
- name: Get the public key for the current user
  local_action: command cat ~/.ssh/id_rsa.pub
  register: current_user_ssh_key

- name: Get heat stack for fixed ip deployments
  set_fact:
    osc_heat_template: "{{ role_path }}/files/osc_fixed.yml"
  when: dhcp == False

- name: Get heat stack for dhcp based deployments
  set_fact:
    osc_heat_template: "{{ role_path }}/files/osc.yml"
  when: dhcp == True

- name: Create OSC node
  register: create_stack
  os_stack:
    name: "{{ stack_name | default(inventory_hostname) }}"
    template: "{{ osc_heat_template }}"
    auth:
      "{{ os_auth }}"
    parameters:
      vm_name: "{{ inventory_hostname }}"
      osc_image: "{{ osc_image }}"
      osc_flavor: "{{ osc_flavor }}"
      osc_network: "{{ osc_network }}"
      osc_subnet: "{{ osc_subnet | default('NONE') }}"
      mgmt_ip: "{{ mgmt_ip | default('NONE') }}"
      ssh_key: "{{ current_user_ssh_key.stdout }}"
  delegate_to: 127.0.0.1
- debug: var=create_stack['stack']['outputs'][0]['output_value']

- name: Set the OSC mgmt ip
  set_fact:
    osc_mgmt_ip: "{{ create_stack['stack']['outputs'][0]['output_value'] }}"

- name: Update /etc/hosts file on ansible host
  lineinfile:
    dest: /etc/hosts
    line: "{{ osc_mgmt_ip }}    {{ inventory_hostname }}"
  delegate_to: 127.0.0.1
  remote_user: "{{ ansible_sudo_username }}"
