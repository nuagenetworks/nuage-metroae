---

#################
# VSD
#################

- name: Ensure binaries directory exists for VSD QCOW 
  file: name="{{ nuage_unpacked_dest_path }}/vsd/" state=directory mode=0755

- block:
  - name: Find name of VSD QCOW Archive
    find: path="{{ nuage_release_src_path }}"  pattern="Nuage-VSD*QCOW*"
    register: rc_vsd

  - name: Unpack VSD QCOW Archive
    unarchive: src="{{ rc_vsd.files[0].path}}" dest="{{ nuage_unpacked_dest_path }}/vsd" list_files=yes
    register: rc_vsd_archive_files
    when: rc_vsd.matched > 0 
  when: not nuage_unpacked|default(false) 

- name: Find name of VSD QCOW File
  find: path="{{ nuage_unpacked_dest_path }}/vsd"  pattern="*.qcow2" recurse=yes
  register: rc_vsd_file

- name: Register VSD Qcow variables with proper path and image locations for use in other playbooks
  set_fact:
    vsd_qcow2_path: "{{ rc_vsd_file.files[0].path | dirname }}"
    vsd_qcow2_file_name: "{{ rc_vsd_file.files[0].path | basename }}"
  when: rc_vsd_file.matched > 0

###################
# VSTAT - ElasticSearch
###################

- name: Ensure binaries directory exists for ElasticSearch
  file: name="{{ nuage_unpacked_dest_path }}/vstat/" state=directory mode=0755

- block:
  - name: Find name of ElasticSearch QCOW Archive
    find: path="{{ nuage_release_src_path }}"  pattern="Nuage-elastic-*"
    register: rc_vstat

  - name: Unpack Elastic QCOW Archive
    unarchive: src="{{ rc_vstat.files[0].path}}" dest="{{ nuage_unpacked_dest_path }}/vstat" list_files=yes
    register: rc_vstat_archive_files
    when: rc_vstat.matched > 0 
  when: not nuage_unpacked|default(false)

- name: Find name of Elastic QCOW File
  find: path="{{ nuage_unpacked_dest_path }}/vstat"  pattern="*.qcow2" recurse=yes
  register: rc_vstat_file

- name: Register VSTAT Qcow variables with proper path and image locations for use in other playbooks
  set_fact:
    vstat_qcow2_path: "{{ rc_vstat_file.files[0].path | dirname }}"
    vstat_qcow2_file_name: "{{ rc_vstat_file.files[0].path | basename }}"
  when: rc_vstat_file.matched > 0

###################
# VSC
###################

- name: Find name of VSC QCOW Archive
  find: path="{{ nuage_release_src_path }}"  pattern="Nuage-VSC*"
  register: rc_vsc

- name: Create directory to unpack VSC to
  file: name="{{ nuage_unpacked_dest_path }}/vsc/" state=directory mode=0755
  when: rc_vsc.matched > 0

- name: Unpack VSC QCOW Archive
  unarchive: src="{{ rc_vsc.files[0].path}}" dest="{{ nuage_unpacked_dest_path }}/vsc/"  list_files=yes
  register: rc_vsc_archive_files
  when: rc_vsc.matched > 0  and not nuage_unpacked|default(false)

- name: Find name of VSC QCOW File
  find: path="{{ nuage_unpacked_dest_path }}/vsc"  pattern="vsc_singledisk.qcow2" recurse=yes
  register: rc_vsc_file

- name: Register VSC Qcow variables with proper path and image locations for use in other playbooks
  set_fact:
    vsc_qcow2_path: "{{ rc_vsc_file.files[0].path | dirname }}"
    vsc_qcow2_file_name: "{{ rc_vsc_file.files[0].path | basename }}"    
  when: rc_vsc_file.matched > 0

################
# VRS 
################

- name: Find name of VRS Archive
  find: path="{{ nuage_release_src_path }}"  pattern="Nuage-VRS*{{ nuage_target_architecture}}*"
  register: rc_vrs

- name: Create directory to unpack VRS to
  file: name="{{ nuage_unpacked_dest_path }}/vrs/" state=directory mode=0755
  when: rc_vrs.matched > 0

- name: Unpack VRS Archive
  unarchive: src="{{ rc_vrs.files[0].path}}" dest="{{ nuage_unpacked_dest_path }}/vrs/"  list_files=yes
  register: rc_vrs_archive_files
  when: rc_vrs.matched > 0  and not nuage_unpacked|default(false)

- block:
  - name: Find name of VRS Package Files (RH architecture)
    find: path="{{ nuage_unpacked_dest_path }}/vrs"  pattern="*.rpm" recurse=yes
    register: rc_vrs_file
  - name: Register VRS package variables with proper path and image locations for use in other playbooks (RH architecture)
    set_fact:
      vrs_package_path: "{{ rc_vrs_file.files[0].path | dirname }}"
      vrs_package_file_name_list: "{{ rc_vrs_file.files |  map(attribute='path') | list | map('basename') | list }}"
    when: rc_vrs_file.matched > 0 
  when: nuage_target_architecture == "el6" or nuage_target_architecture == "el7"

- block:
  # Ubuntu requires 3 packages listed in a specific order of dependeny
  - name: Find name of VRS python package file (Ubuntu architecture)
    find: path="{{ nuage_unpacked_dest_path }}/vrs"  pattern="nuage-python-openvswitch*.deb" recurse=yes
    register: rc_vrs_python_file
  - name: Register VRS package path and VRS python package file name for use in other playbooks (Ubuntu Architecture)
    set_fact:
      vrs_package_path: "{{ rc_vrs_python_file.files[0].path | dirname }}"
      vrs_package_file_name_list: "{{ rc_vrs_python_file.files |  map(attribute='path') | list | map('basename') | list }}"
    when: rc_vrs_python_file.matched > 0
  - name: Find name of VRS common package file (Ubuntu architecture)
    find: path="{{ nuage_unpacked_dest_path }}/vrs"  pattern="nuage-openvswitch-common*.deb" recurse=yes
    register: rc_vrs_common_file
  - name: Register VRS common package file name for use in other playbooks (Ubuntu Architecture)
    set_fact:
      vrs_package_file_name_list: "{{ vrs_package_file_name_list }} + {{ rc_vrs_common_file.files |  map(attribute='path') | list | map('basename') | list }}"
    when: rc_vrs_common_file.matched > 0
  - name: Find name of VRS switch package file (Ubuntu architecture)
    find: path="{{ nuage_unpacked_dest_path }}/vrs"  pattern="nuage-openvswitch-switch*.deb" recurse=yes
    register: rc_vrs_switch_file
  - name: Register VRS switch package file name for use in other playbooks (Ubuntu Architecture)
    set_fact:
      vrs_package_file_name_list: "{{ vrs_package_file_name_list }} + {{ rc_vrs_switch_file.files |  map(attribute='path') | list | map('basename') | list }}"
    when: rc_vrs_switch_file.matched > 0
  when: nuage_target_architecture == "ubuntu" 

################
# Docker-Monitor
#################

- name: Find name of Docker-Monitor Archive
  find: path="{{ nuage_release_src_path }}"  pattern="Nuage-Docker-Monitor*"
  register: rc_dockermon

- name: Create directory to unpack Docker-Monitor to
  file: name="{{ nuage_unpacked_dest_path }}/dockermon/" state=directory mode=0755
  when: rc_dockermon.matched > 0

- name: Unpack Docker-Monitor Archive
  unarchive: src="{{ rc_dockermon.files[0].path}}" dest="{{ nuage_unpacked_dest_path }}/dockermon/"  list_files=yes
  register: rc_dockermon_archive_files
  when: rc_dockermon.matched > 0  and not nuage_unpacked|default(false)

- block:
  - name: Find name of dockermon package Files (RH architecture)
    find: path="{{ nuage_unpacked_dest_path }}/dockermon"  pattern="*.rpm" recurse=yes
    register: rc_dockermon_file
  - name: Register dockermon variables with proper path and image locations for use in other playbooks (RH architecture)
    set_fact:
      dockermon_package_path: "{{ rc_dockermon_file.files[0].path | dirname }}"
      dockermon_package_file_name: "{{ rc_dockermon_file.files[0].path | basename }}"
    when: rc_dockermon_file.matched > 0
  when: nuage_target_architecture == "el6" or nuage_target_architecture == "el7"

- block:
  - name: Find name of dockermon package files (Ubuntu architecture)
    find: path="{{ nuage_unpacked_dest_path }}/dockermon"  pattern="*.deb" recurse=yes
    register: rc_dockermon_file
  - name: Register dockermon variables with proper path and image locations for use in other playbooks (Ubuntu architecture)
    set_fact:
      dockermon_package_path: "{{ rc_dockermon_file.files[0].path | dirname }}"
      dockermon_package_file_name: "{{ rc_dockermon_file.files[0].path | basename }}"
    when: rc_dockermon_file.matched > 0
  when: nuage_target_architecture == "ubuntu"

#####################
# VNS Utility/ NSGV
#####################

- name: Ensure binaries directory exists for VNS QCOW
  file: name="{{ nuage_unpacked_dest_path }}/vns/" state=directory mode=0755

- block:
  - name: Find name of VNS QCOW Archive
    find: path="{{ nuage_release_src_path }}"  pattern="Nuage-VNS*"
    register: rc_vns

  - name: Unpack VNS QCOW Archive
    unarchive: src="{{ rc_vns.files[0].path}}" dest="{{ nuage_unpacked_dest_path }}/vns" list_files=yes
    register: rc_vns_archive_files
    when: rc_vns.matched > 0

  - name: Find name of VNS Utility QCOW Archive
    find: path="{{ nuage_release_src_path }}/vns"  pattern="Nuage-VNS-Utils*"
    register: rc_vnsutil

  - name: Unpack VNS Utility QCOW Archive
    unarchive: src="{{ rc_vnsutil.files[0].path}}" dest="{{ nuage_unpacked_dest_path }}/vns" list_files=yes
    register: rc_vnsutil_archive_files
    when: rc_vnsutil.matched > 0

  - name: Find name of NSGV QCOW Archive
    find: path="{{ nuage_release_src_path }}/vns"  pattern="Nuage-VNS-NSG*"
    register: rc_nsgv

  - name: Unpack NSGV QCOW Archive
    unarchive: src="{{ rc_nsgv.files[0].path}}" dest="{{ nuage_unpacked_dest_path }}/vns" list_files=yes
    register: rc_nsgv_archive_files
    when: rc_nsgv.matched > 0  
  when: not nuage_unpacked|default(false)

- name: Find name of VNS Utility QCOW File
  find: path="{{ nuage_unpacked_dest_path }}/vns"  pattern="vns-util*.qcow2" recurse=yes
  register: rc_vnsutil_file

- name: Register VNS Utility Qcow variables with proper path and image locations for use in other playbooks
  set_fact:
    vnsutil_qcow2_path: "{{ rc_vnsutil_file.files[0].path | dirname }}"
    vnsutil_qcow2_file_name: "{{ rc_vnsutil_file.files[0].path | basename }}"
  when: rc_vnsutil_file.matched > 0

- name: Find name of NSGV QCOW File
  find: path="{{ nuage_unpacked_dest_path }}/vns"  pattern="ncpe*.qcow2" recurse=yes
  register: rc_nsgv_file

- name: Register NSGV Qcow variables with proper path and image locations for use in other playbooks
  set_fact:
    nsgv_qcow2_path: "{{ rc_nsgv_file.files[0].path | dirname }}"
    nsgv_qcow2_file_name: "{{ rc_nsgv_file.files[0].path | basename }}"
  when: rc_nsgv_file.matched > 0
