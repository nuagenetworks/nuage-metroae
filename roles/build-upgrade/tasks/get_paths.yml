---
#################
# VSD
#################

- block:
  - block: # QCOW2
    - name: Find name of VSD QCOW2 File
      find: path="{{ nuage_unzipped_files_dir }}/vsd/qcow2"  pattern="*.qcow2" recurse=yes
      register: rc_vsd_file
    - debug: var=rc_vsd_file verbosity=1
    - name: Verify that a VSD QCOW2 file was found
      assert: { 
        that: "{{ rc_vsd_file.matched }} > 0",
        msg: "Unable to find VSD VM image file"
      }
    - name: Register VSD QCOW2 variables with proper path and image locations for use in other playbooks
      set_fact:
        vsd_qcow2_path: "{{ rc_vsd_file.files[0].path | dirname }}"
        vsd_qcow2_file_name: "{{ rc_vsd_file.files[0].path | basename }}"
        vcin_qcow2_path: "{{ rc_vsd_file.files[0].path | dirname }}"
        vcin_qcow2_file_name: "{{ rc_vsd_file.files[0].path | basename }}"
    when: ( myvsds is defined and 
          ( myvsds | map(attribute='target_server_type') | list | issuperset(["kvm"]) or myvsds | map(attribute='target_server_type') | list | issuperset(["heat"]) ) ) or
          ( myvcins is defined and
          ( myvcins | map(attribute='target_server_type') | list | issuperset(["kvm"]) or myvcins | map(attribute='target_server_type') | list | issuperset(["heat"]) ) )
  - block: # OVA
    - name: Find name of VSD OVA File
      find: path="{{ nuage_unzipped_files_dir }}/vsd/ova"  pattern="*.ova" recurse=yes
      register: rc_vsd_file
    - debug: var=rc_vsd_file verbosity=1
    - name: Verify that a VSD OVA file was found
      assert: { 
        that: "{{ rc_vsd_file.matched }} > 0",
        msg: "Unable to find VSD VM image file"
      }
    - name: Register VSD OVA variables with proper path and image locations for use in other playbooks
      set_fact:
        vsd_ova_path: "{{ rc_vsd_file.files[0].path | dirname }}"
        vsd_ova_file_name: "{{ rc_vsd_file.files[0].path | basename }}"
        vcin_ova_path: "{{ rc_vsd_file.files[0].path | dirname }}"
        vcin_ova_file_name: "{{ rc_vsd_file.files[0].path | basename }}"
    when: ( myvsds is defined and 
          myvsds | map(attribute='target_server_type') | list | issuperset(["vcenter"]) ) or
          ( myvcins is defined and
          myvcins | map(attribute='target_server_type') | list | issuperset(["vcenter"]) )
  when: (vsd_requires_binaries|default(True)) or (vcin_requires_binaries|default(False))
  tags:
    - vsd

- name: Ensure that VSD QCOW2 variables are set
  set_fact:
    vsd_qcow2_path: "None"
    vsd_qcow2_file_name: "None"
  when: vsd_qcow2_path is not defined

- name: Ensure that VSD OVA variables are set
  set_fact:
    vsd_ova_path: "None"
    vsd_ova_file_name: "None"
  when: vsd_ova_path is not defined

- name: Ensure that VCIN QCOW2 variables are set
  set_fact:
    vcin_qcow2_path: "None"
    vcin_qcow2_file_name: "None"
  when: vcin_qcow2_path is not defined

- name: Ensure that VCIN OVA variables are set
  set_fact:
    vcin_ova_path: "None"
    vcin_ova_file_name: "None"
  when: vcin_ova_path is not defined


###################
# VSC
###################

- block:
  - block:
    - name: Find name of VSC TIM File
      find: path="{{ nuage_unzipped_files_dir }}/vsc"  pattern="cpm.tim" recurse=yes
      register: rc_vsc_file
    - debug: var=rc_vsc_file verbosity=1
    - name: Verify that a VSC TIM file was found
      assert: { 
        that: "{{ rc_vsc_file.matched }} > 0",
        msg: "Unable to find VSC VM TIM image file"
      }
    - name: Register VSC TIM variables with proper path and image locations for use in other playbooks
      set_fact:
        vsc_tim_path: "{{ rc_vsc_file.files[0].path | dirname }}"
        vsc_tim_file_name: "{{ rc_vsc_file.files[0].path | basename }}"
      when: rc_vsc_file.matched > 0
    when: myvscs | map(attribute='target_server_type') | list | issuperset(["kvm"]) or myvscs | map(attribute='target_server_type') | list | issuperset(["heat"]) or myvscs | map(attribute='target_server_type') | list | issuperset(["vcenter"])
  when:
    - myvscs is defined
    - vsc_requires_binaries|default(True)
  tags:
    - vsc
