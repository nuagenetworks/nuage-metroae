---
- name: Gathering info on VM
  connection: local
  vmware_guest:
    hostname: "{{ target_server }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    name: "{{ vmname }}"
    validate_certs: no
    state: gatherfacts
  register: vnsutil_vm_facts
  ignore_errors: yes

- debug: var=vnsutil_vm_facts verbosity=1

- name: Verify the VNSUTIL VM does not exist
  assert: 
    that: "vnsutil_vm_facts.failed is defined"
    msg: "VM {{ vmname }} already exists, quiting"

- name: Deploy VNSUTIL Image on vCenter
  connection: local
  command: >
    {{ vcenter.ovftool }}
    --acceptAllEulas
    --noSSLVerify
    --powerOn
    --machineOutput
    -dm=thin
    -ds={{ vcenter.datastore }}
    -n={{ vmname }}
    --net:"Management={{ mgmt_bridge }}"
    "{{ vnsutil_ova_path }}/{{ vnsutil_ova_file_name }}"
    vi://'{{ vcenter.username | urlencode }}':'{{ vcenter.password | urlencode }}'@{{ target_server }}/{{ vcenter.datacenter }}/host/{{ vcenter.cluster }} 

- block:
  - name: Waiting until VMware tools becomes available
    connection: local
    vmware_guest_tools_wait:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      name: "{{ vmname }}"
      datacenter: "{{ vcenter.datacenter }}"
      validate_certs: no
    register: vnsutil_vm_facts
  
  - debug: var=vnsutil_vm_facts verbosity=1
  when: ansible_version.full | version_compare('2.3', '>=')

- block:
  - name: Waiting 120 seconds to make sure the VNSUTIL is up
    pause:
      seconds: 120

  - name: Gathering info on VM
    connection: local
    vmware_guest:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      name: "{{ vm_name }}"
      datacenter: "{{ vcenter.datacenter }}"
      state: gatherfacts
      validate_certs: no
    register: vnsutil_vm_facts

  - debug: var=vnsutil_vm_facts verbosity=1

  - name: Verify the Stats VM came up correctly
    assert:
      that:
        - "vnsutil_vm_facts.instance.hw_guest_id is defined"  
        - "not vnsutil_vm_facts.instance.hw_guest_id is none"  
        - "not vnsutil_vm_facts.instance.hw_guest_id == ''"  
      msg: "VNSUTIL VM {{ inventory_hostname }} did not come up after two minutes"
  when: ansible_version.full | version_compare('2.3', '<')

- name: Writing eth0 network script file to the VNSUTIL VM
  connection: local
  vmware_vm_shell:
    hostname: "{{ target_server }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    cluster: "{{ vcenter.cluster }}"
    validate_certs: no
    vm_id: "{{ vmid }}"
    vm_username: "{{ vmuser }}"
    vm_password: "{{ vmpass }}"
    vm_shell: "/usr/bin/echo"
    vm_shell_args: " '{{ lookup('template', 'ifcfg-eth0.j2') }}' > /etc/sysconfig/network-scripts/ifcfg-eth0" 

- name: Set the owner and group on the eth0 network script file in the VNSUTIL VM 
  connection: local
  vmware_vm_shell:
    hostname: "{{ target_server }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    cluster: "{{ vcenter.cluster }}"
    validate_certs: no
    vm_id: "{{ vmid }}"
    vm_username: "{{ vmuser }}"
    vm_password: "{{ vmpass }}"
    vm_shell: "/usr/bin/chown"
    vm_shell_args: " 0 0 /etc/sysconfig/network-scripts/ifcfg-eth0" 

#- name: Writing eth1 network script file to the VNSUTIL VM
#  connection: local
#  vmware_vm_shell:
#    hostname: "{{ target_server }}"
#    username: "{{ vcenter.username }}"
#    password: "{{ vcenter.password }}"
#    datacenter: "{{ vcenter.datacenter }}"
#    cluster: "{{ vcenter.cluster }}"
#    validate_certs: no
#    vm_id: "{{ vmid }}"
#    vm_username: "{{ vmuser }}"
#    vm_password: "{{ vmpass }}"
#    vm_shell: "/usr/bin/echo"
#    vm_shell_args: " '{{ lookup('template', 'ifcfg-eth1.j2') }}' > /etc/sysconfig/network-scripts/ifcfg-eth1"
#
#- name: Set the owner and group on the eth1 network script file in the VNSUTIL VM
#  connection: local
#  vmware_vm_shell:
#    hostname: "{{ target_server }}"
#    username: "{{ vcenter.username }}"
#    password: "{{ vcenter.password }}"
#    datacenter: "{{ vcenter.datacenter }}"
#    cluster: "{{ vcenter.cluster }}"
#    validate_certs: no
#    vm_id: "{{ vmid }}"
#    vm_username: "{{ vmuser }}"
#    vm_password: "{{ vmpass }}"
#    vm_shell: "/usr/bin/chown"
#    vm_shell_args: " 0 0 /etc/sysconfig/network-scripts/ifcfg-eth1"
#
- name: Writing network file to the VNSUTIL VM
  connection: local
  vmware_vm_shell:
    hostname: "{{ target_server }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    cluster: "{{ vcenter.cluster }}"
    validate_certs: no
    vm_id: "{{ vmid }}"
    vm_username: "{{ vmuser }}"
    vm_password: "{{ vmpass }}"
    vm_shell: "/usr/bin/echo"
    vm_shell_args: " '{{ lookup('template', 'network.j2') }}' > /etc/sysconfig/network" 

- name: Set the owner and group on the network file in the VNSUTIL VM
  connection: local
  vmware_vm_shell:
    hostname: "{{ target_server }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    cluster: "{{ vcenter.cluster }}"
    validate_certs: no
    vm_id: "{{ vmid }}"
    vm_username: "{{ vmuser }}"
    vm_password: "{{ vmpass }}"
    vm_shell: "/usr/bin/chown"
    vm_shell_args: " 0 0 /etc/sysconfig/network" 

- name: Create the directory /root/.ssh for authorized_keys on the VNSUTIL VM
  connection: local
  vmware_vm_shell:
    hostname: "{{ target_server }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    cluster: "{{ vcenter.cluster }}"
    validate_certs: no
    vm_id: "{{ vmid }}"
    vm_username: "{{ vmuser }}"
    vm_password: "{{ vmpass }}"
    vm_shell: "/usr/bin/mkdir"
    vm_shell_args: " -p /root/.ssh" 

- name: Set the owner and group for the /root/.ssh directory in the VNSUTIL VM
  connection: local
  vmware_vm_shell:
    hostname: "{{ target_server }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    cluster: "{{ vcenter.cluster }}"
    validate_certs: no
    vm_id: "{{ vmid }}"
    vm_username: "{{ vmuser }}"
    vm_password: "{{ vmpass }}"
    vm_shell: "/usr/bin/chown"
    vm_shell_args: " 0 0 /root/.ssh" 

- name: Get the public key for the current user
  local_action: command cat "{{ user_ssh_pub_key }}"
  register: current_user_ssh_key

- name: Writing authorized_keys to the VNSUTIL VM
  connection: local
  vmware_vm_shell:
    hostname: "{{ target_server }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    cluster: "{{ vcenter.cluster }}"
    validate_certs: no
    vm_id: "{{ vmid }}"
    vm_username: "{{ vmuser }}"
    vm_password: "{{ vmpass }}"
    vm_shell: "/usr/bin/echo"
    vm_shell_args: " '{{ lookup('template', 'authorized_keys.j2') }}' > /root/.ssh/authorized_keys" 

- name: Set the mode on the authorized_keys file in the VNSUTIL VM
  connection: local
  vmware_vm_shell:
    hostname: "{{ target_server }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    cluster: "{{ vcenter.cluster }}"
    validate_certs: no
    vm_id: "{{ vmid }}"
    vm_username: "{{ vmuser }}"
    vm_password: "{{ vmpass }}"
    vm_shell: "/usr/bin/chmod"
    vm_shell_args: " 0640 /root/.ssh/authorized_keys" 

- name: Reboot VSD VM
  connection: local
  vmware_vm_shell:
    hostname: "{{ target_server }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    cluster: "{{ vcenter.cluster }}"
    validate_certs: no
    vm_id: "{{ vmid }}"
    vm_username: "{{ vmuser }}"
    vm_password: "{{ vmpass }}"
    vm_shell: "/usr/sbin/reboot"
