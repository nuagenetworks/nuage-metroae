---
- block:
  - name: Get {{ inventory_hostname }} details from OS facts
    os_server_facts:
      auth:
        "{{ os_auth }}"
      server: "{{ inventory_hostname }}"
    register: ci_server
    delegate_to: 127.0.0.1

  - name: Set VSD subnet name
    set_fact:
      subnet_name1: "{{ ci_server['ansible_facts']['openstack_servers'][0]['networks'].keys()[0] }}"
      subnet_name2: "{{ ci_server['ansible_facts']['openstack_servers'][0]['networks'].keys()[1] }}"
    delegate_to: 127.0.0.1

  - block:
    - name: Set the compute IP
      set_fact:
        target_server: "{{ ci_server['ansible_facts']['openstack_servers'][0]['networks'][subnet_name2][0]}}"
        subnet_name: "{{ subnet_name2 }}"
    when: subnet_name1 == 'OC_JEN_FrontEnd'
    delegate_to: 127.0.0.1

  - block:
    - name: Set the compute IP
      set_fact:
        target_server: "{{ ci_server['ansible_facts']['openstack_servers'][0]['networks'][subnet_name1][0]}}"
        subnet_name: "{{ subnet_name1 }}"
    when: subnet_name2 == 'OC_JEN_FrontEnd'
    delegate_to: 127.0.0.1

  - block:
    - name: Set the network name to find out correct CI slave temp file
      set_fact:
        subnet_name_temp: "{{ subnet_name2 }}"
    when: subnet_name1 == 'OC_JEN_FrontEnd'
    delegate_to: 127.0.0.1

  - block:
    - name: Set the network name to find out correct CI slave temp file
      set_fact:
        subnet_name_temp: "{{ subnet_name1 }}"
    when: subnet_name2 == 'OC_JEN_FrontEnd'
    delegate_to: 127.0.0.1

  - name: get the u14 vrs temp file contents
    command: cat "/tmp/{{ subnet_name_temp }}_vrs_ip_u14"
    register: u14_vrs_ip
    delegate_to: 127.0.0.1

  - name: register u14 vrs target_server
    set_fact :
      vrs_u14_target_server: "{{ u14_vrs_ip.stdout }}"
    delegate_to: 127.0.0.1

  - name: get the u16 vrs temp file contents
    command: cat "/tmp/{{ subnet_name_temp }}_vrs_ip_u16"
    register: u16_vrs_ip
    delegate_to: 127.0.0.1
    ignore_errors: yes

  - name: register u16 vrs target_server
    set_fact :
      vrs_u16_target_server: "{{ u16_vrs_ip.stdout }}"
    delegate_to: 127.0.0.1
    ignore_errors: yes

  # get the vrs names to use to delete heat templates
  - name: get the centos7 vrs name temp file contents
    command: cat "/tmp/{{ subnet_name_temp }}_vrs_name_centos7"
    register: c7_vrs_name
    delegate_to: 127.0.0.1

  - name: register centos7 vrs name target_server
    set_fact :
      vrs_c7_target_server_name: "{{ c7_vrs_name.stdout }}"
    delegate_to: 127.0.0.1

  - name: get the u14 vrs name temp file contents
    command: cat "/tmp/{{ subnet_name_temp }}_vrs_name_u14"
    register: u14_vrs_name
    delegate_to: 127.0.0.1

  - name: register u14 vrs name target_server
    set_fact :
      vrs_u14_target_server_name: "{{ u14_vrs_name.stdout }}"
    delegate_to: 127.0.0.1

# ignore errors for u16.04 tasks incase for VSP 4.04R4 and below where VRS was unsupported for U16.04
  - name: get the u16 vrs name temp file contents
    command: cat "/tmp/{{ subnet_name_temp }}_vrs_name_u16"
    register: u16_vrs_name
    delegate_to: 127.0.0.1
    ignore_errors: yes

  - name: register u16 vrs target_server name
    set_fact :
      vrs_u16_target_server_name: "{{ u16_vrs_name.stdout }}"
    delegate_to: 127.0.0.1
    ignore_errors: yes

  - name: Destroy CI heat templates for ubuntu 14 hypervisor types
    os_stack:
      name: "{{ vrs_u14_target_server_name }}"
      auth:
        "{{ os_auth }}"
      state: absent
    delegate_to: 127.0.0.1

  - name: Destroy CI heat templates for ubuntu 16 hypervisor types
    os_stack:
      name: "{{ vrs_u16_target_server_name }}"
      auth:
        "{{ os_auth }}"
      state: absent
    delegate_to: 127.0.0.1
    ignore_errors: yes

  - name: Destroy CI heat templates for centos7 hypervisor types
    os_stack:
      name: "{{ vrs_c7_target_server_name }}"
      auth:
        "{{ os_auth }}"
      state: absent
    delegate_to: 127.0.0.1

  - name: Destroy subnet in VSD
    local_action: command python {{playbook_dir}}/scripts/delete_subnet.py {{playbook_dir}} {{subnet_name}}

  - name: Extract network part from the compute ip
    set_fact:
      network_address: "{{ target_server.split('.')[0:3] | join('.') }}"

  - name: Delete VSP ips and centos 7 vrs ip from /etc/hosts file
    lineinfile:
      dest: /etc/hosts
      line: "{{ item }}"
      state: absent
    with_items: "{{vsp_ips}}"
    remote_user: "{{ ansible_sudo_username }}"
    delegate_to: "{{ ansible_deployment_host }}"

  - name: Delete ubuntu 14 VRS ips from /etc/hosts file
    lineinfile:
      dest: /etc/hosts
      line: "{{ vrs_u14_target_server }}    {{ vrs_u14_target_server_name }}"
      state: absent
    remote_user: "{{ ansible_sudo_username }}"
    delegate_to: "{{ ansible_deployment_host }}"

  - name: Delete ubuntu 16 VRS ips from /etc/hosts file
    lineinfile:
      dest: /etc/hosts
      line: "{{ vrs_u16_target_server }}    {{ vrs_u16_target_server_name }}"
      state: absent
    remote_user: "{{ ansible_sudo_username }}"
    delegate_to: "{{ ansible_deployment_host }}"
    ignore_errors: yes

  # temp fix to get around policy issue
  - name: Set fronend ip added to static route
    set_fact:
      frontend_ip: "{{ ci_server['ansible_facts']['openstack_servers'][0]['networks']['OC_JEN_FrontEnd'][0]}}"

  - name: Delete static route on ansible host for centos7 VRS
    command: "route del -net {{ network_address }}.0/24 "
    delegate_to: "{{ ansible_deployment_host }}"
    remote_user: "{{ ansible_sudo_username }}"

  - name: Delete static route on ansible host for ubuntu 14 VRS
    command: "route del -host {{ vrs_u14_target_server }}"
    delegate_to: "{{ ansible_deployment_host }}"
    remote_user: "{{ ansible_sudo_username }}"

  - name: Delete static route on ansible host for ubuntu 16 VRS
    command: "route del -host {{ vrs_u16_target_server }}"
    delegate_to: "{{ ansible_deployment_host }}"
    remote_user: "{{ ansible_sudo_username }}"
    ignore_errors: yes

  - name: Remove temporary centos7 vrs ip adress file
    file: path=/tmp/{{ subnet_name_temp }}_vrs_ip_centos7 state=absent
    delegate_to: "{{ ansible_deployment_host }}"
    remote_user: "{{ ansible_sudo_username }}"

  - name: Remove temporary ubuntu 14 vrs ip adress file
    file: path=/tmp/{{ subnet_name_temp }}_vrs_ip_u14 state=absent
    delegate_to: "{{ ansible_deployment_host }}"
    remote_user: "{{ ansible_sudo_username }}"

  - name: Remove temporary ubuntu 16 vrs ip adress file
    file: path=/tmp/{{ subnet_name_temp }}_vrs_ip_u16 state=absent
    delegate_to: "{{ ansible_deployment_host }}"
    remote_user: "{{ ansible_sudo_username }}"
    ignore_errors: yes

  - name: Remove temporary centos7 vrs name file
    file: path=/tmp/{{ subnet_name_temp }}_vrs_name_centos7 state=absent
    delegate_to: "{{ ansible_deployment_host }}"
    remote_user: "{{ ansible_sudo_username }}"

  - name: Remove temporary ubuntu 14 vrs name file
    file: path=/tmp/{{ subnet_name_temp }}_vrs_name_u14 state=absent
    delegate_to: "{{ ansible_deployment_host }}"
    remote_user: "{{ ansible_sudo_username }}"

  - name: Remove temporary ubuntu 16 vrs name file
    file: path=/tmp/{{ subnet_name_temp }}_vrs_name_u16 state=absent
    delegate_to: "{{ ansible_deployment_host }}"
    remote_user: "{{ ansible_sudo_username }}"
    remote_user: "{{ ansible_sudo_username }}"
    ignore_errors: yes

  when: inventory_hostname == ansible_play_hosts[0]
#use above block to accomodate serial = 1 set in ci_destroy.yml