- name: Clean known_hosts of VSC's on "{{ target_server }}"
  command: ssh-keygen -R "{{ mgmt_ip }}" -f /root/.ssh/known_hosts
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: "{{ ansible_sudo_username }}"

- name: Get output of 'show bof'
  sros_command:
    commands:
      - show bof
    provider: "{{ vsc_creds }}"
  register: bof_config
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: "{{ ansible_sudo_username }}"

- name: Print 'show bof' when verbosity >= 1
  debug: var=bof_config.stdout[0] verbosity=1

- name: Create local variable with bof config in json
  set_fact:
    bof_json: "{{ bof_config.stdout[0]|show_bof_to_json }}"

- name: Print bof config in json  when verbosity >= 1
  debug: var=bof_json verbosity=1

- block:
  - name: Get output of 'show system connections port 5222'
    sros_command:
      commands:
        - show system connections port 5222
      provider: "{{ vsc_creds }}"
    register: vsc_sys_conn
    delegate_to: "{{ ansible_deployment_host }}"
    remote_user: "{{ ansible_sudo_username }}"

  - name: Print 'show system connections port 5222' when verbosity >= 1
    debug: var=vsc_sys_conn verbosity=1

  - name: Create local variable with vsc system connetion in json
    set_fact: 
      vsc_sys_conn_json: "{{ vsc_sys_conn.stdout[0]|vsc_system_connections_to_json }}"

  - name: Print vsc system connetion in json  when verbosity >= 1
    debug: var=vsc_sys_conn_json verbosity=1
   
  - name: Block access to decoupled VSD node2 from VSC1
    command: "iptables -I INPUT -s {{ vsc_sys_conn_json['local_ip'] }} -j DROP"
    remote_user: root
    delegate_to: "{{ groups['vsds'][1] }}"
  
  - name: check xmpp connectivity after iptables on vsd2
    sros_command:
      commands:
        - show vswitch-controller xmpp-server | match Functional
      wait_for:
        - result[0] contains Functional
      provider: "{{ vsc_creds }}"  
      interval: 10
      retries: 6
    register: xmpp_status
    delegate_to: "{{ ansible_deployment_host }}"
    remote_user: "{{ ansible_sudo_username }}"
  
  - name: Print vsc xmpp status  when verbosity >= 1
    debug: var=xmpp_status verbosity=1

  when: vsd_sa_or_ha == 'ha'

- name: Get output of 'show vswitch-controller xmpp-server detail'
  sros_command:
    commands:
      - show vswitch-controller xmpp-server detail
    provider: "{{ vsc_creds }}"
  register: xmpp_detail
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: "{{ ansible_sudo_username }}"

- name: Print 'show vswitch-controller xmpp-server detail' when verbosity >= 1
  debug: var=xmpp_detail verbosity=1

- name: Create local variable with xmpp-server detail in json
  set_fact: xmpp_detail_json="{{ xmpp_detail.stdout[0]|xmpp_server_detail_to_json }}"

- name: Print xmpp-server detail in json when verbosity >= 1
  debug: var=xmpp_detail_json verbosity=1

- name: Create local variable for xmpp-server state
  set_fact: xmpp_server_state="{{ xmpp_detail_json['State'] }}"

- name: Print xmpp-server state when verbosity >= 1
  debug: var=xmpp_server_state verbosity=1

- name: Check for the expected xmpp-server state
  assert: { 
    that: "{{ expected_xmpp_server_state == xmpp_server_state }}",
    msg: "Invalid xmpp-server state ({{ xmpp_server_state }}) detected. Expected {{ expected_xmpp_server_state }}. Check 'show vswitch-controller xmpp-server details'."  }

- name: Save VSC configs
  sros_command:
    commands:
      - admin save
    provider: "{{ vsc_creds }}"
  register: vsc_config_save
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: "{{ ansible_sudo_username }}"

- name: Print 'admin save' when verbosity >= 1
  debug: var=vsc_config_save verbosity=1 
