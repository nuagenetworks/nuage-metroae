---
- block:
  - name: Pull facts on target_server
    setup: gather_subset=!all
    delegate_to: "{{ target_server }}"
    remote_user: "{{ target_server_username }}"

  - name: List the Virtual Machines on target_server
    virt: command=list_vms
    register: virt_vms
    delegate_to: "{{ target_server }}"
    remote_user: "{{ target_server_username }}"

  - name: Shutdown/Destroy Current vstat node(s)
    include_role:
      name: vstat-destroy
    vars:
      preserve_vstat: True
      rollback: True

  - name: Find VSTAT backup folder
    shell: ls "{{ images_path }}" | grep "{{ inventory_hostname }}.backup.*"
    register: vstat_backup_dir
    delegate_to: "{{ target_server }}"
    remote_user: "{{ target_server_username }}"

  - debug: var=vstat_backup_dir.stdout verbosity=1
    delegate_to: "{{ target_server }}"
    remote_user: "{{ target_server_username }}"

  - name: Move the the vstat backup directory to vstat directory
    command: "cp -R {{ images_path }}/{{ vstat_backup_dir.stdout }} {{ images_path }}/{{ inventory_hostname }}"
    delegate_to: "{{ target_server }}"
    remote_user: "{{ target_server_username }}"

  - name: Define VSTAT vm with KVM XML config file from backup
    virt:
      name: "{{ inventory_hostname }}"
      command: define
      xml: "{{ lookup('template', '{{ images_path }}/{{ inventory_hostname }}/{{ inventory_hostname }}.xml') }}" 
      uri: qemu:///system
    register: vstat_xml
    delegate_to: "{{ target_server }}"
    remote_user: "{{ target_server_username }}"

  - name: "Run backed up VSTAT VM"
    virt: name="{{ inventory_hostname }}"
          state=running
          uri=qemu:///system
    delegate_to: "{{ target_server }}"
    remote_user: "{{ target_server_username }}"

  - name: Wait for VSTAT ssh to be ready
    local_action:
      module: wait_for
      port: "22"
      host: "{{ mgmt_ip }}"
      search_regex: OpenSSH
      delay: 1
  when: inventory_hostname in groups['vstats']

- block:
 - name: Get monit state for stat processes
    vsd_monit:
      state: group_summary
      group: vsd-stats
    register: stats_current_state
    remote_user: root
    run_once: true

  - name: Fetch stats processess current state
    vsd_monit:
      state: group_summary
      group: vsd-stats
    until: stats_current_state['state']['{{ item }}'] == 'running' or stats_current_state['state']['{{ item }}'] == 'status ok'
    retries: 10
    delay: 30
    remote_user: root
    with_items: "{{ stats_current_state.state.keys() }}"
    run_once: true

  - name: Verify stats processes are started/running
    assert:
      that: stats_current_state['state']['{{ item }}'] == 'running' or stats_current_state['state']['{{ item }}'] == 'status ok'
      msg: item  is still running
    with_items: "{{ stats_current_state.state.keys() }}"
    run_once: true
  when: inventory_hostname in groups['vsds']
