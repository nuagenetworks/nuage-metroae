---
- name: Pull facts on target_server {{ target_server }}
  action: setup
  remote_user: "{{ target_server_username }}"
  delegate_to: "{{ target_server }}"

- name: Check target for supported OS
  fail: msg="Unsupported OS family ({{ ansible_os_family }})"
  when: ansible_os_family not in vsc_target_server_os_family_list

- name: Check target memory
  fail: msg="Not enough memory ({{ ansible_memtotal_mb }})"
  when: ansible_memtotal_mb < vsc_target_server_memory_mb_min

- name: Check target cores
  fail: msg="Not enough cores ({{ ansible_processor_vcpus }})"
  when: ansible_processor_vcpus < vsc_target_server_vcpus_min

- name: Check target bridges
  fail: msg="Required network bridges not found"
  when: (mgmt_bridge not in ansible_interfaces) or
        (data_bridge not in ansible_interfaces)

- name: Check if required OS packages are installed
  command: rpm -q qemu-kvm libvirt bridge-utils libguestfs-tools libvirt-python
  when: ansible_os_family | match("RedHat")
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"
  register: rpm_check
  ignore_errors: True

- block:
  - name: If RedHat, install packages for RedHat OS family distros
    yum: name={{ item }} state=present
    with_items:
     - qemu-kvm
     - libvirt
     - bridge-utils
     - libguestfs-tools
     - libvirt-python

  - name: Make sure libvirtd has started
    service:
      name: libvirtd
      enabled: yes
      state: started

  when: ansible_os_family | match("RedHat") and rpm_check.rc == 1
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Install packages for Debian OS family distros
  remote_user: "{{ target_server_username }}"
  delegate_to: "{{ target_server }}"
  apt: name={{ item }} state=present
  with_items:
   - qemu-kvm
   - libvirt-bin
   - bridge-utils
   - libguestfs-tools
   - python-libvirt
  when: ansible_os_family | match("Debian")

- name: Pull facts on target_server
  action: setup
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: List the Virtual Machines
  virt: command=list_vms
  register: virt_vms
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Verify that the VM is not already running
  assert:
    that: "vmname not in virt_vms.list_vms"
    msg: "{{ vmname }} is already running on {{ target_server }}"

- name: Include OS-specific variables.
  include_vars: "{{ ansible_os_family }}.yml"

- name: Create VSC directory
  file: path={{ images_path }}/{{ vmname }} state=directory owner={{ libvirt.user }} group={{ libvirt.group }}
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Copy VSC qcow2 image to {{ target_server }}
  copy: src={{ vsc_qcow2_path }}/{{ vsc_qcow2_file_name }} dest={{ images_path }}/{{ vmname }}/{{ inventory_hostname }}.qcow2 owner={{ libvirt.user }} group={{ libvirt.group }}
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Setup VSC temporary configuration files
  template: src={{ item }}.j2 backup=no dest={{ images_path }}/{{ vmname }}/{{ item }}
  delegate_to: "{{ target_server }}"
  with_items:
    - bof.cfg
    - config.cfg
  remote_user: "{{ target_server_username }}"

- name: Copy temporary configuration files to the VSC image
  command: guestfish --rw -a {{ images_path }}/{{ vmname }}/{{ inventory_hostname }}.qcow2 -m {{ vsc_partition }} copy-in {{ images_path }}/{{ vmname }}/{{ item }} /
  delegate_to: "{{ target_server }}"
  with_items:
    - bof.cfg
    - config.cfg
  remote_user: "{{ target_server_username }}"

- name: Remove temporary configuration files
  file: path={{ images_path }}/{{ vmname }}/{{ item }} state=absent
  delegate_to: "{{ target_server }}"
  with_items:
    - bof.cfg
    - config.cfg
  remote_user: "{{ target_server_username }}"

- name: Define VSC guest VM
  virt: name={{ vmname }}
        command=define
        xml="{{ lookup('template', 'vsc.xml.j2') }}"
        uri=qemu:///system
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Mark VSC as autostart
  virt: name={{ vmname }}
        state=running
        autostart=True
        uri=qemu:///system
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"
  when: ansible_version.full | version_compare('2.3', '>=')

- block:
  - name: "Configure VM to autostart"
    command: virsh autostart {{ vmname }}
    delegate_to: "{{ target_server }}"
    remote_user: "{{ target_server_username }}"

  - name: "Run VSC VM"
    virt: name="{{ vmname }}"
          state=running
          uri=qemu:///system
    delegate_to: "{{ target_server }}"
    remote_user: "{{ target_server_username }}"
  when: ansible_version.full | version_compare('2.3', '<')

- name: Get updated VM information from {{ target_server }}
  virt: command=info
  register: virt_info
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Verify that VSC VM is running
  assert: { that: "virt_info['{{ vmname }}']['state'] == 'running'" }
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: Wait for VSC ssh to be ready
  local_action:
    module: wait_for
    port: "22"
    host: "{{ hostname }}"
    search_regex: OpenSSH
    delay: 1
