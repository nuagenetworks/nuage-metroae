---
- name: Gathering info on VM
  connection: local
  vmware_guest:
    hostname: "{{ target_server }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    name: "{{ inventory_hostname }}"
    validate_certs: no
    state: gatherfacts
  register: vsc_vm_facts
  ignore_errors: yes

- debug: var=vsc_vm_facts verbosity=1

- name: Verify the VSC VM does not exist
  assert: 
    that: "vsc_vm_facts.failed is defined"
    msg: "VM {{ inventory_hostname }} already exists, quiting"

- name: Deploy VSC Image on vCenter
  connection: local
  command: >
    {{ vcenter.ovftool }}
    --acceptAllEulas
    --noSSLVerify
    --powerOn
    --machineOutput
    -dm=thin
    -ds={{ vcenter.datastore }}
    -n={{ inventory_hostname }}
    --net:"Management Network={{ mgmt_bridge }}"
    --net:"Datapath Network={{ data_bridge }}"
    --prop:"DHCP=False"
    --prop:"Management_IP={{ mgmt_ip }}/{{ mgmt_netmask_prefix }}"
    {% if vsc_static_route_list[0] is defined %}
    --prop:"Static_Routes={% for sr in vsc_static_route_list %}{{ sr }} {{ mgmt_gateway }}{% if not loop.last %};{% endif %}{% endfor %}"
    {% else %}
    --prop:"Static_Routes="
    {% endif %}
    --prop:"DNS_Server_1={{ dns_server_list[0] }}"
    {% if dns_server_list[1] is defined %}
    --prop:"DNS_Server_2={{ dns_server_list[1] }}"
    {% else %}
    --prop:"DNS_Server_2=0.0.0.0"
    {% endif %}
    {% if dns_server_list[2] is defined %}
    --prop:"DNS_Server_3={{ dns_server_list[2] }}"
    {% else %}
    --prop:"DNS_Server_3=0.0.0.0"
    {% endif %}
    --prop:"DNS_Search_Domain={{ dns_domain }}"
    --prop:"VSC_name={{ inventory_hostname }}"
    --prop:"XMPP_Server={{ vsd_fqdn }}"
    {% if ntp_server_list[0] is defined %}
    --prop:"SNTP_Server={{ ntp_server_list[0] }}"
    {% else %}
    --prop:"SNTP_Server=0.0.0.0"
    {% endif %}
    {% if control_ip is defined and control_netmask_prefix is defined %}
    --prop:"Datapath_IP={{ control_ip }}/{{ control_netmask_prefix }}"
    {% else %}
    --prop:"Datapath_IP=0.0.0.0/32"
    {% endif %}
    --prop:"Datapath_DFGW=0.0.0.0"
    {% if system_ip is defined %}
    --prop:"System_IP={{ system_ip }}"
    {% else %}
    --prop:"System_IP=0.0.0.0"
    {% endif %}
    --prop:"BGP_Peer_1=0.0.0.0"
    --prop:"BGP_Peer_2=0.0.0.0"
    --prop:"Autonomous_System=64000"
    --prop:"BGP_Group=internal"
    "{{ vsc_ova_path }}/{{ vsc_ova_file_name }}"
    vi://'{{ vcenter.username | urlencode }}':'{{ vcenter.password | urlencode }}'@{{ target_server }}/{{ vcenter.datacenter }}/host/{{ vcenter.cluster }} 

- name: Gathering info on VM
  connection: local
  vmware_guest:
    hostname: "{{ target_server }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    name: "{{ inventory_hostname }}"
    validate_certs: no
  register: vsc_vm_facts

- debug: var=vsc_vm_facts verbosity=1

- name: Verify VM is running
  assert:
    that: "not vsc_vm_facts.failed"
    msg: "VSC VM {{ inventory_hostname }} is not created"

- name: Wait for VSC ssh to be ready
  connection: local
  wait_for:
    port: "22"
    host: "{{ mgmt_ip }}"
    search_regex: OpenSSH
    delay: 1

- name: Creating temp folder for config file
  connection: local
  file:
    path: "/tmp/ansible-config-{{ inventory_hostname }}"
    state: directory

- name: Creating VSC config file
  connection: local
  template:
    src: config.cfg.j2
    dest: "/tmp/ansible-config-{{ inventory_hostname }}/config.cfg"

- name: Copy VSC config file to VSC
  connection: local
  command: "sshpass -p admin scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null /tmp/ansible-config-{{ inventory_hostname }}/config.cfg admin@{{ mgmt_ip }}:"

- name: Reboot VSC VM
  connection: local
  vmware_guest:
    hostname: "{{ target_server }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    name: "{{ inventory_hostname }}"
    validate_certs: no
    state: "restarted"

- name: Removing temp folder
  connection: local
  file:
    path: "/tmp/ansible-config-{{ inventory_hostname }}"
    state: absent
