---
- name: Get current version of VSD software
  command: echo $VSD_VERSION
  register: vsd_version
  delegate_to: "{{ groups['vsds'][0] }}"
  remote_user: "{{ vsd_username }}"
  changed_when: false

- debug: var=vsd_version verbosity=1

- name: Add csproot user to CMS Group
  vars:
    nuage_auth:
      api_username: "{{ vsd_auth.username }}"
      api_password: "{{ vsd_auth.password }}"
      api_enterprise: "{{ vsd_auth.enterprise }}"
      api_version: "v{{ vsd_version.stdout.split('.')[0] }}_0"
      api_url: "{{ vsd_auth.api_url }}"
  import_role: 
    name: common
    tasks_from: "vsd-add-user-to-cmsgroup"
  delegate_to: localhost

- block:
  - name: Check if there is a previous Nuage integration present
    yum: list="nuage-openstack-neutron"
    register: nuagepkg_yum_state

  - name: Set variable to define if upgrade is required
    set_fact: 
      nuage_plugin_existing: '{{ (nuagepkg_yum_state.results | selectattr("yumstate", "match", "installed") | list | length != 0) |
        ternary(nuagepkg_yum_state.results[0].release, False) }}' 

  - name: Create temporary directory to hold nuage openstack plugins
    file: path={{ plugin_dir }}/{{ inventory_hostname }} state=directory

  - name: Copy Nuage OS plugins to temporary directory
    copy:
      src: "{{ nuage_os_package_path }}/{{ nuage_os_release }}/{{ nuage_target_architecture }}/{{ item }}"
      dest: "{{ plugin_dir }}/{{ inventory_hostname }}/{{ item }}"
    with_items: 
      - "{{ nuage_os_package_file_name_list }}"

  - name: Install Nuage packages on OS Controller
    yum: name="{{ plugin_dir }}/{{ inventory_hostname }}/{{ item }}" disable_gpg_check=yes state=latest
    with_items:
      - "{{ nuage_os_package_file_name_list }}"

  - name: Create temporary directory to hold post-install and upgrade scripts
    file: path={{ plugin_dir }}/{{ inventory_hostname }}/upgrade state=directory

  - name: Copy plugin upgrade package temporary directory
    copy:
      src: "{{ nuage_os_package_path }}{{ nuage_os_upgrade_pkg_file_name }}"
      dest: "{{ plugin_dir }}/{{ inventory_hostname }}/{{ nuage_os_upgrade_pkg_file_name }}"

  - name: Extract upgrade scripts to folder
    unarchive:
      src: "{{ plugin_dir }}/{{ inventory_hostname }}/{{ nuage_os_upgrade_pkg_file_name }}"
      dest: "{{ plugin_dir }}/{{ inventory_hostname }}/upgrade"
      remote_src: yes

  # BEGIN Horizon changes
  - name: Delete customization line if present from previous run
    lineinfile:
      dest: "{{ horizon_dashboard }}"
      line: "    'customization_module': 'nuage_horizon.customization',"
      state: absent

  - name: Delete horizon extension for CentOS machines from previous run
    blockinfile:
      path: "{{ centos_horizon_vhost }}"
      content: |
        {{ nuage_content }}
      state: absent
    when:
      - ansible_distribution == 'CentOS'

  - name: Delete horizon extension for RedHat machines from previous run
    blockinfile:
      path: "{{ redhat_horizon_vhost }}"
      content: |
        {{ nuage_content }}
      state: absent
    when:
      - ansible_distribution == 'RedHat'

  - name: Delete nuage css part in horizon settings from previous run
    lineinfile:
      dest: "{{ nuage_css_file }}"
      line: "{{ nuage_css_line }}"
      state: absent
 
  - name: Add nuage customization line to horizon dashboard settings
    lineinfile:
      dest: "{{ horizon_dashboard }}"
      insertafter: UNAUTHORIZED},
      line: "    'customization_module': 'nuage_horizon.customization',"


  - name: Configure horizon extension for CentOS machines
    blockinfile:
      path: "{{ centos_horizon_vhost }}"
      insertafter: "## Alias declarations for resources outside the DocumentRoot"
      content: |
        {{ nuage_content }}
    when:
      - ansible_distribution == 'CentOS'

  - name: Configure horizon extension for RHEL machines
    blockinfile:
      path: "{{ redhat_horizon_vhost }}"
      insertafter: "## Alias declarations for resources outside the DocumentRoot"
      content: |
        {{ nuage_content }}
    when:
      - ansible_distribution == 'RedHat'

  - name: Add nuage css part in horizon settings
    lineinfile:
      dest: "{{ nuage_css_file }}"
      line: "{{ nuage_css_line }}"
      state: present

  # END Horizon changes 

  # BEGIN Nova changes
  - name: Configure nova to use neutron
    ini_file:
      dest: "{{ nova_conf_file }}"
      section: "{{ item.section }}"
      option: "{{ item.option }}"
      value: "{{ item.value }}"
      backup: yes
    with_items:
      - { section: "DEFAULT", option: "use_neutron", value: "True" }
      - { section: "neutron", option: "ovs_bridge", value: "alubr0" }

  # END Nova changes

  # BEGIN Neutron changes
  - name: Create dir for nuage plugin in neutron folder
    file:
      path: "{{ neutron_nuage_plugin_folder }}"
      state: directory

  - name: Find out if an existing Nuage plugin ini file exists
    stat: path="/etc/neutron/plugins/nuage/nuage_plugin.ini"
    register: plugin_file_stat
    
  - name: Copy ini contents to created file
    template:
      src: "nuage_plugin.ini.j2"
      dest: "/etc/neutron/plugins/nuage/nuage_plugin.ini"
    when: nuage_plugin_existing == False or plugin_file_stat.stat.exists == False
    notify: restart neutron

  - name: Create symbolic link
    file:
      src: /etc/neutron/plugins/nuage/nuage_plugin.ini
      dest: /etc/neutron/plugin.ini
      state: link
      force: yes
    notify: restart neutron


  - name: Configure main neutron configuration file
    ini_file:
      dest: "{{ neutron_conf_file }}"
      section: "{{ item.section }}" 
      option: "{{ item.option }}"
      value: "{{ item.value }}"
      backup: yes
    with_items:
      - { section: "DEFAULT", option: "allow_overlapping_ips", value: "True" }
      - { section: "DEFAULT", option: "core_plugin", value: "ml2" }
      - { section: "DEFAULT", option: "service_plugins", value: "NuageL3, NuageAPI, NuagePortAttributes, trunk" }
      - { section: "DEFAULT", option: "vnic_type", value: "normal" }
      - { section: "DEFAULT", option: "vlan_transparent", value: "True" }
      - { section: "service_providers", option: "service_provider", value: "LOADBALANCERV2:Haproxy:neutron_lbaas.drivers.haproxy.plugin_driver.HaproxyOnHostPluginDriver:default" }
    notify: restart neutron

  - name: Configure ML2 configuration file
    ini_file:
      dest: "{{ ml2_conf_file }}"
      section: "{{ item.section }}" 
      option: "{{ item.option }}"
      value: "{{ item.value }}"
      backup: yes
    with_items:
      - { section: "ml2", option: "type_drivers", value: "vxlan" }
      - { section: "ml2", option: "tenant_network_types", value: "vxlan" }
      - { section: "ml2", option: "mechanism_drivers", value: "nuage" }
      - { section: "ml2", option: "extension_drivers", value: "nuage_subnet, nuage_port, port_security" }
      - { section: "ml2_type_vxlan", option: "vni_ranges", value: "1:1000" }
    notify: restart neutron

  - name: Ensure the neutron-server service file has correct ExecStart statement
    ini_file:
      dest: "{{ neutron_service_file }}"
      section: "Service"
      option: "ExecStart"
      value: "{{ neutron_service_exec }}"
      no_extra_spaces: yes
    notify: restart neutron

  - name: Read out Neutron DB Alembic current revisions
    shell: "{{ neutron_db_manage_current }}"
    changed_when: false
    register: current_revisions

  - name: Read out Neutron DB Alembic heads revisions
    shell: "{{ neutron_db_manage_heads }}"
    changed_when: false
    register: heads_revisions

  - name: Run the Neutron DB migration script
    shell: "{{ neutron_db_manage_upgrade }}"
    when: current_revisions.stdout != heads_revisions.stdout
    notify: restart neutron

  # END Neutron Changes

  - name: Generate CMS ID
    command: "{{ generate_cms_id }}"
    args:
      chdir: "{{ plugin_dir }}/{{ inventory_hostname }}/upgrade"
    register: cms_id_output
    changed_when: cms_id_output.stdout is not search("No new cms_id will be generated.")
    notify: restart neutron


  - debug: var=cms_id_output verbosity=1

  remote_user: "{{ target_server_username }}"
