---
- name: Pull facts of localhost
  connection: local
  action: setup
  remote_user: "root"

- include: report_header.yml

- block:
  - name: get the username running the deploy
    local_action: command whoami
    register: username_on_the_host

  - debug: var=username_on_the_host

  - name: Create backup directory  for VSD2
    set_fact: backup_dir="{{ images_path }}/{{ inventory_hostname }}.backup.{{ ansible_date_time.date }}@{{ ansible_date_time.time }}"
  
  - file:
      path: "{{ backup_dir }}"
      state: directory
      mode: 0755
    delegate_to: "{{ target_server }}"
    remote_user: "{{ target_server_username }}"

  - name: Copy the VSD2 VM image dir to the backup directory for rollback
    command: "cp -r {{ images_path }}/{{ inventory_hostname }}/{{ vsd_current_qcow2_file_name}} {{ backup_dir }}"
    delegate_to: "{{ target_server }}"
    remote_user: "{{ target_server_username }}"
  
  - name: Get XML for VSD2 VM
    virt:
      name: "{{ inventory_hostname }}"
      command: get_xml
      uri: qemu:///system
    register: vsd_xml
    delegate_to: "{{ target_server }}"
    remote_user: "{{ target_server_username }}"
  
  - debug: var=vsd_xml verbosity=1
  
  - name: Write VM XML to file
    copy:
      content: "{{ vsd_xml.get_xml }}"
      dest: "{{ backup_dir }}/{{ inventory_hostname }}.xml"
    delegate_to: "{{ target_server }}"
    remote_user: "{{ target_server_username }}"
    
  - name: Copy the VSD migration script ISO to VSD's temp directory
    command: "{{ vsd_migration_iso_copy }}"
    remote_user: "{{ username_on_the_host.stdout }}"
    delegate_to: "{{ ansible_deployment_host }}"

  - name: Register target directory status
    stat: path="/media/CDROM"
    register: cdrom_dir
    remote_user: root

  - name: Create target directory to mount ISO if necessary
    file: name="/media/CDROM" state=directory mode=0775
    when: cdrom_dir.stat.exists == false
    remote_user: root

  - name: mount ISO as loop back device
    shell: "mount -o loop /tmp/{{ vsd_migration_iso_file_name }} /media/CDROM/"
    register: mount_out
    remote_user: root

  - debug: var=mount_out verbosity=1

  - name: List VSD-related mounts
    shell: "mount | grep VSD | grep /media/CDROM"
    register: mount_file
    remote_user: root
  
  - name: Print mount output when verbosity >= 1
    debug: var=mount_file verbosity=1

  - name: Verify that the ISO is mounted
    assert:
      that:
        - "'iso' in mount_file.stdout"
      msg: "Did not find iso file in mount path"

  - name: Decouple VSD Node2
    command: "/media/CDROM/decouple.sh -y"
    remote_user: root
  
  - name: Pause for decoulping to finish
    pause:
      seconds: 10

  - name: Execute list_p1db command on node2
    command: "{{ p1db_cmd }}"
    register: list_p1db_output
    remote_user: root

  - name: Print ejabberd list_p1db output when verbosity >= 1
    debug: var=list_p1db_output verbosity=1
 
  - name: Create local variable with p1db output to json
    set_fact: ejabberd_p1db_json="{{ list_p1db_output.stdout|ejabberd_p1db_to_json }}"
  
  - name: Write p1bd JSON to file
    nuage_append: filename="{{ report_path }}" text="{{ inventory_hostname }} {{ ejabberd_p1db_json|to_nice_json }}\n"
    remote_user: "{{ ansible_sudo_username }}"
    delegate_to: "{{ ansible_deployment_host }}"


  - name: Verify the ejabbered p1db output is empty string
    assert:
      that: "not ejabberd_p1db_json['p1db_users']"
      msg: "Ejabbered is not decoupled"

  - name: Execute list_cluster command on node2
    command: "{{ ejabber_decouple }}"
    register: list_cluster_output
    remote_user: root
    
  - name: Print ejabberd list_cluster output when verbosity >= 1
    debug: var=list_cluster_output verbosity=1

  - name: Create local variable with ejabberd cluster output to json
    set_fact: ejabberd_cluster_json="{{ list_cluster_output.stdout|ejabberd_cluster_to_json }}"
  
  - name: Write cluster JSON to file
    nuage_append: filename="{{ report_path }}" text="{{ inventory_hostname }} {{ ejabberd_cluster_json|to_nice_json }}\n"
    remote_user: "{{ ansible_sudo_username }}"
    delegate_to: "{{ ansible_deployment_host }}"

  - name: Veriy cluster output lists only itself
    assert:
      that: 
        - "'ejabberd@{{ inventory_hostname }}' == ejabberd_cluster_json['cluster_users'][0]"
        - "ejabberd_cluster_json['cluster_users'] | length == 1" 
      msg: "Ejabberd is not decoupled successfully"
 
  - name: Excute connected_users command on node2
    command: "{{ connected_users }}"
    register: client_list
    until: client_list.stdout.find("cna") != -1
    retries: 10
    delay: 20
    remote_user: root

  - name: Print ejabberd connected_users output when verbosity >= 1
    debug: var=client_list verbosity=1

  - name: Create local variable with ejabberd connected clients to json
    set_fact: ejabberd_clients_json="{{ client_list.stdout|ejabberd_clients_to_json }}"
  
  - name: Write clients JSON to file
    nuage_append: filename="{{ report_path }}" text="{{ inventory_hostname }} {{ ejabberd_clients_json|to_nice_json }}\n"
    remote_user: "{{ ansible_sudo_username }}"
    delegate_to: "{{ ansible_deployment_host }}"

  - name: Verify ejabbered does not contain clients other that itself
    assert:
      that: "ejabberd_clients_json['connected_clients'] | length == 3"
      msg: " Ejabberd has more than 3 connected clients than itself" 
  when: 
    - inventory_hostname == groups['vsds'][1]
    - vsd_sa_or_ha == 'ha'
