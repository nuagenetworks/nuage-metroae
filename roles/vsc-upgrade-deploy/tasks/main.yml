- name: Clean known_hosts of VSC's
  command: ssh-keygen -R "{{ mgmt_ip }}"

- name: Get output of 'show bof'
  vsc_command:
    command: show bof
    mgmt_ip: "{{ vsc_creds.mgmt_ip }}"
    username: "{{ vsc_creds.username }}"
    password: "{{ vsc_creds.password }}"
  register: bof_config

- name: Print 'show bof' when verbosity >= 1
  debug: var=bof_config verbosity=1

- name: Create local variable with bof config in json
  set_fact:
    bof_json: "{{ bof_config.results|show_bof_to_json }}"

- name: Print bof config in json  when verbosity >= 1
  debug: var=bof_json verbosity=1

- name: Get current file version of image on VSC
  vsc_command:
    command: file version "{{ bof_json['primary_image'] }}"
    mgmt_ip: "{{ vsc_creds.mgmt_ip }}"
    username: "{{ vsc_creds.username }}"
    password: "{{ vsc_creds.password }}"
  register: image

- name: Print image version when verbosity >= 1
  debug: var=image verbosity=1

- name: Create local variable with image version in json
  set_fact:
    version_json: "{{ image.results|image_version_to_json }}"

- name: Print image version in json  when verbosity >= 1
  debug: var=version_json verbosity=1

- name: Copy new cpm.tim VSC image to VSC nodes
  expect:
    command: "{{ vsc_image_copy }}"
    responses:
      (?i)yes: "yes"
      (?i)password: "{{ vsc_password|default('admin') }}"
    timeout: "{{ vsc_scp_timeout }}"

- name: Copy new boot.tim VSC image to VSC nodes
  expect:
    command: "{{ vsc_boot_image_copy }}"
    responses:
      (?i)yes: "yes"
      (?i)password: "{{ vsc_password|default('admin') }}"
    timeout: "{{ vsc_scp_timeout }}"
  when: test_boot | default(False)


- name: Get file version of new image on VSC
  vsc_command:
    command: file version "{{ bof_json['primary_image'] }}"
    mgmt_ip: "{{ vsc_creds.mgmt_ip }}"
    username: "{{ vsc_creds.username }}"
    password: "{{ vsc_creds.password }}"
  register: new_image

- name: Print new image version when verbosity >= 1
  debug: var=new_image verbosity=1

- name: Create local variable with new_image version in json
  set_fact:
    new_version_json: "{{ new_image.results|image_version_to_json }}"

- name: Verify new cpm.tim file is transferred
  assert:
    that: "version_json.vsc_image_version != new_version_json.vsc_image_version"
    msg: "Old VSC version - {{ version_json.vsc_image_version }} and new VSC version - {{ new_version_json.vsc_image_version }} are same"

- name: Reboot VSC VM
  vsc_command:
    command: admin reboot now
    mgmt_ip: "{{ vsc_creds.mgmt_ip }}"
    username: "{{ vsc_creds.username }}"
    password: "{{ vsc_creds.password }}"
  ignore_errors: true
  when: target_server_type | match('kvm') or target_server_type | match('vcenter')

- name: Reboot VSC VM
  os_server_actions:
    auth:
      "{{ os_auth }}"
    server: "{{ inventory_hostname }}"
    action: reboot
    wait: no
  when: target_server_type | match('heat')

- name: Wait for VSC ssh to be ready
  local_action:
    module: wait_for
    port: "22"
    host: "{{ mgmt_ip }}"
    search_regex: OpenSSH
    delay: 1
