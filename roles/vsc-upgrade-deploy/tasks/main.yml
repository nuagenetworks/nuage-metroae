- name: Clean known_hosts of VSC's on "{{ target_server }}"
  command: ssh-keygen -R "{{ mgmt_ip }}" -f /root/.ssh/known_hosts
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: "{{ ansible_sudo_username }}"

- name: Get output of 'show bof'
  sros_command:
    commands:
      - show bof
    provider: "{{ vsc_creds }}"
  register: bof_config
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: "{{ ansible_sudo_username }}"

- name: Print 'show bof' when verbosity >= 1
  debug: var=bof_config.stdout[0] verbosity=1

- name: Create local variable with bof config in json
  set_fact:
    bof_json: "{{ bof_config.stdout[0]|show_bof_to_json }}"

- name: Print bof config in json  when verbosity >= 1
  debug: var=bof_json verbosity=1

- name: Copy current tim file as a backup for rollback
  sros_command:
    commands:
      - file copy "{{ bof_json['image_folder'] }}/cpm.tim" "{{ bof_json['image_folder'] }}/cpm.tim.backup" force
    provider: "{{ vsc_creds }}"
  register: backup_image
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: "{{ ansible_sudo_username }}"

- name: Get current file version of image on VSC
  sros_command:
    commands:
      - file version "{{ bof_json['image_folder'] }}/cpm.tim"
    provider: "{{ vsc_creds }}"
  register: image
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: "{{ ansible_sudo_username }}"

- name: Print image version when verbosity >= 1
  debug: var=image.stdout[0] verbosity=1

- name: Create local variable with image version in json
  set_fact:
    version_json: "{{ image.stdout[0]|image_version_to_json }}"

- name: Print image version in json  when verbosity >= 1
  debug: var=version_json verbosity=1

- name: Copy new VSC image to VSC nodes
  expect:
    command: "{{ vsc_image_copy }}"
    responses:
      (?i)password: "{{ vsc_password }}"
    timeout: "{{ vsc_scp_timeout }}"
  remote_user: "{{ ansible_sudo_username }}"
  delegate_to: "{{ ansible_deployment_host }}"

- name: Reboot VSC VM
  sros_command:
    commands:
      - admin reboot now
    provider: "{{ vsc_creds }}"
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: "{{ ansible_sudo_username }}"
  ignore_errors: true
  when: target_server_type == 'kvm' or target_server_type == 'vcenter'

- name: Reboot VSC VM
  os_server_actions:
    auth:
      "{{ os_auth }}"
    server: "{{ inventory_hostname }}"
    action: reboot
    wait: no
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: "{{ ansible_sudo_username }}"
  when: target_server_type == 'heat'

- name: Wait for VSC ssh to be ready
  local_action:
    module: wait_for
    port: "22"
    host: "{{ mgmt_ip }}"
    search_regex: OpenSSH
    delay: 1

