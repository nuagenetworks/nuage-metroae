---
- block:

  - block:

    - name: Find name of Stats VM QCOW2 File
      find: path="{{ nuage_unzipped_files_dir }}/vstat"  pattern="*.qcow2" recurse=yes
      register: rc_vstat_file

    - debug: var=rc_vstat_file verbosity=1

    - name: Verify that a Stats VM QCOW2 file was found
      assert: {
        that: "{{ rc_vstat_file.matched }} > 0",
        msg: "Unable to find Stats VM QCOW2 image file"
        }

    - name: Register VSTAT QCOW2 variables with proper path and image locations for use in other playbooks
      set_fact:
        qcow2_path: "{{ rc_vstat_file.files[0].path | dirname }}"
        qcow2_file_name: "{{ rc_vstat_file.files[0].path | basename }}"
      when: rc_vstat_file.matched > 0

    when: myvstats | map(attribute='target_server_type') | list | issuperset(["kvm"])

  - block:
    - name: Find name of Stats VM OVF/OVA File
      find: path="{{ nuage_unzipped_files_dir }}/vstat"  patterns="*.ova,*.ovf" recurse=yes
      register: rc_vstat_file

    - debug: var=rc_vstat_file verbosity=1

    - name: Verify that a Stats VM OVF file was found
      assert: {
        that: "{{ rc_vstat_file.matched }} > 0",
        msg: "Unable to find Stats VM OVF/OVA image file"
        }

    - name: Register VSTAT OVF/OVA variables with proper path and image locations for use in other playbooks
      set_fact:
        ova_or_ovf_path: "{{ rc_vstat_file.files[0].path | dirname }}"
        ova_or_ovf_file_name: "{{ rc_vstat_file.files[0].path | basename }}"
      when: rc_vstat_file.matched > 0

    when: myvstats | map(attribute='target_server_type') | list | issuperset(["vcenter"])

  when:
    - myvstats is defined
    - "'install' in vstat_operations_list|default(['None']) or
      'upgrade' in vstat_operations_list|default(['None'])"
  tags:
    - vstat

- block:

  - name: Find name of VSTAT backup Package Files (EL7 architecture)
    find: path="{{ nuage_upgrade_unzipped_files_dir }}/vstat/backup"  pattern="*.py" recurse=yes
    register: rc_vstat_backup_scripts

  - debug: var=rc_vstat_backup_scripts verbosity=1

  - name: Verify that VSTAT backup scripts are found
    assert: {
      that: "{{ rc_vstat_backup_scripts.matched }} > 0",
      msg: "Unable to find VSTAT backup scripts"
      }

  - name: Register VSTAT backup script variables with proper path and script locations for use in other playbooks
    set_fact:
      vstat_backup_scripts_path: "{{ rc_vstat_backup_scripts.files[0].path | dirname }}/"
      vstat_backup_scripts_file_list: "{{ rc_vstat_backup_scripts.files |  map(attribute='path') | list | map('basename') | list | to_yaml }}"
  when:
    - myvstats is defined
    - "'upgrade' in vstat_operations_list|default(['None'])"
  tags:
    - vstat

- name: Set myvstat_check
  set_fact: myvstat_check={{myvstats is defined}}

- name: Assign empty list to myvstats if it is undefined
  set_fact: myvstats= default([])
  when: not myvstat_check

- name: Create host_vars files for vstat
  template: src=vstat.j2 backup=no dest={{ inventory_dir }}/host_vars/{{ item.hostname }}
  with_items: "{{ myvstats }}"
  when: myvstat_check
