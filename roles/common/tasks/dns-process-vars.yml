---
###################
# DNS - DNS VM
###################

- block:

  - block:
    - name: create dns directory
      file: path={{ nuage_unzipped_files_dir }}/dns state=directory
      remote_user: "{{ ansible_sudo_username }}"

    - name: Find name of VSTAT VM QCOW2 File
      find: path="{{ nuage_unzipped_files_dir }}/vstat"  pattern="*.qcow2" recurse=yes
      register: rc_vstat_file
      remote_user: "{{ ansible_sudo_username }}"

    - name: Verify that VSTAT VM QCOW2 file was found
      assert: {
        that: "{{ rc_vstat_file.matched }} > 0",
        msg: "DNS image is taken from VSTAT, but we can't find the image path. Make sure myvstats is defined in build_vars.yml"
        }

    - name: Copy vstat qcow2 image to dns directory
      copy: src={{ rc_vstat_file.files[0].path | basename }} dest={{ nuage_unzipped_files_dir }}/dns/dns.qcow2 force=yes
      remote_user: "{{ ansible_sudo_username }}"

    - name: Find name of DNS VM QCOW2 File
      find: path="{{ nuage_unzipped_files_dir }}/dns"  pattern="*.qcow2" recurse=yes
      register: rc_dns_file
      remote_user: "{{ ansible_sudo_username }}"

    - debug: var=rc_dns_file verbosity=1

    - name: Verify that a DNS VM QCOW2 file was found
      assert: {
        that: "{{ rc_dns_file.matched }} > 0",
        msg: "Unable to find DNS VM QCOW2 image file"
        }

    - name: Register DNS QCOW2 variables with proper path and image locations for use in other playbooks
      set_fact:
        qcow2_path: "{{ rc_dns_file.files[0].path | dirname }}"
        qcow2_file_name: "{{ rc_dns_file.files[0].path | basename }}"
      when: rc_dns_file.matched > 0

    when: mydnss | map(attribute='target_server_type') | list | issuperset(["kvm"]) or mydnss | map(attribute='target_server_type') | list | issuperset(["heat"])

  when:
    - mydnss is defined
    - "'install' in dns_operations_list|default(['None']) or
      'upgrade' in dns_operations_list|default(['None'])"
  tags:
    - dns

- name: Set mydns_check
  set_fact: mydns_check={{mydnss is defined}}

- name: Assign empty list to mydnss if it is undefined
  set_fact: mydnss= default([])
  when: not mydns_check

- name: Create host_vars files for dns
  template: src=dns.j2 backup=no dest={{ playbook_dir }}/host_vars/{{ item.hostname }}
  with_items: "{{ mydnss }}"
  when: mydns_check
