---
- name: Wait for active VSC ssh to be ready
  local_action:
    module: wait_for
    port: "22"
    host: "{{ active_controller_addr }}"
    search_regex: OpenSSH
    delay: 1

- name: Pull facts on VRS target {{ inventory_hostname }}
  remote_user: "{{ target_server_username }}"
  action: setup

- name: Get ovs-vsctl show output
  command: ovs-vsctl show
  register: ovs_show_result
  remote_user: "{{ target_server_username }}"

- name: Create a temporary directory name using timestamp
  set_fact:
    tmp_scripts_dir: "{{ playbook_dir }}/scripts/{{ lookup('pipe', 'date +%Y%m%d%H%M%S.%5N') }}/tmp"

- debug: var=tmp_scripts_dir verbosity=1

- name: Create a temporary directory
  local_action: file path={{ tmp_scripts_dir }}  state=directory

- name: Copy ovs-vsctl show output to a temporary file
  local_action: copy content={{ ovs_show_result.stdout }} dest={{ tmp_scripts_dir }}/{{ inventory_hostname }}.tmp

- name: Run verification script for OVS show command
  local_action: command python {{ playbook_dir }}/scripts/ovs_result_verify.py {{ node_ip_addr }} {{ tmp_scripts_dir }}/{{ inventory_hostname }}.tmp
  register: ovs_show_result

- name: Run verification script for VRS
  local_action: command python {{ playbook_dir }}/scripts/vrs_verify.py {{ node_ip_addr }} {{ active_controller_addr }} {{ standby_controller_addr }} {{ playbook_dir }} "{{ ovs_show_result.stdout }}"
  register: pass

- name: Check result of VRS verification script
  fail: msg={{ pass.stdout }}
  when: pass.stdout | search("(?i)Error")

- name: VRS Verification Result Success Status
  debug: var=pass.stdout verbosity=1

- name: set dockermon_postdeploy variable as per dockermon_install
  set_fact: 
    dockermon_check: dockermon_install | default(false)

- block:
  # Dockermon feature tasks
  - name: Get Dockermon version number on Debian OS family distros
    set_fact: 
      version_deb: "{{ dockermon_package_file_name|regex_replace('^.*nuage-docker-monitor_(\\d+)\\..*?$', '\\1') }}"
    when: ansible_os_family == "Debian"

  - name: Get Dockermon version number on RedHat OS family distros
    set_fact: 
      version_rh: "{{ dockermon_package_file_name|regex_replace('^.*nuage-docker-monitor-(\\d+)\\..*?$', '\\1') }}"
    when: ansible_os_family == "RedHat"

  # Ansible registers skipped variables as well. So need to create separate variables for version_xx and combine them in this task
  - name: Combine version number
    set_fact:
      version: "{{ version_deb if ansible_os_family == 'Debian' else version_rh if ansible_os_family == 'RedHat' else '' }}"

  - name: Get docker status
    shell: service docker status | head -n 5
    register: docker_status_result
    remote_user: "{{ target_server_username }}"

  - name: Get dockermon status v3
    command: service nuage-docker-monitor status
    register: dockermon_status_result_v3
    remote_user: "{{ target_server_username }}"
    when: version == '3' and ansible_os_family == "Debian"

  - name: Get dockermon status v4
    command: /usr/share/openvswitch/scripts/nuage-docker-monitor.init status
    register: dockermon_status_result_v4
    remote_user: "{{ target_server_username }}"
    when: version == '4' or ansible_os_family == "RedHat"

  # Ansible registers skipped variables as well. So need to create separate variables for dockermon_status_result_vx and combine them in this task
  - name: Combine dockermon status result
    set_fact:
      dockermon_status_result: "{{ dockermon_status_result_v3 if version == '3' and ansible_os_family == 'Debian'  else dockermon_status_result_v4 if version == '4' or ansible_os_family == 'RedHat' else '' }}"

  - name: Get dockermon process details
    shell: ps -eo lstart,cmd|grep nuage-docker-monitor
    register: ps_docker_result
    remote_user: "{{ target_server_username }}"

  - name: Get dockermon logs
    shell: tail -n 3 $(ls -t /var/log/openvswitch/nuage-docker-monitor*| head -n 1)
    register: docker_mon_logs
    remote_user: "{{ target_server_username }}"

  - name: Create a temporary copy of the dockermon verification command outputs on ansible host
    local_action: template src=dockermon_results.yml.j2 backup=no dest={{ tmp_scripts_dir }}/{{ inventory_hostname }}.yml

  - name: Run verification script for Dockermon
    local_action: command python {{ playbook_dir }}/scripts/dockermon_result_verify.py {{ tmp_scripts_dir }}/{{ inventory_hostname }}.yml
    register: dockermon_pass

  - name: Check result of Dockermon verification script
    fail: msg={{ dockermon_pass.stdout }}
    when: dockermon_pass.stdout | search("(?i)Error")

  - name: Dockermon Verification Result Success Status
    debug: var=dockermon_pass.stdout verbosity=1
  # Only when the feature flag is true
  when: "{{ dockermon_postdeploy }} == true and dockermon_check == true"

- name: Delete the temporary directory
  local_action: file path={{ tmp_scripts_dir }}  state=absent
