- block:
  - name: Clean known_hosts of VSC's on "{{ target_server }}"
    command: ssh-keygen -R "{{ mgmt_ip }}"
    delegate_to: "{{ ansible_deployment_host }}"
    remote_user: "{{ ansible_sudo_username }}"

  - name: Get output of 'show bof'
    sros_command:
      commands:
        - show bof
      provider: "{{ vsc_creds }}"
    register: bof_config
    connection: local

  - name: Print 'show bof' when verbosity >= 1
    debug: var=bof_config.stdout[0] verbosity=1

  - name: Create local variable with bof config in json
    set_fact:
      bof_json: "{{ bof_config.stdout[0]|show_bof_to_json }}"

  - name: Print bof config in json  when verbosity >= 1
    debug: var=bof_json verbosity=1

  - name: Get current file version of image on VSC
    sros_command:
      commands:
        - file version "{{ bof_json['image_folder'] }}/cpm.tim"
      provider: "{{ vsc_creds }}"
    register: image
    connection: local

  - name: Print image version when verbosity >= 1
    debug: var=image.stdout[0] verbosity=1

  - name: Delete current primary image
    sros_command:
      commands:
        - file delete "{{ bof_json['image_folder'] }}/cpm.tim" force
      provider: "{{ vsc_creds }}"
    register: image_delete
    connection: local

  - name: Copy backup images taken before the upgrade as primary image
    sros_command:
      commands:
        - file copy "{{ bof_json['image_folder'] }}/cpm.tim.backup" "{{ bof_json['image_folder'] }}/cpm.tim"
      provider: "{{ vsc_creds }}"
    register: image_move
    connection: local

  - name: Reboot VSC VM
    sros_command:
      commands:
        - admin reboot now
      provider: "{{ vsc_creds }}"
    connection: local
    ignore_errors: true
    when: target_server_type == 'kvm'

  - name: Wait for VSC ssh to be ready
    local_action:
      module: wait_for
      port: "22"
      host: "{{ mgmt_ip }}"
      search_regex: OpenSSH
      delay: 1

  - name: Clean known_hosts of VSC's
    command: ssh-keygen -R "{{ mgmt_ip }}"
    delegate_to: "{{ ansible_deployment_host }}"
    remote_user: "{{ ansible_sudo_username }}"

  - name: Get output of 'show vswitch-controller xmpp-server detail'
    sros_command:
      commands:
        - show vswitch-controller xmpp-server detail
      provider: "{{ vsc_creds }}"
    register: xmpp_detail
    connection: local
    until: xmpp_detail.stdout[0].find('Functional') != -1
    retries: 5
    delay: 30

  - name: Print 'show vswitch-controller xmpp-server detail' when verbosity >= 1
    debug: var=xmpp_detail verbosity=1

  - name: Create local variable with xmpp-server detail in json
    set_fact: xmpp_detail_json="{{ xmpp_detail.stdout[0]|xmpp_server_detail_to_json }}"

  - name: Print xmpp-server detail in json when verbosity >= 1
    debug: var=xmpp_detail_json verbosity=1

  - name: Create local variable for xmpp-server state
    set_fact: xmpp_server_state="{{ xmpp_detail_json['State'] }}"

  - name: Print xmpp-server state when verbosity >= 1
    debug: var=xmpp_server_state verbosity=1

  - name: Check for the expected xmpp-server state
    assert: {
      that: "{{ expected_xmpp_server_state == xmpp_server_state }}",
      msg: "Invalid xmpp-server state ({{ xmpp_server_state }}) detected. Expected {{ expected_xmpp_server_state }}. Check 'show vswitch-controller xmpp-server details'."
  }
  - name: define variable to match vsd strings in sh vswitch vsd details
    set_fact:
      vsd1_s: "cna@{{ vsd_fqdn }}"

  - name: Get output of 'show vswitch-controller vsd detail'
    sros_command:
      commands:
        - show vswitch-controller vsd detail
      provider: "{{ vsc_creds }}"
    register: vsd_detail
    connection: local
    remote_user: "{{ ansible_sudo_username }}"
    until: vsd_detail.stdout[0].find(vsd1_s) != -1
    retries: 5
    delay: 30

  - name: Print 'show vswitch-controller vsd' when verbosity >= 1
    debug: var=vsd_detail verbosity=1

  - name: Verify VSD Node1 is found in vsd_detail
    assert:
      that: "'cna@{{ vsd_fqdn }}/{{ groups['vsds'][0].split('.')[0:1] | join('.') }}' in vsd_detail.stdout[0]"
      msg: "VSD Node1 could not be found in 'show vswitch-controller vsd detail'"
    when: vsd_sa_or_ha == 'ha'

  - name: Verify VSD Node1 is found in vsd_detail
    assert:
      that: "'cna@{{ vsd_fqdn }}' in vsd_detail.stdout[0]"
      msg: "VSD Node1 could not be found in 'show vswitch-controller vsd detail'"
    when: vsd_sa_or_ha == 'sa'

  - name: Verify VSD Node3 is found in vsd_detail
    assert:
      that: "'cna@{{ vsd_fqdn }}/{{ groups['vsds'][2].split('.')[0:1] | join('.') }}' in vsd_detail.stdout[0]"
      msg: "VSD Node3 could not be found in 'show vswitch-controller vsd detail'"
    when: vsd_sa_or_ha == 'ha'
  when: inventory_hostname in groups['vscs']
