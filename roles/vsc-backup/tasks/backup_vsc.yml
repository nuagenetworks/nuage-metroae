# Install Pre-Requisites
- name: Pull facts of localhost
  setup:
  delegate_to: localhost

- name: Install pip on RedHat OS family distribution
  yum: name="python-pip" state="present"
  when: ansible_os_family == "RedHat"

- name: Install pip on Debian OS family distribution
  apt: name="python-pip" state="present"
  when: ansible_os_family == "Debian"

- name: Install pexpect module via pip
  pip: name=pexpect state="present"

- name: Set name for backup folder
  set_fact:
    backup_folder: "backup-{{inventory_hostname}}-{{ ansible_date_time.iso8601_basic_short }}"

- name: Create a backup folder on VSC
  sros_command:
    commands:
      - file md "{{ backup_folder }}"
    provider: "{{ vsc_creds }}"
  delegate_to: localhost
  register: dir_status

- name: Verify backup folder is created on VSC
  assert:
    that: "dir_status.stdout[0] == ''"
    msg: "Could not create backup folder on VSC"

- name: Copy bof and existing config files to backup folder on VSC
  sros_command:
    commands:
      - file copy *.cfg "{{ backup_folder }}"
      - file copy "{{ bof_json['primary_image'] }}" "{{ backup_folder }}"
    provider: "{{ vsc_creds }}"
  delegate_to: localhost
  register: copy_status

- name: Print 'file copy *.cfg backup' when verbosity >= 1
  debug: var=copy_status verbosity=1

- name: Create dir on ansible_deployment_host to hold backup files
  file:
    path: "{{metro_backup_root}}/{{ backup_folder }}"
    state: directory

- name: Transfer backup folder from VSC to backup_machine
  expect:
    command: "{{ vsc_scp_backup_folder }}"
    responses:
      (?i)yes: "yes"
      (?i)password: "{{ vsc_password|default('admin') }}"
    timeout: "{{ vsc_scp_timeout_seconds }}"

- name: Create symbolic link to backup location
  file: dest="{{metro_backup_root}}/backup-{{ inventory_hostname }}-latest" src="/tmp/{{  backup_folder }}"  state=link
