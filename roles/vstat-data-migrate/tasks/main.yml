- block:
  - name: Install mount packages
    yum: name={{ item }} state=present
    remote_user: root
    with_items:
      - libnfsidmap
      - nfs-utils

  - name: Create dir with vstat data backup path
    file:
      dest: "{{ vstat_nfs_backup_path }}"
      state: directory
      mode: 0777
      recurse: yes
    remote_user: root

  - name: Mount the nfs folder on to vstat vm
    mount:
      src: "{{ nfs_server_with_folder }}"
      name: "{{ vstat_nfs_backup_path }}"
      state: mounted
      fstype: nfs4
    remote_user: root

  - name: Get the nfs shared folder details
    shell: "mount | grep nfs"
    register: nfs_folder
    remote_user: root

  - block:
    - name: Verify backup folder path is nfs shared
      assert:
        that: vstat_nfs_backup_path[:-1] in nfs_folder.stdout
        msg:  "{{ vstat_nfs_backup_path }} is not nfs shared"
    when: vstat_nfs_backup_path[-1] == '/'

  - name: Copy elasticsearch backup scritps
    copy: src={{ vstat_backup_scripts_path }}/{{ item }}
        dest=/tmp/
    with_items: "{{ vstat_backup_scripts_file_list }}"
    remote_user: root
    run_once: true
   
  - name: Pull facts of localhost
    action: setup
    connection: local
    remote_user: "{{ ansible_sudo_username }}"

  - name: Set name of backup directory
    set_fact: backup_dir_name="backup-{{ inventory_hostname }}-{{ ansible_date_time.iso8601_basic_short }}/"
    run_once: true

  - name: Set name of vstat backup dir
    set_fact: 
      vstat_backup_dir: "{{ vstat_nfs_backup_path }}/{{ backup_dir_name }}"
    run_once: true

  - name: Create backup dir
    file:
      dest: "{{ vstat_backup_dir }}"
      owner: "elasticsearch"
      group: "elasticsearch"
      state: directory
      recurse: yes
      mode: 0777
    remote_user: root
  
  - name: Cleanup backup dir in elasticseach.yml file
    lineinfile:
      dest: "/etc/elasticsearch/elasticsearch.yml"
      regexp: "path.repo"
      state: absent
    remote_user: root

  - name: Configure backup dir in elasticseach.yml file
    lineinfile:
      dest: "/etc/elasticsearch/elasticsearch.yml"
      line: "path.repo: [{{ vstat_backup_dir }}]"
    remote_user: root
 
  - name: Restart elasticsearch process
    systemd:
      name: elasticsearch
      state: restarted
    remote_user: root

  - name: Wait for elasticsearch process to come up
    pause:
      seconds: 20
 
  - name: Get elasticsearch current status
    systemd:
      name: elasticsearch
      state: started
    register: es_status
    remote_user: root
 
  - name: Check elasticsearch status is active
    assert:
      that: es_status.status.ActiveState == 'active'
      msg: "Elasticserach process in not active after restart"
 
  - name: Check elasticsearch process is running
    assert:
      that: es_status.status.SubState == 'running'
      msg: "Elasticsearch process is not running after restart"
 
  - name: Read the repo name to be recreated from the file
    command: "cat /tmp/backup-{{ inventory_hostname }}-latest/repo_snapshot_name"
    register: names
    remote_user: "{{ ansible_sudo_username }}"
    delegate_to: "{{ ansible_deployment_host }}"
    run_once: true
    
  - name: Create repo on the new vstat vm 
    command: "python /tmp/{{ create_repo }}"
    remote_user: root
    run_once: true

  - name: Get the repo created by backup script 
    command: "python /tmp/{{ show_repo }}"
    register: repo_path
    remote_user: root
    run_once: true

  - name: Print contents of show_repo output when verbosity >= 1
    debug: var=repo_path verbosity=1
    run_once: true

  - name: Verify repo is created
    assert:
      that: '"Error in getting repo" not in repo_path.stdout'
      msg: Failed to verify the repo created
    run_once: true
  
  - name: Get the username running the playbooks
    local_action: command whoami
    register: username_on_the_host
    run_once: true
  
  - name: Transfer the backup folder to vstat node
    shell: "{{ transfer_backup_folder }}"
    remote_user: "{{ username_on_the_host.stdout }}"
    delegate_to: "{{ ansible_deployment_host }}"
    run_once: true
   
  - name: Set permissions after transferring the backup files
    file:
      dest: "{{ vstat_backup_dir }}"
      owner: "elasticsearch"
      group: "elasticsearch"
      state: directory
      recurse: yes
      mode: 0777
    remote_user: root
    run_once: true
 
  - name: Restore the snapshot on the new vstat VM
    command: "python /tmp/{{ restore_snapshot }}"
    register: restore_snap
    remote_user: root
    run_once: true

  - name: Print contents of restore_snapshot output when verbosity >= 1
    debug: var=restore_snapshot verbosity=1
    run_once: true

  - name: Get the contents of created snapshot
    command: "python /tmp/{{ show_snapshot }}"
    register: snapshot_contents
    remote_user: root
    run_once: true

  - name: Create local variable with snap_contents output to json
    set_fact: snapshot_contents_json="{{ snapshot_contents.stdout|snapshot_list_indices_to_json }}"
    run_once: true

  - name: Print contents of snapshot_contents output when verbosity >= 1
    debug: var=snapshot_contents verbosity=1
    run_once: true

  - block:
    - name: Verify the contents of the snapshot created
      assert:
        that: '"{{ item }}" in list_of_indices'
        msg: "{{ item }} index was not found"
      with_items: "{{ snapshot_contents_json['indices'] }}"
      run_once: true
    when: list_of_indices is defined

  - block:
    - name: Get the list of all indices
      command: "python /tmp/{{ get_indices }}"
      remote_user: root
      register: indices_output
      run_once: true

    - name: Verify the contents of the snapshot created
      assert:
        that: '"{{ item }}" in indices_output.stdout'
        msg: "{{ item }} index was not found"
      with_items: "{{ snapshot_contents_json['indices'] }}"
      run_once: true
    when: list_of_indices is not defined
  when: 
    - inventory_hostname in groups['vstats']
    - upgrade_from_version != '4.0.1'

- name: Get current VSD version
  command: echo $VSD_VERSION
  delegate_to: "{{ groups['vsds'][0] }}"
  remote_user: root
  run_once: true
  register: vsd_version

- name: Print vsd version when verbosity >= 1
  debug: var=upgrade_from_version verbosity=1
  run_once: true

- name: Print vsd version when verbosity >= 1
  debug: var=vsd_version verbosity=1
  run_once: true

- block:      
  - name: Stop vsd-stats group on VSD(s)
    command: monit stop -g vsd-stats
    remote_user: root

  - name: Get monit state for stat processes
    vsd_monit:
      state: group_summary
      group: vsd-stats
    register: stats_state
    remote_user: root

  - name: Verify stats processes are stopped
    assert: 
      that: stats_state['state']['{{ item }}'] == 'not monitored'
      msg: item   is still running 
    with_items: "{{ stats_state.state.keys() }}" 

  - name: Migrate current date data to new schema version
    command: "{{ migrate_current_data }}"
    remote_user: root
    when: migrate_current_day_data

  - name: Migrate previous day data to new schema version
    command: "{{ migrate_previous_data }}"
    remote_user: root
    when: not migrate_current_day_data

  - name: Start vsd-stats processess
    command: "monit start -g vsd-stats"
    remote_user: root

  - name: Fetch stats processess current state
    command: "monit -g vsd-stats summary"
    until: stats_temp_state.stdout.find("Running") != -1 and
           stats_temp_state.stdout.find("Status ok") != -1 and
           "Not monitored" not in stats_temp_state.stdout and
           "Initializing" not in stats_temp_state.stdout and
           "Status failed" not in stats_temp_state.stdout
    retries: 10
    delay: 30
    register: stats_temp_state
    remote_user: root

  - name: Get monit state for stat processes
    vsd_monit:
      state: group_summary
      group: vsd-stats
    register: stats_current_state
    remote_user: root

  - name: Verify stats processes are started/running
    assert:
      that: stats_current_state['state']['{{ item }}'] == 'running' or stats_current_state['state']['{{ item }}'] == 'status ok'
      msg: item  is still running
    with_items: "{{ stats_current_state.state.keys() }}"
  when: 
    - vsd_version.stdout in supported_vsd_versions
    - upgrade_from_version == '4.0.1'
    - inventory_hostname in groups['vsds']
