---
- include: report_header.yml

- name: Wait for VSC ssh to be ready
  local_action:
    module: wait_for
    port: "22"
    host: "{{ mgmt_ip }}"
    search_regex: OpenSSH
    delay: 1
  tags:
    - vsc
    - vsc-deploy
    - vsc-health

- name: Clean known_hosts of VSC's 
  command: ssh-keygen -R "{{ mgmt_ip }}" -f /root/.ssh/known_hosts
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: "{{ ansible_sudo_username }}"

- name: Get output of 'show version'
  sros_command:
    commands:
      - show version
    provider: "{{ vsc_creds }}"
  register: sh_version
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: "{{ ansible_sudo_username }}"

- name: Print 'show version' when verbosity >= 1
  debug: var=sh_version verbosity=1

- name: Write show version json to report
  nuage_append: filename="{{ report_path }}" text="{{ inventory_hostname }} {{ sh_version|to_nice_json }}\n"
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: "{{ ansible_sudo_username }}"

- name: Get output of 'show router bgp summary'
  sros_command:
    commands:
      - show router bgp summary
    provider: "{{ vsc_creds }}"
  register: bgp_summary
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: "{{ ansible_sudo_username }}"

- name: Print 'show router bgp summary' when verbosity >= 1
  debug: var=bgp_summary verbosity=1

- name: Create local variable with BGP Summary in json
  set_fact: bgp_summary_json="{{ bgp_summary.stdout[0]|bgp_summary_to_json }}"

- name: Print BGP Summary in json when verbosity >= 1
  debug: var=bgp_summary_json verbosity=1

- name: Write BGP Admin State JSON to file
  nuage_append: filename="{{ report_path }}" text="{{ inventory_hostname }} {{ bgp_summary_json|to_nice_json }}\n"
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: "{{ ansible_sudo_username }}"

- name: Create local variable with BGP Admin State
  set_fact: bgp_admin_state="{{ bgp_summary_json['BGP Admin State'] }}"

- name: Print BGP Admin State when verbosity >= 1
  debug: var=bgp_admin_state verbosity=1

- name: Check for expected BGP Admin State
  assert: { 
    that: "'{{ expected_bgp_admin_state }}' in bgp_admin_state",
    msg: "Unexpected BGP Admin State - {{ bgp_admin_state }}. Expected '{{ expected_bgp_admin_state }}'. Check output of 'show router bgp summary'."
  }
  ignore_errors: yes

- name: Create local variable for BGP Oper State
  set_fact: bgp_oper_state="{{ bgp_summary_json['BGP Oper State'] }}"

- name: Print BGP Oper State when verbosity >= 1
  debug: var=bgp_oper_state verbosity=1

- name: Check for expected BGP Oper State
  assert: { 
    that: "'{{ expected_bgp_oper_state }}' in bgp_oper_state",
    msg: "Unexpected BGP Oper State - {{ bgp_oper_state }}. Expected '{{ expected_bgp_oper_state }}'. Check output of 'show router bgp summary'."
  }
  ignore_errors: yes

- name: Create local variable for BGP Peer Count
  set_fact: bgp_peer_count="{{ bgp_summary_json['Total Peers'] }}"

- name: Print BGP Peer Count when verbosity >= 1
  debug: var=bgp_peer_count verbosity=1

- name: Check for expected BGP Peer Count
  assert: { 
    that: "{{ expected_num_bgp_peers }} == {{ bgp_peer_count }}",
    msg: "Invalid BGP Peer count ({{ bgp_peer_count }}) detected. Expected '{{ expected_num_bgp_peers }}'. Check 'show router bgp summary'."
  }
  ignore_errors: yes

- name: Print number of BGP Peer details when verbosity >= 1
  debug: var=bgp_summary_json['Peers']|length verbosity=1

- name: Check for details for the correct number of BGP Peers
  assert: { 
    that: "{{ expected_num_bgp_peers }} == {{ bgp_summary_json['Peers']|length }}",
    msg: "Didn't find enough sets of details for BGP peers. Found {{ bgp_summary_json['Peers']|length }}. Expected '{{ expected_num_bgp_peers }}'. Check 'show router bgp summary'."
  }
  ignore_errors: yes

- name: Get output of 'show vswitch-controller xmpp-server detail'
  sros_command:
    commands:
      - show vswitch-controller xmpp-server detail
    provider: "{{ vsc_creds }}"
  register: xmpp_detail
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: "{{ ansible_sudo_username }}"

- name: Print 'show vswitch-controller xmpp-server detail' when verbosity >= 1
  debug: var=xmpp_detail verbosity=1

- name: Create local variable with xmpp-server detail in json
  set_fact: xmpp_detail_json="{{ xmpp_detail.stdout[0]|xmpp_server_detail_to_json }}"

- name: Print xmpp-server detail in json when verbosity >= 1
  debug: var=xmpp_detail_json verbosity=1

- name: Write xmpp-server detail json to report
  nuage_append: filename="{{ report_path }}" text="{{ inventory_hostname }} {{ xmpp_detail_json|to_nice_json }}\n"
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: "{{ ansible_sudo_username }}"

- name: Create local variable for xmpp-server state
  set_fact: xmpp_server_state="{{ xmpp_detail_json['State'] }}"

- name: Print xmpp-server state when verbosity >= 1
  debug: var=xmpp_server_state verbosity=1

- name: Check for the expected xmpp-server state
  assert: { 
    that: "{{ expected_xmpp_server_state == xmpp_server_state }}",
    msg: "Invalid xmpp-server state ({{ xmpp_server_state }}) detected. Expected {{ expected_xmpp_server_state }}. Check 'show vswitch-controller xmpp-server details'."
  }
  ignore_errors: yes

- name: Get output of 'show vswitch-controller vswitches'
  sros_command:
    commands:
      - show vswitch-controller vswitches
    provider: "{{ vsc_creds }}"
  register: show_vswitches
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: "{{ ansible_sudo_username }}"

- name: Print output of 'show vswitch-controller vswitches' when verbosity >= 1
  debug: var=show_vswitches verbosity=1

- name: Create local variable with show vswitches output in json
  set_fact: show_vswitches_json="{{ show_vswitches.stdout[0]|show_vswitches_to_json }}"

- name: Print show vswitches in json when verbosity >= 1
  debug: var=show_vswitches_json verbosity=1

- name: Write vswiches json to report
  nuage_append: filename="{{ report_path }}" text="{{ inventory_hostname }} {{ show_vswitches_json|to_nice_json }}\n"
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: "{{ ansible_sudo_username }}"

- name: Check for the expected number of vswitches
  assert: { 
    that: "{{ expected_num_vswitches }} == {{ show_vswitches_json['No. of virtual switches'] }}",
    msg: "Invalid vswitch count ({{ show_vswitches_json['No. of virtual switches'] }}) detected. Expected {{ expected_num_vswitches }}. Check 'show vswitch-controller vswitches'."
  }
  ignore_errors: yes

- name: Get output of 'show vswitch-controller vports type host detail'
  sros_command:
    commands:
      - show vswitch-controller vports type host detail
    provider: "{{ vsc_creds }}"
  register: show_host_vports
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: "{{ ansible_sudo_username }}"

- name: Print output of 'show vswitch-controller vports type host detail' when verbosity >= 1
  debug: var=show_host_vports verbosity=1

- name: Create local variable with show host vports output in json
  set_fact: show_host_vports_json="{{ show_host_vports.stdout[0]|show_host_vports_to_json }}"

- name: Print show host vports in json when verbosity >= 1
  debug: var=show_host_vports_json verbosity=1

- name: Write host vports json to report
  nuage_append: filename="{{ report_path }}" text="{{ inventory_hostname }} HOST VPORTS {{ show_host_vports_json|to_nice_json }}\n"
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: "{{ ansible_sudo_username }}"

- name: Check for the expected number of host vports
  assert: { 
    that: "{{ expected_num_host_vports }} == {{ show_host_vports_json['No. of virtual ports'] }}",
    msg: "Invalid host vport count ({{ show_host_vports_json['No. of virtual ports'] }}) detected. Expected {{ expected_num_host_vports }}. Check 'show vswitch-controller vports type host detail'."
  }
  ignore_errors: yes

- name: Get output of 'show vswitch-controller vports type vm detail'
  sros_command:
    commands:
      - show vswitch-controller vports type vm detail
    provider: "{{ vsc_creds }}"
  register: show_vm_vports
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: "{{ ansible_sudo_username }}"

- name: Print output of 'show vswitch-controller vports type vm detail' when verbosity >= 1
  debug: var=show_vm_vports verbosity=1

- name: Create local variable with show vm vports output in json
  set_fact: show_vm_vports_json="{{ show_vm_vports.stdout[0]|show_vm_vports_to_json }}"

- name: Print show vm vports in json when verbosity >= 1
  debug: var=show_vm_vports_json verbosity=1

- name: Write vm vports json to report
  nuage_append: filename="{{ report_path }}" text="{{ inventory_hostname }} VM VPORTS {{ show_vm_vports_json|to_nice_json }}\n"
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: "{{ ansible_sudo_username }}"

- name: Check for the expected number of vm vports
  assert: { 
    that: "{{ expected_num_vm_vports }} == {{ show_vm_vports_json['No. of virtual ports'] }}",
    msg: "Invalid vm vport count ({{ show_vm_vports_json['No. of virtual ports'] }}) detected. Expected {{ expected_num_vm_vports }}. Check 'show vswitch-controller vports type vm detail'."
  }
  ignore_errors: yes

- name: TODO sections 3.2.7, VRS-G Status
  assert: { 
    that: true,
    msg: "TODO sections 3.2.7, VRS-G Status"
  }
  ignore_errors: yes

- name: Get output of 'show vswitch-controller gateway ports'
  sros_command:
    commands:
      - show vswitch-controller gateway ports
    provider: "{{ vsc_creds }}"
  register: show_gateway_ports
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: "{{ ansible_sudo_username }}"

- name: Print output of 'show vswitch-controller gateway ports' when verbosity >= 1
  debug: var=show_gateway_ports verbosity=1

- name: Create local variable with show gateway ports output in json
  set_fact: show_gateway_ports_json="{{ show_gateway_ports.stdout[0]|show_gateway_ports_to_json }}"

- name: Print show gateway ports in json when verbosity >= 1
  debug: var=show_gateway_ports_json verbosity=1

- name: Write gateway ports json to report
  nuage_append: filename="{{ report_path }}" text="{{ inventory_hostname }} GATEWAY VPORTS {{ show_gateway_ports_json|to_nice_json }}\n"
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: "{{ ansible_sudo_username }}"

- name: Check for the expected number of gateway ports
  assert: { 
    that: "{{ expected_num_gateway_ports }} == {{ show_gateway_ports_json['No. of Ports'] }}",
    msg: "Invalid gateway port count ({{ show_gateway_ports_json['No. of Ports'] }}) detected. Expected {{ expected_num_gateway_ports }}. Check 'show vswitch-controller gateway ports'."
  }
  ignore_errors: yes

- name: TODO section 3.2.9, vport-to-FIP associations
  assert: { 
    that: true,
    msg: "TODO sections 3.2.9, vport-to-FIP associations"
  }
  ignore_errors: yes

- name: Lookup the error report file
  stat:
    path: "{{ failure_report_file_name }}"
  register: report
  delegate_to: "{{ ansible_deployment_host }}"
  remote_user: "{{ ansible_sudo_username }}"

- name: Check for failures
  assert: { 
    that: "not report.stat.exists",
    msg: "Failures detected. Check {{ failure_report_file_name }}."
  }
  ignore_errors: yes

- include: report_footer.yml
