---

- block:
  - name: Clean known_hosts
    known_hosts:
      name: "{{ hostname }}"
      state: absent
    delegate_to: localhost

  - include: update-vsd.yml
    remote_user: "root"
    delegate_to: "{{ item }}"
    with_items: "{{ groups['vsds'] }}"
    # JvB run_once doesn't work here because of serial=1 in the playbook
    run_once: true

  - block:
    - name: Get VSD version
      shell: echo $VSD_VERSION
      register: vsd_version

    - name: Revoke old VSC cert, if any
      command: "{{ revoke_certs }}"
      ignore_errors: yes

    - name: Create and transfer certs from 4.0.4 VSD
      expect:
       timeout: 55
       command: "{{ create_certs_404 }}"
       responses:
         (?i)password: "admin"
      when: "'4.0.4' in vsd_version.stdout"

    - name: Create and transfer certs from VSD
      expect:
       timeout: 120
       command: "{{ create_certs }}"
       responses:
         (?i)password: "admin"
      when: "'4.0.4' not in vsd_version.stdout"
 
    delegate_to: "{{ groups['vsds'][0] }}"
    remote_user: "root"


#  - name: Set Top-Level-Directory
#    set_fact: tld="{{ role_path }}/../../"

#  - name: Create TLS profile
#    local_action: command python {{ role_path }}/files/vsc_config.py {{ tld }} {{ xmpp.username }}
#    register: output
#    # TODO: Replace by vsc_command, or sros_command module calls

  - name: Patch bug in sros_config module
    shell: |
      sed -i 's/{,3}(/{,3}>?(/g' /usr/lib/python2.7/site-packages/ansible/plugins/terminal/sros.py
      rm -f /usr/lib/python2.7/site-packages/ansible/plugins/terminal/sros.pyc
    delegate_to: "{{ ansible_deployment_host }}"

  - name: Configure VSC for VNS
    sros_config:
      lines:
        - configure system security tls-profile "vns-tls-profile" create
        - configure system security tls-profile "vns-tls-profile" own-key "cf1:/{{xmpp.username}}-Key.pem"
        - configure system security tls-profile "vns-tls-profile" own-certificate "cf1:/{{xmpp.username}}.pem"
        - configure system security tls-profile "vns-tls-profile" ca-certificate "cf1:/{{xmpp.username}}-CA.pem"
        - configure system security tls-profile "vns-tls-profile" no shutdown
        - configure vswitch-controller open-flow {{ openflow_use_tls | ternary( "tls-profile vns-tls-profile", "no tls-profile" ) }}
        - configure vswitch-controller xmpp {{ xmpp_use_tls | ternary( "tls-profile vns-tls-profile", "no tls-profile" ) }}
        - configure vswitch-controller {{ xmpp_inband | ternary( "route-preference primary inband secondary none", "no route-preference" ) }}
        - configure system time ntp ntp-server
      save: true
      provider: "{{ vsc_creds }}"
    delegate_to: localhost

#  - name: Verification Result Failure Status
#    fail: msg={{ output.stdout }}
#    when: output.stdout | search("(?i)MINOR")
#    ignore_errors: yes

#  - name: Verification Result Success Status
#    debug: var=output.stdout verbosity=1

  - name: check xmpp connectivity between VSC and VSD after enabling TLS
    sros_command:
      commands:
        - show vswitch-controller xmpp-server | match Functional
      provider: "{{ vsc_creds }}"
    register: xmpp_status
    until: xmpp_status.stdout is defined and xmpp_status.stdout[0].find('Functional') != -1
    retries: 6
    delay: 10
    delegate_to: localhost

  - name: Print output of 'show vswitch-controller xmpp-server' when verbosity >= 1
    debug: var=xmpp_status verbosity=1

  tags: vsc
