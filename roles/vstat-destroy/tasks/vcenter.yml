---
- block:
  - name: Verify that upgrade_vmname is defined if this is an upgrade VM
    assert:
      that: "upgrade_vmname is defined"
      msg: "For vstat-upgrade-destroy, upgrade_vmname must be defined in build_vars.yml"

  - name: Set local variable with upgrade_vmname
    set_fact:
      vm_name: "{{ upgrade_vmname }}"
  when: not preserve_vm | default( False )

- block:
  - name: Set local variable with vmname
    set_fact:
      vm_name: "{{ vmname }}"
  when: preserve_vm | default( False ))

- name: Finding VM folder
  connection: local
  vmware_guest_find:
    hostname: "{{ target_server }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    name: "{{ vm_name }}"
    validate_certs: no
  register: vstat_vm_folder
  ignore_errors: yes

- name: Gathering info on VM
  connection: local
  vmware_guest_facts:
    hostname: "{{ target_server }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    folder: "/{{ vcenter.datacenter }}{{ vstat_vm_folder['folders'][0] }}"
    name: "{{ vm_name }}"
    validate_certs: no
  register: vstat_vm_facts
  ignore_errors: yes
  when: vstat_vm_folder|succeeded

- debug: var=vstat_vm_facts verbosity=1

- name: Check for exceptions in VSTAT Vm facts
  fail: msg="Exception found {{ vstat_vm_facts.exception }}"
  when: vstat_vm_facts.exception is defined

- block:
  - name: Power off the Stats VM
    connection: local
    vmware_guest:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      validate_certs: no
      datacenter: "{{ vcenter.datacenter }}"
      folder: "/{{ vcenter.datacenter }}{{ vstat_vm_folder['folders'][0] }}"
      name: "{{ vm_name }}"
      state: "poweredoff"
    when: vstat_vm_facts['instance']['hw_power_status'] == 'poweredOn'

  - name: Removing the Stats VM
    connection: local
    vmware_guest:
      hostname: "{{ target_server }}"
      username: "{{ vcenter.username }}"
      password: "{{ vcenter.password }}"
      validate_certs: no
      datacenter: "{{ vcenter.datacenter }}"
      folder: "/{{ vcenter.datacenter }}{{ vstat_vm_folder['folders'][0] }}"
      name: "{{ vm_name }}"
      state: "absent"
    when: (not nuage_upgrade | default( False )) or (not preserve_vm | default( False ))
    
  when: vstat_vm_folder|succeeded and vstat_vm_facts|succeeded
