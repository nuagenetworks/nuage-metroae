---
- name: Pull facts on target_server
  setup: gather_subset=!all
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- name: List the Virtual Machines on target_server
  virt: command=list_vms
  register: virt_vms
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"

- block:
  - name: Destroy VSTAT VM
    virt:
      name: "{{ inventory_hostname }}"
      state: destroyed
      uri: qemu:///system
    delegate_to: "{{ target_server }}"
    remote_user: "{{ target_server_username }}"

  - name: Set VSTAT backup flag
    set_fact: backup_vstat="{{ preserve_vstat|default('False') }}"
  
  - name: Set if this is for a rollback
    set_fact: rollback="{{ rollback|default('False') }}" 

  - block:
    - name: Create backup directory name when not a rollback
      set_fact: backup_dir="{{ images_path }}/{{ inventory_hostname }}.backup.{{ ansible_date_time.date }}@{{ ansible_date_time.time }}"
      when: not rollback

    - name: Create backup directory name when rollback
      set_fact: backup_dir="{{ images_path }}/{{ inventory_hostname }}.rollback.{{ ansible_date_time.date }}@{{ ansible_date_time.time }}"
      when: rollback

    - name: Move the old VM image dir to the backup directory
      command: "mv {{ images_path }}/{{ inventory_hostname }}/ {{ backup_dir }}"
      delegate_to: "{{ target_server }}"
      remote_user: "{{ target_server_username }}"

    - name: Get XML for old VM
      virt:
        name: "{{ inventory_hostname }}"
        command: get_xml
        uri: qemu:///system
      register: vstat_xml
      delegate_to: "{{ target_server }}"
      remote_user: "{{ target_server_username }}"

    - debug: var=vstat_xml verbosity=1

    - name: Write VM XML to file
      copy:
        content: "{{ vstat_xml.get_xml }}"
        dest: "{{ backup_dir }}/{{ inventory_hostname }}.xml"
      delegate_to: "{{ target_server }}"
      remote_user: "{{ target_server_username }}"
    when: backup_vstat

  - name: Undefine VSTAT VM
    virt:
      name: "{{ inventory_hostname }}"
      command: undefine
      uri: qemu:///system
    delegate_to: "{{ target_server }}"
    remote_user: "{{ target_server_username }}"
  when: inventory_hostname in virt_vms.list_vms

- name: Destroy the images directory
  file: path={{ images_path }}/{{ inventory_hostname }}
        state=absent
  delegate_to: "{{ target_server }}"
  remote_user: "{{ target_server_username }}"
