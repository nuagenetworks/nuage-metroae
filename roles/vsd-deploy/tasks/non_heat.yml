---
- name: Wait for VSD ssh to be ready
  local_action:
    module: wait_for
    port: "22"
    host: "{{ mgmt_ip }}"
    search_regex: OpenSSH
    delay: 1

- name: Query {{ target_server }} facts
  action: setup
  remote_user: "root"
  
- name: Update /etc/hosts file
  blockinfile:
    dest: /etc/hosts
    block: |
      {% for host in groups['vsds']  %}
      {{ hostvars[host]['mgmt_ip'] }}    {{ host }}
      {% endfor %}
  remote_user: "root"

- block:
  - name: Read the VSD version
    shell: echo $VSD_VERSION | cut -d . -f 1
    register: vsd_version
    remote_user: root
  
  - debug: var=vsd_version.stdout

  - block:
    - name: Generate SSH keys
      shell: ssh-keygen -b 2048 -t rsa -f /root/.ssh/id_rsa -q -N ""
      args:
        creates: /root/.ssh/id_rsa
      remote_user: root 
      delegate_to: "{{ item }}"
      with_items: "{{ groups['vsds'] }}"
      run_once: true
      
    - name: Get generated SSH keys
      shell: cat ~/.ssh/id_rsa.pub
      register: ssh_key_lst
      remote_user: root
      delegate_to: "{{ item }}"
      with_items: "{{ groups['vsds'] }}"
      run_once: true
   
    - name: Add SSH keys to authorized_keys file
      shell: "echo {{ item[1].stdout }} >> /root/.ssh/authorized_keys"
      delegate_to: "{{ item[0] }}"
      with_nested:
        - "{{ groups['vsds'] }}"
        - "{{ ssh_key_lst.results }}"
      run_once: true
      remote_user: "{{ target_server_username }}"
    when: vsd_version.stdout | int < 5
  - block:
    - name: Generate SSH keys
      shell: sudo -u vsd ssh-keygen -b 2048 -t rsa -f /home/vsd/.ssh/id_rsa -q -N ""
      args:
        creates: /root/.ssh/id_rsa
      remote_user: root 
      delegate_to: "{{ item }}"
      with_items: "{{ groups['vsds'] }}"
      run_once: true
      
    - name: Get generated SSH keys
      shell: cat /home/vsd/.ssh/id_rsa.pub
      register: ssh_key_lst
      remote_user: root
      delegate_to: "{{ item }}"
      with_items: "{{ groups['vsds'] }}"
      run_once: true
   
    - name: Add SSH keys to authorized_keys file
      shell: "echo {{ item[1].stdout }} >> /home/vsd/.ssh/authorized_keys"
      delegate_to: "{{ item[0] }}"
      with_nested:
        - "{{ groups['vsds'] }}"
        - "{{ ssh_key_lst.results }}"
      run_once: true
      remote_user: "{{ target_server_username }}"

    - name: Change owner and permissions of VSD authorized keys
      file:
        path: /home/vsd/.ssh/authorized_keys
        owner: vsd
        group: hadoopusers
        mode: 0640
      remote_user: root
      delegate_to: "{{ item }}"
      with_items: "{{ groups['vsds'] }}"
      run_once: true
    when: vsd_version.stdout | int >= 5
  when: vsd_sa_or_ha == 'ha'

- name: Delete the localtime file
  file:
    path: /etc/localtime
    state: absent
  remote_user: "root"

- name: Create the localtime symlink
  file:
    src: /usr/share/zoneinfo/{{ timezone }}
    dest: /etc/localtime
    state: link
  remote_user: "root"

- name: Copy files to pin OS version when CentOS 6.6 or 6.5
  copy:
    src: ./roles/vsd-deploy/files/c66/
    dest: /etc/yum.repos.d/
  remote_user: "root"
  when:
    - yum_pin
    - "({{ ansible_distribution_version }} == 6.6) or ({{ ansible_distribution_version }} == 6.5)"

- name: Copy files to pin OS version when CentOS 6.8
  copy:
    src: ./roles/vsd-deploy/files/c68/
    dest: /etc/yum.repos.d/
  remote_user: "root"
  when: 
    - yum_pin
    - "{{ ansible_distribution_version }} == 6.8"

- name: Configure yum proxy
  lineinfile:
    dest: /etc/yum.conf
    line: "proxy={{ yum_proxy }}"
  remote_user: "root"
  when: yum_proxy != 'NONE'

- name: Execute a yum update
  yum:
    name: '*'
    state: latest
  remote_user: "root"
  when: yum_update

- name: Remove old NTP servers
  lineinfile:
    dest: /etc/ntp.conf
    regexp: "^server"
    state: absent
  remote_user: "root"

- name: Configure NTP servers
  lineinfile:
    dest: /etc/ntp.conf
    line: "server {{ item }} iburst"
  with_items: "{{ ntp_server_list }}"
  remote_user: "root"

- name: Stop the ntpd service if running
  command: service ntpd stop
  remote_user: "root"

- name: Manually sync time with ntp server
  command: ntpdate -u "{{ntp_server_list[0]}}"
  remote_user: "root"

- name: Start ntpd
  command: service ntpd start
  remote_user: "root"

- name: check ntp sync state
  shell: ntpstat | awk 'NR==1{print $1}'
  register: sync_status
  until: sync_status.stdout == "synchronised"
  retries: 4
  delay: 5
  ignore_errors: yes
  remote_user: "root"

- block:
  - name: restart ntp if it hasn't synced yet
    command: service ntpd restart
    remote_user: "root"
  - name: check ntp sync state
    shell: ntpstat | awk 'NR==1{print $1}'
    register: retry_sync_status
    until: retry_sync_status.stdout == "synchronised"
    retries: 4
    delay: 5
    remote_user: "root"
  when: sync_status.stdout != "synchronized"

- name: Install VSD software on standalone node
  command: /opt/vsd/vsd-install.sh -t s -y
  when: vsd_sa_or_ha == 'sa'
  remote_user: "root"

- block:
  - name: Set if this is for a rollback
    set_fact: rollback="{{ rollback|default('False') }}" 

  - name: Install VSD software on HA node1 {{groups['vsds'][0]}}
    command: "{{ vsd_ha_node1 }}"
    when: inventory_hostname == groups['vsds'][0]
    remote_user: "root"

  - name: Install VSD software on HA node2 {{groups['vsds'][1]}}
    command: "{{ vsd_ha_node2 }}"
    when: inventory_hostname == groups['vsds'][1] and not rollback
    remote_user: "root"

  - name: Install VSD software on HA node2 {{groups['vsds'][1]}}
    command: "{{ vsd_ha_node2_rollback }}"
    when: inventory_hostname == groups['vsds'][1] and rollback
    remote_user: "root"

  - name: Install VSD software on HA node3 {{groups['vsds'][2]}}
    command: "{{ vsd_ha_node3 }}"
    when: inventory_hostname == groups['vsds'][2]
    remote_user: "root"
  when: vsd_sa_or_ha == 'ha'
