---
- name: Get VSD details from OpenStack
  os_server_facts:
    auth:
      "{{ os_auth }}"
    server: "{{ inventory_hostname }}"
  register: vsd_ip
  delegate_to: 127.0.0.1

- name: Set vsd mgmt ip
  set_fact:
    vsd_mgmt_ip: "{{ vsd_ip['ansible_facts']['openstack_servers'][0]['networks'][vsd_network][0] }}"

- name: Clean known_hosts of VSD's
  known_hosts:
    name: "{{ vsd_mgmt_ip }}"
    state: absent
  delegate_to: localhost

- block:
  - name: Get infra server details from OS server facts
    os_server_facts:
      auth:
        "{{ os_auth }}"
      server: "{{ infra_server_name }}"
    register: infra_server
    delegate_to: 127.0.0.1

  - name: Set DNS/NTP server ip
    set_fact:
      infra_ip: "{{ infra_server['ansible_facts']['openstack_servers'][0]['private_v4'] }}"

  - name: Update DNS entries
    lineinfile:
      line: "{{ vsd_mgmt_ip }}  {{ inventory_hostname }}"
      dest: "/etc/hosts"
    delegate_to: "{{ infra_ip }}"
    remote_user: "root"

  - name: Update XMPP DNS entries for VSD cluster deployments
    lineinfile:
      line: "{{ vsd_mgmt_ip }}  xmpp.{{ dns_domain }}"
      dest: "/etc/hosts"
    delegate_to: "{{ infra_ip }}"
    remote_user: "root"
    when: vsd_sa_or_ha | match('ha')

  - name: Restart DNS service
    shell: service dnsmasq restart
    delegate_to: "{{ infra_ip }}"
    remote_user: "root"
  when: infra_server_name is defined

- name: Update /etc/hosts file on ansible host
  lineinfile:
    dest: /etc/hosts
    line: "{{ vsd_mgmt_ip }}    {{ inventory_hostname }}"
  delegate_to: 127.0.0.1

- name: Wait for VSD-HA ssh to be ready
  local_action:
    module: wait_for
    port: "22"
    host: "{{ vsd_mgmt_ip }}"
    search_regex: OpenSSH
    delay: 1

- name: Inject ssh key of ansible_deployment_host to VSD if cloud-init did not work
  expect:
    command: "ssh-copy-id -i root@{{ vsd_mgmt_ip }}"
    responses:
      (?i)yes: "yes"
      (?i)password: "Alcateldc"
  remote_user: "root"
  delegate_to: localhost

- name: Pause for ssh port to be active
  pause:
    seconds: 5

- name: Query {{ target_server }} facts
  action: setup
  remote_user: "{{ target_server_username }}"

- name: Update hostname
  template: src=network.j2 backup=no dest=/etc/sysconfig/network

- name: Add a DNS server to eth0
  lineinfile:
    dest: /etc/sysconfig/network-scripts/ifcfg-eth0
    regexp: "DNS1="
    line: "DNS1={{ infra_ip | default(dns_server_list[0]) }}"
  when: infra_server_name is defined

- name: Add nameserver
  command: echo "{{ infra_ip }}" >> /etc/resolv.conf
  remote_user: "root"
  when: infra_server_name is defined

- name: Restart networking
  command: /etc/init.d/network restart
  remote_user: "root"

- name: Resolve fqdn
  command: hostname "{{ inventory_hostname }}"
  remote_user: "root"

- name: Update /etc/hosts file
  lineinfile:
    dest: /etc/hosts
    line: "{{ vsd_mgmt_ip }}  {{ inventory_hostname }}"
  remote_user: "root"

- name: Copy files to pin OS version when CentOS 6.6 or 6.5
  copy:
    src: ./roles/vsd-deploy/files/c66/
    dest: /etc/yum.repos.d/
  remote_user: "root"
  when:
    - yum_pin
    - ansible_distribution_version|match('6.6') or ansible_distribution_version|match('6.5')

- name: Copy files to pin OS version when CentOS 6.8
  copy:
    src: ./roles/vsd-deploy/files/c68/
    dest: /etc/yum.repos.d/
  remote_user: "root"
  when:
    - yum_pin
    - ansible_distribution_version|match('6.8')

- name: Configure yum proxy
  lineinfile:
    dest: /etc/yum.conf
    line: "proxy={{ yum_proxy }}"
  remote_user: "root"
  when: not yum_proxy | match('NONE')

- name: Execute a yum update
  yum:
    name: '*'
    state: latest
  remote_user: "root"
  when: yum_update

- block:
  - name: Read the VSD version
    shell: echo $VSD_VERSION | cut -d . -f 1
    register: vsd_version
    remote_user: root

  - debug: var=vsd_version.stdout verbosity=1

  - block:
    - name: Generate SSH keys
      shell: ssh-keygen -b 2048 -t rsa -f /root/.ssh/id_rsa -q -N ""
      args:
        creates: /root/.ssh/id_rsa
      remote_user: root
      delegate_to: "{{ item }}"
      with_items: "{{ groups['vsds'] }}"
      run_once: true

    - name: Get generated SSH keys
      shell: cat ~/.ssh/id_rsa.pub
      register: ssh_key_lst
      remote_user: root
      delegate_to: "{{ item }}"
      with_items: "{{ groups['vsds'] }}"
      run_once: true

    - name: Add SSH keys to authorized_keys file
      shell: "echo {{ item[1].stdout }} >> /root/.ssh/authorized_keys"
      delegate_to: "{{ item[0] }}"
      with_nested:
        - "{{ groups['vsds'] }}"
        - "{{ ssh_key_lst.results }}"
      remote_user: root
      run_once: true
    when: vsd_version.stdout | int < 5

  - block:
    - name: Generate SSH keys
      shell: sudo -u vsd ssh-keygen -b 2048 -t rsa -f /home/vsd/.ssh/id_rsa -q -N ""
      args:
        creates: /home/vsd/.ssh/id_rsa
      remote_user: root
      delegate_to: "{{ item }}"
      with_items: "{{ groups['vsds'] }}"
      run_once: true

    - name: Get generated SSH keys
      shell: cat /home/vsd/.ssh/id_rsa.pub
      register: ssh_key_lst
      remote_user: root
      delegate_to: "{{ item }}"
      with_items: "{{ groups['vsds'] }}"
      run_once: true

    - name: Add SSH keys to authorized_keys file
      shell: "echo {{ item[1].stdout }} >> /home/vsd/.ssh/authorized_keys"
      delegate_to: "{{ item[0] }}"
      with_nested:
        - "{{ groups['vsds'] }}"
        - "{{ ssh_key_lst.results }}"
      remote_user: root
      run_once: true

    - name: Change owner and permissions of VSD authorized keys
      file:
        path: /home/vsd/.ssh/authorized_keys
        owner: vsd
        group: hadoopusers
        mode: 0640
      remote_user: root
      delegate_to: "{{ item }}"
      with_items: "{{ groups['vsds'] }}"
      run_once: true
    when: vsd_version.stdout | int >= 5
  when: vsd_sa_or_ha | match('ha')

- name: Configure ntpd and ntpdate and local time zone
  include_role:
    name: common
    tasks_from: linux-ntp

- name: Install VSD software on standalone node
  command: /opt/vsd/vsd-install.sh -t s -y
  when: vsd_sa_or_ha | match('sa')
  remote_user: "root"

- block:
  - name: Install VSD software on HA node1 {{groups['vsds'][0]}}
    command: "{{ vsd_node1_install_cmd }}"
    when: inventory_hostname == groups['vsds'][0]
    remote_user: "root"

  - name: Install VSD software on HA node2 {{groups['vsds'][1]}}
    command: "{{ vsd_node2_install_cmd }}"
    when: inventory_hostname == groups['vsds'][1]
    remote_user: "root"

  - name: Install VSD software on HA node3 {{groups['vsds'][2]}}
    command: "{{ vsd_node3_install_cmd }}"
    when: inventory_hostname == groups['vsds'][2]
    remote_user: "root"
  when: vsd_sa_or_ha | match('ha')

- name: Set XMPP connection to allow both clear and TLS
  command: /opt/vsd/bin/ejmode allow -y
  remote_user: "root"
