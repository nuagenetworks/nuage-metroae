---
- block:
  # Check proper resolution of VM VPorts (if any exist) on VRS
  - name: get list of vms
    virt: command=list_vms state=running
    register: virt_vms
    
  - name: Get TAP Interfaces for each VM
    shell: "virsh domiflist {{ item }} | awk '/tap.*/ { print $1 }'"
    with_items: "{{ virt_vms.list_vms }}"
    register: tapinterfaces
    changed_when: false
  
  - name: Check if corresponding Interface and Port exist on OVS
    shell: "ovs-vsctl show | grep -Pzl '(?s)Port \"{{item}}\"\\n.*Interface \"{{item}}\"'"
    with_items: "{{ tapinterfaces.results | map(attribute='stdout') | list }}"
    changed_when: false
  
  - name: Check if EVPN got resolved for each VPort
    shell: "ovs-appctl vm/port-show | grep '{{item}}' -A 3 | grep -q 'evpn_id: 0'"
    with_items: "{{ tapinterfaces.results | map(attribute='stdout') | list}}"
    register: results
    changed_when: false
    failed_when: results.rc ==  0
  when: (personality.stdout|lower == 'vrs')
  become: true
  become_user: root

- block:
  # Check proper resolution of Host/Bridge VPorts (if any exist) on VRS-G
  - name: Get list of all Bridge VPorts
    shell: "ovs-appctl bridge/show | awk '/Name/ {print $4}'"
    register: bridge_ports
    changed_when: false

  - name: Check if EVPN got resolved for each Bridge VPort
    shell: "ovs-appctl bridge/port-show | grep '{{item}}' -A 3 | grep -q 'evpn_id: 0'"
    with_items: "{{ bridge_ports.stdout_lines }}"
    register: results
    changed_when: false
    failed_when: results.rc ==  0

  - name: Get list of all Host VPorts
    shell: "ovs-appctl host/show | awk '/Name/ {print $4}'"
    register: host_ports
    changed_when: false

  - name: Check if EVPN got resolved for each Host VPort
    shell: "ovs-appctl host/port-show | grep '{{item}}' -A 3 | grep -q 'evpn_id: 0'"
    with_items: "{{ host_ports.stdout_lines }}"
    register: results
    changed_when: false
    failed_when: results.rc ==  0
  when: (personality.stdout|lower == 'vrs-g')
  become: true
  become_user: root

